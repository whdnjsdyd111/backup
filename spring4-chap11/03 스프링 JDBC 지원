JDBC를 이용해서 프로그래밍을 할 때 성가신 작업 중의 하나는 동일한 형태의 try-catch-finally 블록을 사용해야 한다는 점이다.
예를 들어, 데이터를 삽입하는 SELECT 쿼리를 실행하는 코드를 보자.


	public List<Message> select(int start, int size) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String sql = "select * from guestmessage order by id desc limit ?, ?";
		try {
			conn = dataSource.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, start);
			pstmt.setInt(2, size);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				List<Message> messages = new ArrayList<>();
				do {
					Message m = new Message();
					m.setId(rs.getInt("id"));
					m.setName(rs.getString("name"));
					m.setMessage(rs.getString("message"));
					m.setCreationTime(rs.getTimestamp("creationTime"));
					messages.add(m);
				} while (rs.next());
				return messages;
			} else {
				return Collections.emptyList();
			}
		} catch (SQLException ex) {
			throw exceptionTranslator.translate("select", sql, ex);
		} finally {
			JdbcUtils.closeResultSet(rs);
			JdbcUtils.closeStatement(pstmt);
			JdbcUtils.closeConnection(conn);
		}
	}
	
	
메소드의 절반 정도가 Connection을 구하고, 익셉션 처리를 하고, Connection 등의 자원을 반환하는 코드이다.
실제로 SELECT 쿼리를 실행하고, 데이터를 조회하는 것과 관련된 코드는 전체 33줄 중에서 절반 정도인 18줄에 불과하다.

이번에는 테이블에 저장된 행의 모든 개수를 구하는 SELECT 쿼리를 실행하는 코드를 보자.


	public int counts() {
		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;
		String sql = "select count(*) from guestmessage";
		try {
			conn = dataSource.getConnection();
			stmt = conn.createStatement();
			rs = stmt.executeQuery(sql);
			if (rs.next()) {
				return rs.getInt(1);
			} else {
				return 0;
			}
		} catch (SQLException ex) {
			throw exceptionTranslator.translate("counts", sql, ex);
		} finally {
			JdbcUtils.closeResultSet(rs);
			JdbcUtils.closeStatement(stmt);
			JdbcUtils.closeConnection(conn);
		}
	}
	
	
앞서 INSERT 쿼리를 실행할 때와 마찬가지로 Connection 관련 코드, 익셉션 처리 코드, 자원을 반환하기 위한 finally 블록의 코드가 절반 이상을 차지하고 있다.

Connection을 구하고, try-catch-finally로 자원을 관리하는 등의 중복된 코드를 매번 입력하는 것은 중복된 작업이다.
스프링은 이런 중복된 코드를 제거할 수 있도록 해주는 템플릿 클래스를 제공하고 있다. 이 중 JDBC와 관련된 템플릿 클래스는 다음과 같다.

	- jdbcTemplate : 기본적인 JDBC 템플릿 클래스로서 JDBC를 이용해서 데이터에 대한 접근을 제공한다.
	- NamedParameterJdbcTemplate : PreparedStatement에서 인덱스 기반의 파라미터가 아닌 이름을 가진 파라미터를 사용할 수 있도록 지원하는 템플릿 클래스
	- SimpleJdbcInsert : 데이터 삽입을 위한 인터페이스를 제공해주는 클래스.
	- SimpleJdbcCall : 프로시저 호출을 위한 인터페이스를 제공해주는 클래스.
	

	3.1 JdbcTemplate 클래스를 이용한 JDBC 프로그래밍
	
o.s.jdbc.core.JdbcTemplate 클래스를 SQL 실행을 위한 메소드를 제공하고 있다. 이들 메소드를 사용하면 데이터 조회, 삽입, 수정, 삭제를 위한 SQL 쿼리를 실행할 수 있다.
JdbcTemplate 클래스를 사용하려면 다음과 같이 JdbcTemplate 객체를 생성할 때 DataSource를 전달해주면 된다.


	import javax.sql.DataSource;
	import org.springframework.jdbc.core.JdbcTemplate;
	
	public class JdbcTemplateGuestMessageDao implements GuestMessageDao {
		
		private JdbcTemplateGuestMessageDao(DataSource dataSource) {
			jdbcTemplate = new JdbcTemplate(dataSource);
		}
		...
	}
	
	
위 클래스에 대한 스프링 설정 파일은 다음과 같을 것이다.


	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<property name="jdbcUrl"
			value="jdbc:mysql://localhost/guestbook?characterEncoding=utf8" />
		<property name="user" value="spring4" />
		<property name="password" value="spring4" />
	</bean>

	<bean id="jdbcTemplateMessageDao"
		class="net.madvirus.spring4.chap11.guest.jdbc.JdbcTemplateMessageDao">
		<constructor-arg ref="dataSource" />
	</bean>
	
	
다음과 같이 JdbcTemplate 클래스를 전달받도록 구현할 수도 있다.


	public class JdbcTemplateGuestMessageDao implements GuestMessageDao {
	
		private JdbcTemplate jdbcTemplate;
		
		private JdbcTemplateGuestMessageDao(DataSource dataSource) {
			this.jdbcTemplate = jdbcTemplate;
		}
		...
	}
	
	
DAO 클래스에서 JdbcTemplate을 프로퍼티나 생성자에서 전달받을 경우, 스프링 설정 파일에서는 다음과 같이 JdbcTemplate을 빈 객체로 생성해주면 된다.


	<bean id="jdbcTemplate" 
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="jdbcTemplateMessageDao"
		class="net.madvirus.spring4.chap11.guest.jdbc.JdbcTemplateMessageDao">
		<constructor-arg ref="dataSource" />
	</bean>
	
	
DAO 객체가 내부적으로 JdbcTemplate 객체를 생성하거나 JdbcTemplate 객체를 전달받았다면,
JdbcTemplate 객체를 이용해서 SQL을 실행할 수 있다.

	(1) 조회를 위한 메소드 : query()
	
쿼리 실행 결과를 목록으로 가져올 때에는 PreparedStatement 용 SQL 쿼리와 RowMapper를 이용하는 query() 메소드를 이용하면 된다.
JdbcTemplate 클래스는 다음과 같은 query() 메소드를 제공하고 있다.

	- List<T> query(String sql, RowMapper<T> rowMapper)
	- List<T> query(String sql, Object[] args, RowMapper<T> rowMapper)
	- List<T> query(String sql, Object[] args, int[] argTypes, RowMapper<T> rowMapper)
	
위 메소드에서 각 파라미터는 다음과 같다.

	- sql : SQL 쿼리. 위치 기반 파라미터(물음표)를 이용하는 PreparedStatement 용 쿼리를 사용할 수 있다.
	- RowMapper : 조회 결과 ResultSet으로부터 데이터를 읽어와 객체를 생성해주는 매퍼.
	- args, argTypes : arg는 PreparedStatement 를 실행할 때 사용할 파라미터 바인딩 값 목록을, argTypes는 파라미터를
		바인딩 할 때 사용할 SQL 타입 목록이다. argTypes에 사용되는 값은 java.sql.Types 클래스에 정의된 값을 사용한다.
		
RowMapper는 ResultSet에서 값을 가져와 원하는 타입으로 매핑할 때 사용되며, 다음과 같이 정의되어 있다.


	public interface RowMapper<T> {
		T mapRow(ResultSet rs, int rowNum) throws SQLException;
	}
	
	
RowMapper의 mapRow() 메소드는 ResultSet에서 읽어온 값을 이용해서 원하는 타입의 객체를 생성한 뒤 리턴한다.
rowNum은 행번호를 의미하며 0부터 시작한다.

아래 코드는 query() 메소드의 사용 예이다.


	public List<Message> select(int start, int size) {
		List<Message> messages = jdbcTemplate.query(
			"select * from guestmessage order by id desc limit ?, ?",
			new Object[] {start, size},
			new RowMapper<Message>() {
				@Override
				public Message mapRow(ResultSet rs, int rowNum)
						throws SQLException {
					Message m = new Message();
					m.setId(rs.getInt("id"));
					m.setName(rs.getString("name"));
					m.setMessage(rs.getString("message"));
					m.setCreationTime(rs.getTimestamp("creationTime"));
					return m;
				}
			});
		return messages;
	}
	
	
query() 메소드의 두 번째 파라미터는 {start, size}인데, 이 배열의 값은 각각 차례대로 쿼리의 물음표 위치에 설정된다.

query() 메소드에 RowMapper의 구현 객체를 전달할 때에는 위와 가이 임의 클래스를 주로 사용한다. 하지만, 여러 메소드에서 공통으로 사용되는 코드가 있다면,
다음과 같이 RowMapper 구현 클래스를 별도로 구현해서 코드 중복을 제거할 수 있다.


	import org.springframework.jdbc.core.RowMapper;
	
	public class MessageRowMapper implements RowMapper<Message> {
	
		@Override
		public Message mapRow(ResultSet rs, int rowNum) throws SQLException {
			Message m = new Message();
			m.setId(rs.getInt("id"));
			m.setName(rs.getString("name"));
			m.setMessage(rs.getString("message"));
			m.setCreationTime(rs.getTimestamp("creationTime"));
			return m;
		}
	
	}
	
	
RowMapper 구현 클래스를 개발하면 앞서 예로 든 select() 메소드를 다음과 같이 구현할 수 있을 것이다.


	private MessageRowMapper messageRowMapper = new MessageRowMapper();
	
	@Override
	public List<Message> select(int start, int size) {
		List<Message> messages = jdbcTemplate.query(
			"select * from questmessage order by id desc limit ?, ?",
			new Object[] {strat, size},
			messageRowMapper
		);
		return messages;
	}
	
	
지금까지 예로 든 코드는 모두 PreparedStatement의 바인딩 파라미터 값을 지정하기 위해 다음과 같이 객체 배열을 사용했다.


	new Object[] {start, size},	// PreparedStatement에 바인딩 될 값
	
	
객체 배열을 사용하는 대신 PreparedStatement를 이용해서 파라미터 값을 직접 지정하고 싶다면 o.s.jdbc.core.PreparedStatementSetter를 파라미터로 갖는 query() 메소드를 사용하면 된다.

	- List<T> query(String sql, PreparedStatementSetter setter, RowMapper<T> rowMapper)
	
PreparedStatementSetter 인터페이스는 다음과 같이 PreparedStatement를 파라미터로 전달받는 setValues() 메소드를 정의하고 있다.

	
	public interface PreparedStatementSetter {
		void setValues(PreparedStatement ps) throws SQLException;
	}
	
	
PreparedStatementSetter 구현 객체는 setValues() 메소드에서 PreparedStatement의 바인딩 파라미터 값을 지정하면 된다.
아래 코드는 PreparedStatementSetter를 이용한 query() 메소드의 사용 예이다.


	public List<Message> select(int start, int size) {
		List<Message> messages = jdbcTemplate.query(
			"select * from questmessage order by id desc limit ?, ?",
			new PreparedStatementSetter() {
				@Override
				public void setValues(PreparedStatement ps) throws SQLException {
					rs.setInt(1, start);
					rs.setInt(2, size);
				}
			},
			messageRowMapper
		);
		return messages;
	}
	
	
SQL 쿼리를 파라미터로 사용하는 방법 대신 직접 PreparedStatement 객체를 생성하고 바인딩 파라미터를 지정해주고 싶다면 o.s.jdbc.core.PreparedStatementCreator 타입을
파라미터로 갖는 다음 query() 메소드를 사용하면 된다.

	- List<T> query(PreparedStatementCreator psc, RowMapper<T> rowMapper)
	
PreparedStatementCreator 인터페이스는 다음과 같이 Connection을 파라미터로 전달받고 PreparedStatement를 리턴하는 메소드를 정의하고 있다.


	package org.springframework.jdbc.core;
	
	public interface PreparedStatementCreator {
		PreparedStatement createPreparedStatement(Connection con) throws SQLException;
	}
	
	
PreparedStatementCreator 구현 객체는 createPreparedStatement() 메소드에서 파라미터로 전달받은 Connection을 이용해서
PreparedStatement 객체를 생성하고 바인딩 파라미터 값을 설정한 뒤, 생성한 PreparedStatement 객체를 리턴해주면 된다.
다음은 PreparedStatementCreator 인터페이스를 사용한 query() 메소드의 사용 예이다.


	public List<Message> select(int start, int size) {
		List<Message> messages = jdbcTemplate.query(
			"select * from questmessage order by id desc limit ?, ?",
			new PreparedStatementCreator() {
				@Override
				public PreparedStatement createPreparedStatement(Connection conn) 
						throws SQLException {
					PreparedStatement pstmt = con.prepareStatement(
						"select * from guestmessage order by id desc limit ?, ?");
					rs.setInt(1, start);
					rs.setInt(2, size);
					return pstmt;
				}
			},
			messageRowMapper
		);
		return messages;
	}
	
	
	(2) 조회를 위한 메소드 : queryForList()
	
쿼리를 실행 결과로 읽어온 컬럼 개수가 한 개라면 다음의 queryForList() 메소드를 이용해서 데이터를 조회할 수 있다.

	- List<T> queryForList(String sql, Class<T> elementType)
	- List<T> queryForList(String sql, Object[] args, Class<T> elementType)
	- List<T> queryForList(String sql, Object[] args, int[] argTypes, Class<T> elementType)
	
queryForList() 메소드에서 elementType 파라미터는 조회할 데이터 타입을 지정할 때 사용된다. 예를 들어, 조회할 컬럼 타입이 String이라면,
다음과 같이 queryForList() 메소드를 사용하면 된다. 다음은 queryForList() 메소드를 이용해서 조회 컬럼 개수가 한 개인 SELECT 쿼리를 실행하는 코드의 예이다.


	List<String> names = jdbcTemplate.queryForList(
		"select name from MEMBER where id = ?", new Object[] {"madvirus"},
		String.class);
		
		
	(3) 조회를 위한 메소드 : queryForObject()
	
쿼리 실행 결과로 구하는 행의 개수가 정확히 한 개라면, queryForObject() 메소드를 사용해서 쿼리 실행 결과를 가져올 수 있다.
사용 가능한 queryForObject() 메소드는 다음과 같다.

	- T queryForObject(String sql, RowMapper<T> rowMapper)
	- T queryForObject(String sql, Object[] args, RowMapper<T> rowMapper)
	- T queryForObject(String sql, Object[] args, int[] argTypes, RowMapper<T> rowMapper)
	- T queryForObject(String sql, Class<T> requiredType)
	- T queryForObject(String sql, Object[] args, Class<T> requiredType)
	- T queryForObject(String sql, Object[] args, int[] argTypes, Class<T> requiredType)
	- T queryForObject(String sql, RowMapper<T> rowMapper, Object ... args)
	
queryForObject() 메소드에 전달되는 각각의 파라미터는 query() 메소드와 동일하며, 차이점이 있다면 List 대신 한 개의 객체를 리턴한다는 점이다.
주의할 점은, 쿼리 실행 결과로 구한 행 개수가 정확하게 한 개가 아니면 -즉 행의 개수가 0이거나 2개 이상인 경우- IncorrectResultSizeDataAccessException 익셉션을 발생시킨다.

queryForObject() 메소드에서 쿼리 실행 결과로 한 개 이상의 컬럼을 조회하는 경우에는 RowMapper를 사용해서 데이터를 가져오면 되고,
한 개 컬러만 조회하는 경우에는 Class를 인자로 받는 queryForObject() 메소드를 사용하면 된다. Class를 인자로 전달받는 경우, 조회하는 컬럼의 개수가 두 개 이상이면 익셉션을 발생시킨다.
아래 코드는 Class 타입을 파라미터로 갖는 queryForObject() 메소드의 사용 예이다.


	public int counts() {
		return jdbcTemplate.queryForObject(
			"select count(*) from guestmessage",
			Integer.class);
	}
	
	
자바 8 버전을 사용한다면 RowMapper 타입의 임의 객체를 사용하는 대신 람다식을 사용할 수 있다.


	// 자바 8의 람다를 사용하면 보다 간결한 코드 작성이 가능
	public List<Message> select(int start, int size) {
		List<Message> messages = jdbcTemplate.query(
			"select * from questmessage order by id desc limit ?, ?",
			new Object[] {start, size},
			(rs, rowNum) -> {
				Message m = new Message();
				m.setId(rs.getInt("id"));
				m.setName(rs.getString("name"));
				m.setMessage(rs.getString("message"));
				m.setCreationTime(rs.getTimestamp("creationTime"));
				return m;
			}
		);
		return messages;
	}
	
	(4) 삽입/수정/삭제를 위한 메소드 : update()
	
INSERT, UPDATE, DELETE 쿼리를 실행할 때에는 update() 메소드를 사용한다,
update() 메소드도 query() 메소드와 마찬가지로 인덱스 파라미터를 위한 값을 전달받는 메소드와 그렇지 않은 메소드로 구분된다.

	- int update(String sql)
	- int update(String sql, Object... args) 
	- int update(String sql, Object[] args, int[] argTypes)
	- int update(String sql, PreparedStatementSetter pss)
	- int update(PreparedStatementCreator psc)
	
update() 메소드는 쿼리 실행 결과로 변경된 행의 개수를 리턴한다.

아래 코드는 update() 메소드의 사용 예이다.


	public int delete(int id) {
		return jdbcTemplate update("delete from guestmessage where id = ?", id);
	}
	
	
[지금까지의 JdbcTemplate의 사용 예제 코드를 보면 try-catch-finally 블록뿐만 아니라 Connection을 구하기 위한 코드가 전혀 포함되지 않을 것을 알 수 있다.
이렇게 템플릿 클래스를 사용하면 성가시고 중복되는 코드를 작성하지 않아도 되며, 코드의 가독성을 향상시킬 수 있다.]

	(5) KeyHandler를 이용한 자동 생성 키 구하기
	
MySQL의 auto_increment 컬럼과 같이 데이터를 삽입할 때 값이 자동으로 생성되는 키 컬럼이 있다.
insert 쿼리를 실행할 때 이렇게 자동 생성되는 키 값으 구하고 싶다면, o.s.jdbc.support.GeneratedKeyHolder 클래스를 사용하면 된다.
GeneratedKeyHandler 클래스와 o.s.jdbc.core.PreparedStateCreator 인터페이스를 파라미터로 갖는 update() 메소드를 이용하면,
자동 생성되는 키 값을 구할 수 있다. 다음 코드는 사용 예이다.

	import org.springframework.jdbc.support.GeneratedKeyHolder;
	import org.springframework.jdbc.support.KeyHolder;
	import org.springframework.jdbc.core.PreparedStatementCreator;

	@Override
	public int insert(final Message message) {
		KeyHolder keyHolder = new GeneratedKeyHolder();
		jdbcTemplate.update(new PreparedStatementCreator() {
			@Override
			public PreparedStatement createPreparedStatement(Connection conn)
					throws SQLException {
				PreparedStatement pstmt = conn.prepareStatement(
						"insert into guestmessage (name, message, creationTime) values (?,?,?)",
						new String[] { "id" });
				pstmt.setString(1, message.getName());
				pstmt.setString(2, message.getMessage());
				pstmt.setTimestamp(3, new Timestamp(message.getCreationTime().getTime()));
				return pstmt;
			}
		}, keyHolder);
		Number idNum = keyHolder.getKey();
		return idNum.intValue();
	}
	
	
위 코드에서 JdbcTemplate.update() 메소드의 첫 번째 파라미터는 PreparedStatementCreator 객체를 사용한다.
이 객체의 createPreparedStatement() 메소드는 파라미터로 전달받은 Connection 객체의 preparedStatement() 메소드를 이용해서
PreparedStatement 객첼를 생성하는데, 이때 preparedStatement() 메소드의 두 번째 파라미터로 자동 생성되는 키 컬럼을 지정한다.

JdbcTemplate.update() 메소드의 두 번째 파라미터는 읽어온 키 값을 보관할 KeyHandler 객체를 전달한다.
생성된 키 값을 구할 때에는 o.s.jdbc.support.KeyHandler 인터페이스에 정의된 getKey() 메소드를 사용한다.
이 메소드는 java.lang.Number 타입을 리턴하므로 Number의 intValue()나 longValue() 메소드를 이용해서 생성된 키 값을 구할 수 있다.

PreparedStatementCreator 인터페이스는 한 개의 메소드만 갖고 있으므로, 자바 8의 람다식을 이용해서 표현할 수 있다.
다음은 임의의 객체인 PreparedStatementCreator 대신에 람다식을 사용한 코드의 예를 보여주고 있다.


	public int insert(Message message) {
		KeyHolder keyHolder = new GeneratedKeyHolder();
		jdbcTemplate.update((Connection conn) -> {
				PreparedStatement pstmt = conn.prepareStatement(
						"insert into guestmessage (name, message, creationTime) values (?,?,?)",
						new String[] { "id" });
				pstmt.setString(1, message.getName());
				pstmt.setString(2, message.getMessage());
				pstmt.setTimestamp(3, new Timestamp(message.getCreationTime().getTime()));
				return pstmt;
			}
		, keyHolder);
		Number idNum = keyHolder.getKey();
		return idNum.intValue();
	}
	
	
당연한 얘기지만 스프링이 제공하는 인터페이스 중에서 한 개 메소드만 정의하고 있는 모든 인터페이스는 자바 8에서 람다식을 표현할 수 있다.
이후 코드에서는 람다식을 이용한 코드를 별도로 넣지 않겠지만, 자바 8을 사용할 경우 바로 뒤에 설명할 ConnectionCallback 인터페이스를 비롯해
많은 인터페이스에 대한 임의 객체를 람다식으로 대신할 수 있다는 것을 알아두자.

	(6) ConnectionCallback을 이용한 Connection 사용
	
Connection 객체에 직접 접근해야 한다면, execute() 메소드를 사용하면 된다.
execute() 메소드는 파라미터로 전달받은 ConnectionCallback 인터페이스 구현 객체의 doInConnection() 메소드를 호출하는데,
이때 Connection을 doInConnection()에 인자로 전달한다. ConnectionCallback 인터페이스는 다음과 같이 정의되어 있다.


	package org.springframework.jdbc.core;
	
	import java.sql.Connection;
	import java.sql.SQLException;
	
	import org.springframework.doa.DataAccessException;
	
	public interface ConnectionCallback<T> {
		T doInConnection(Connection conn) throws SQLException, DataAccessException;
	}
	
	
ConnectionCallback을 파라미터로 갖는 JdbcTempldate의 execute() 메소드는 파리미터로 전달받은 ConnectionCallback 객체의 doInConnection() 메소드가 리턴한 객체를 리턴한다.

아래 코드는 ConnectionCallback 인터페이스의 사용 예를 보여주고 있다.


	public int count() {
		return jdbcTemplate.execute(new ConnectionCallback<Integer>() {
			@Override
			public Integer doInConnection(Connection con) throws SQLException,
					DateAccessException {
				Statement stmt = null;
				ResultSet rs = null;
				try {
					stmt = con.createStatement();
					rs = stmt.executeQuery("select count(*) from GUESTBOOK_MESSAGE");
					rs.next();
					return rs.getInt(1);
				} finally {
					JdbcUtils.cloneResultSet(rs);
					JdbcUtils.closeStatement(stmt);
				}
			}
		});
	}
	
	
ConnectionCallback 구현 객체의 doInConnection() 메소드는 파라미터로 전달받은 Connection을 이용해서 알맞은 작업을 수행하면 된다.
커넥션 생성과 종료는 JdbcTemplate이 처리하므로 doInConnection() 메소드에서는 Connection을 종료할 필요가 없다.


	3.2 NamedParameterJdbcTemplate 클래스를 이용한 JDBC 프로그래밍
	
o.s.jdbc.core.namedparam.NamedParameterJdbcTemplate 클래스는 JdbcTemplate 클래스와 동일한 기능을 제공하는데,
차이점이 있다면 인덱스 기반의 파라미터가 아니라 이름 기반의 파라미터를 설정할 수 있도록해준다는 점이다.
예를 들어, 인덱스 기반의 파라미터인 물음표를 사용하지 않고 다음과 같이 이름 기반의 파라미터를 쿼리에서 사용할 수 있도록 지원한다.


	select * from guestmessage order by id desc limit :start, :size
	
	
NamedParameterJdbcTemplate 클래스는 다음과 같이 생성자를 이용해서 DataSource를 전달받는다.


	public class NamedJdbcTemplateMessageDao implements MessageDao {
		
		private NamedParameterJdbcTemplate template;
		
		public NamedJdbcTemplateMessageDao(DataSource dataSource) {
			this.template = new NamedParameterJdbcTemplate(dataSource);
		}
	}
	
	
NamedParameterJdbcTemplate 클래스 JdbcTemplate 클래스와 동일한 이름의 메소드를 제공한다.
차이점이 있다면 인덱스 기반의 파라미터가 아니라 이름 기반의 파라미터 값을 설정하기 위해 Map이나 SqlParameterSource을 전달받는다는 것이다.
Map을 전달받는 메소드와 SqlParameterSource를 전달받는 메소드를 차례대로 살펴보도록 하자.

	(1) Map을 이용한 파라미터 값 설정 메소드
	
Map 기반의 메소드는 Object 배열이 아닌 Map을 이용해서 이름을 가진 파라미터 값을 설정한다.
아래 코드는 Map 기반 메소드와 이름 기반의 파라미터를 갖는 SQL 쿼리의 사용 예를 보여주고 있다.

	
	@Override
	public List<Message> select(int start, int size) {
		Map<String, Object> params = new HashMap<>();
		params.put("start", start);
		params.put("size", size);
		
		List<Message> message = template.query(
				"select * from guestmessage order by id desc limit :start, :size",
				params, new MessageRowMapper() );
		return message;
	}
	
	
위 코드에서 보듯이 SQL 쿼리는 인덱스 기반 파라미터 대신에 이름 기반의 파라미터를 사용하고 있으며, Map에서 동일한 이름을 갖는 키의 값이 파라미터의 값으로 설정된다.

NamedParameterJdbcTemplate 클래스가 제공하는 Map 기반 메소드는 다음과 같다.

	- List<T> query(String sql, Map<String, ?> paramMap, RowMapper<T> rowMapper)
	- List<T> queryForList(String sql, Map<String, ?> paramMap, Class<T> elementType)
	- T queryForObject(String sql, Map<String, ?> paramMap, RowMapper<T> rowMapper)
	- T queryForObject(String sql, Map<String, ?> paramMap, Class<T> elementType)
	- int update(String sql, Map<String, ?> paramMap)
	- int update(String sql, Map<String, ?> paramMap, KeyHandler keyHandler)
	
이름 기반의 파라미터를 갖지 않은 쿼리를 실행하는 경우에는 아무 값도 갖지 않는 Map 객체를 사용하면 된다.


	@Override
	public int counts() {
		return template.queryForObject(
			"select count(*) from guestmessage",
			Collection.<String, Object> emptyMap(),
			Integer.class
		);
	}
	
	
	(2) SqlParameterSource를 이용한 파라미터 값 설정 메소드
	
Map 대신에 o.s.jdbc.core.namedparam.SqlParameterSource 인터페이스를 이용해서 파라미터 값을 설정할 수도 있다.
다음 메소드는 SqlParameterSource를 인자로 전달받는 메소드의 목록이다.

	- List<T> query(String sql, SqlParameterSource paramSource, RowMapper<T> rowMapper)
	- List<T> queryForList(String sql, SqlParameterSource paramSource, Class<T> elementType)
	- T queryForObject(String sql, SqlParameterSource paramSource, RowMapper<T> rowMapper)
	- T queryForObject(String sql, SqlParameterSource paramSource, Class<T> elementType)
	- int update(String sql, SqlParameterSource paramSource)
	- int update(String sql, SqlParameterSource paramSource, KeyHandler keyHandler)
	
SqlParameterSource는 인터페이스이기 때문에 실제로 사용할 때에는 SqlParameterSource 인터페이스를 구현한 클래스를 사용해서 
파라미터 값을 전달해주어야 한다. 스프링은 다음과 같은 두 개의 SqlParameterSource 구현 클래스를 제공하고 있다.
	
	- o.s.jdbc.core.namedparam.BeanPropertySqlParameterSource
	- o.s.jdbc.core.namedparam.MapSqlParameterSource
	
BeanPropertySqlParameterSource 클래스는 동일한 이름을 갖는 자바 객체의 프로퍼티 값을 이용해서 파라미터 값을 설정한다.
아래 코드는 BeanPropertySqlParameterSource 클래스의 사용 예를 보여주고 있다.


	@Override
	public int insert(Message message) {
		SqlParameterSource paramSource = new BeanPropertySqlParameterSource(message);
		template.update(
				"insert into guestmessage(name, message, creationTime)" +
				"values (:name, :message, :creationTime)",
				paramSource, keyHolder);
		Number idNum = keyHolder.getKey();
		return idNum.intValue();
	}
	
	
위 코드에서 쿼리에 포함된 name, message, creationTime 파라미터는 각각 message 객체의 name 프로퍼티, message 프로퍼티, creationTime 프로퍼티 값을 이용해서 설정된다.

MapSqlParameterSource클래스는 Map과 비슷하게 <이름, 값> 쌍을 이용해서 파라미터의 값을 설정한다.
MapSqlParameterSource 객체를 생성한 뒤, addValue() 메소드를 이용해서 파라미터 이름과 값을 설정해주면 된다.
아래 코드는 MapSqlParameterSource 클래스를 사용해서 파라미터 값을 설정하는 예를 보여주고 있다.


	@Override
	public int delete(int id) {
		MapSqlParameterSource paramSource = new MapSqlParameterSource();
		paramSource.addValue("id", id);
		return template.update("delete from guestmessage where id = :id", paramSource);
	}
	
	
	(3) JdbcTemplate의 메소드 사용하기
	
NamedParameterJdbcTemplate은 내부적으로 JdbcTemplate을 사용하고 있고, getJdbcOperations() 메소드를 이용하면 사용중인 JdbcTemplate 객체를 구할 수 있다.
따라서, JdbcTemplate의 메소드를 사용하고 싶다면, JdbcTemplate 객체를 생성할 필요 없이 getJdbcOperations() 메소드가 리턴한 JdbcTemplate 객체를 사용하면 된다.


	public class NamedJdbcTemplateMessageDao implements MessageDao {
		
		private NamedParameterJdbcTemplate template;
		
		public NemedJdbcTemplateMessageDao(DataSource dataSource) {
			this.template = new NamedParameterJdbcTemplate(dataSource);
		}
		
		@Override
		public int counts() {
			return template.getJdbcOperations()
					.queryForObject("select count(*) from guestmessage", Integer.class);
		}
	

[NamedParameterJdbcTemplate의 getJdbcOperations() 메소드가 리턴하는 실제 타입은 o.s.jdbc.core.JdbcOperations 인터페이스다.
JdbcTemplate은 이 인터페이스를 구현하고 있으며, 앞서 JdbcTemplate클래스를 설명할 때 언급한 메소드들은 모두 JdbcOperations 인터페이스에 정의되어 있는 메소드들이다.]


	3.3	SimpleJdbcInsert 클래스를 이용한 데이터 삽입
	
SimpleJdbcInsert 클래스는 쿼리를 사용하지 않고 데이터를 삽입할 수 있도록 해주는 클래스이다. SimpleJdbcInsert 클래스를 이용하는 가장 간단한 방법은 다음과 같다.


	import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
	
	public class SimpleInsertMessageDao implements MessageDao {
		private SimpleJdbcInsert simpleInsert;
	
		public SimpleInsertMessageDao(DataSource dataSource) {
			...
			simpleInsert = new SimpleJdbcInsert(dataSource);
			simpleInsert.withTableName("guestmessage");
		}
	
		@Override
		public int insert(Message message) {
			Map<String, Object> values = new HashMap<>();
			values.put("NAME", message.getName());
			values.put("message", message.getMessage());
			values.put("creationTime", new Timestamp(message.getCreationTime().getTime()));
			int insertedCount = simpleInsert.execute(values);
			...
		}
		
		
위 코드에서 SimpleJdbcInsert 클래스의 withTableName() 메소드는 데이터를 삽입할 테이블의 이름을 지정한다.
execute(Map<String, Object>) 메소드는 Map의 키를 컬럼명으로 사용하고, 값을 컬럼에 삽입할 데이터로 사용하는 SQL 쿼리를 실행한다.
즉, 위 코드가 실행하는 SQL 쿼리는 다음과 같다.


	INSERT INTO guestmessage (id, name, message, creationTime) VALUES (?, ?, ?, ?)
	
	
위 쿼리를 생성할 때 사용할 컬럼 목록은 지정한 테이블의 메타 정보에서 읽어온다. 만약 DB가 제공하는 메타 정보가 아닌 직접 사용할 컬럼 이름을 지정하고 싶다면,
아래 코드처럼 usingColumns() 메소드를 사용하면 된다.


	public SimpleInsertMessageDao(DataSource dataSource) {
		...
		simpleInsert = new SimpleJdbcInsert(dataSource);
		simpleInsert.withTableName("guestmessage");
		simpleInsert.usingColumns("name", "message", "creationTime");
	}
	
	
usingColumns() 메소드를 사용하면, 지정한 컬럼에 대해서만 값을 삽입하기 때문에, usingColumns() 메소드에서 지정하지 않은 컬럼에 대해서는 값이 삽입되지 않는다.
예를 들어, 아래 코드의 경우 "name"과 "message" 컬럼만 사용한다고 지정했으므로 "creationTime" 컬럼에는 값이 삽입되지 않게 된다.


	public class SimpleInsertMessageDao implements MessageDao {
	
		private MessageDao delegate;
		private SimpleJdbcInsert simpleInsert;
		
		public SimpleInsertMessageDao(DataSource dataSource) {
			...
			simpleInsert = new SimpleJdbcInsert(dataSource);
			simpleInsert.withTableName("guestmessage");
			simpleInsert.usingColumns("name", "message", "creationTime");
		}
		
		@Override
		public int insert(Message message) {
			Map<String, Object> values = new HashMap<>();
			values.put("NAME", message.getName());
			values.put("message", message.getMessage());
			// creationTime 값을 설정되지 않는다.
			values.put("creationTime", new Timestamp(message.getCreationTime().getTime()));
			simpleInsert.execute(values);
			...
		}
		
		
SimpleJdbcInsert 클래스가 제공하는 설정 메소드는 메소드 체이닝(method chaining)을 지원하기 때문에,
다음과 같이 메소드 체이닝을 이용해서 설정 코드를 작성할 수도 있다.


	public SimpleInsertMessageDao(DataSource dataSource) {
		...
		simpleInsert = new SimpleJdbcInsert(dataSource);
		simpleInsert.withTableName("guestmessage")
				.usingColumns("name", "message");
					
	}
	
	
	(1) execute() 메소드를 이용한 데이터 삽입
	
SimpleJdbcInsert 클래스를 이용해서 데이터를 삽입할 때에는 execute() 메소드를 사용하면 된다.
SimpleJdbcInsert 클래스는 다음과 같은 execute() 메소드를 제공하고 있으므로, execute() 메소드의 리턴 값은 쿼리 실행 결과로 영향을 받은 행의 개수이다.

	- int execute(Map<String, Object> args)
	- int execute(SqlParameterSource parameterSource)
	
Map을 전달하는 경우 대소문자를 구분하지 않고 컬럼명과 Map의 키 값이 일치하는 지 여부를 검사한다.
예를 들어, 아래 코드와 같이 SimpleJdbcInsert.usingColumns() 메소드에서 지정한 컬럼명과 Map의 키는 소문자로 변환해서 일치할 경우 매칭된다.


public class SimpleInsertMessageDao implements MessageDao {

	private SimpleJdbcInsert simpleInsert;

	public SimpleInsertMessageDao(DataSource dataSource) {
		simpleInsert = new SimpleJdbcInsert(dataSource);
		simpleInsert.withTableName("guestmessage")
					.usingColumns("name", "message", "creationTime")
	}
	
	@Override
	public int insert(Message message) {
		Map<String, Object> values = new HashMap<>();
		values.put("NAME", message.getName());
		values.put("message", message.getMessage());
		values.put("creationTIME", new Timestamp(message.getCreationTime().getTime()));
		int insertedCount = simpleInsert.execute(values);
		...
	}
	
	
SqlParameterSource를 사용해서 execute() 메소드를 실행하는 경우, 다음 규칙에 따라서 컬럼명의 일치 여부를 검사한다.

	- 지정한 컬럼명과 동일한 이름을 갖는 파라미터 값이 설정되어 있는 지 검사한다.
	- '_' 이 포함된 경우 '_'를 제외한 나머지 문자열과 일치하는 파라미터 값이 설정되어 있는 지 검사한다.
	
다음 코드는 SqlParameterSource를 사용한 코드의 예이다.


	@Override
	public int insert(Message message) {
	    BeanPropertySqlParameterSource paramSource =
	            new BeanPropertySqlParameterSource(message);
	 	int insertCount = simpleInsert.execute(paramSource);
	 	...
	}
	
	
[실제로 Map, SqlParameterSource와 컬럼명 사이의 매핑 처리는 TableMetaDataContext를 통해서 처리된다.
매핑 처리가 정확하게 어떻게 이루어지는 지 궁금한 독자는 TableMetaDataContext 클래스의 API 문서 또는 소스 코드를 참고하자.]

	(2) executeAndReturnKey() 메소드를 이용한 데이터 삽입 및 자동 생성 키 조회
	
MySQL의 auto_increment 컬럼은 데이터가 삽입될 때마다 자동으로 증가된 값이 생성되는 컬럼이다.
이렇게 데이터 삽입시 자동으로 생성되는 키 컬럼을 구하고 싶을 때에는 executeAndReturnKey() 메소드를 사용하면 된다.
executeAndReturnKey() 메소드는 다음과 같이 네 개가 존재한다.
 
	- Number executeAndReturnKey(Map<String, Object> args)
	- Number executeAndReturnKey(SqlParameter paramSource)
	- KeyHolder executeAndReturnKey(Map<String, Object> args)
	- KeyHolder executeAndReturnKey(SqlParameter paramSource)
	
executeAndReturnKey() 메소드를 사용하려면 usingGeneratedKeyColumns() 메소드를 이용해서 자동 생성되는 키 컬럼을 지정해주어야 한다.


	insertMessage.withTableName("GUESTBOOK_MESSAGE")
			.usingGeneratedKeyColumns("MESSAGE_ID")
			.usingColumns("GUEST_NAME", "MESSAGE", "REGISTRY_DATE");
			
			
usingGeneratedKeyColumns() 메소드로 자동 생성 키 컬럼을 지정했다면, executeAndReturnKey() 메소드를 이용해서 생성되는 키 값을 구할 수 있다.


	public SimpleInsertMessageDao(DataSource dataSource) {
		simpleInsert = new SimpleJdbcInsert(dataSource);
		simpleInsert.withTableName("guestmessage")
					.usingColumns("name", "message", "creationTime")
					.setGeneratedKeyName("id");
	}
	
	@Override
	public int insert(Message message) {
		BeanPropertySqlParameterSource paramSource =
	            new BeanPropertySqlParameterSource(message);
	    Number genKey = simpleInsert.executeAndReturnKey(paramSource);
		return genKey.intValue();
	}