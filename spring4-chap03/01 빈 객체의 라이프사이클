스프링 컨테이너는 빈 객체를 생성하고, 프로퍼티를 할당하고, 초기화를 수행하고, 사용이 끝나면 소멸시키는 일련의 과정을 관리한다.
예를 들어, 데이터베이스에 대한 커넥션 풀을 제공하는 빈은 사용되기 전에 일정 개수의 커넥션을 연결해야 하고, 어플리케이션 종료 시점에는 열려 있는 커넥션을 모두 닫아야 하는데,
스프링 컨테이너는 이런 커넥션 생성과 종료 시점을 제어하게 된다.

스프링 컨테이너는 다음의 두 가지 방식을 이용해서 빈의 라이프사이클을 관리할 수 있다.

	- 스프링이 제공하는 특정 인터페이스를 상속받아 빈을 구현한다.
	- 스프링 설정에서 특정 메소드를 호출하라고 지정한다.
	
스프링은 라이프사이클에 특화된 인터페이스를 제공하고 있다.
예를 들어, 스프링은 InitializingBean 인터페이스를 제공하고 있으며, 빈 객체의 클래스가 InitializingBean 인터페이스를 구현하고 있으면
InitializingBean 인터페이스에 정의된 메소드를 호출해서 빈 객체가 초기화를 진행할 수 있도록 한다.
또한, 스프링 설정에서 초기화 메소드를 지정하면, 스프링은 그 메소드를 호출해서 빈이 초기화를 수행할 수 있게 한다.

빈 객체의 초기화뿐만 아니라 빈 객체의 소멸 과정 등 빈의 라이프사이클을 관리할 수 있도록 스프링은 인터페이스와 설정 방법을 제공하고 있는데,
이 절에서는 이들에 대해 살펴보자.

	
	1.1 빈 라이프사이클 개요
	
스프링 컨테이너는 빈 객체를 생성하고 초기화하고 소멸할 때 다음과 같은 순서대로 빈 객체의 메소드를 실행한다.


				●
				↓
			빈 객체 생성
				↓
			빈 프로퍼티 설정
				↓
		BeanNameAware.setBeanName()
				↓
	ApplicationContextAware.setApplicationContext()
				↓
		BeanPostProcessor의 초기화 처리						┌──────────>	빈 객체 사용
				↓										│					↓
	┌───────────────────────────────────────────┐		│	┌───────────────────────────────────┐
	│초기화	@PostConstruct 메소드					│		│	│		@PreDestroy 메소드			│
	│			↓								│		│	│				↓					│
	│	InitializingBean.afterPropertiesSet()	│		│	│		DisposableBean.destroy		│
	│			↓								│		│	│				↓					│
	│		커스텀 init 메소드						│		│	│		커스텀 destroy 메소드			│
	└───────────────────────────────────────────┘		│	└───────────────────────────────────┘
				↓										│					↓
		BeanPostProcessor의 초기화 후 처리		────────────────┘					◎
		
		
위 그림에서 화살표는 실행 순서를 의미한다. 예를 들어, 처음 두 개의 과정은 [빈 객체 생성]을 한 뒤에 [BeanNameAware.setBeanName() 메소드]를 호출함을 의미한다.
그리고, 배경이 흰색인 단곈는 빈 객체의 메소드를 호출한다.

[인터페이스이름.메소드이름()] 형식을 갖는 단계는 빈 객체가 해당 인터페이스를 구현했을 경우, 메소드가 호출됨을 의미한다.
예를 들어, [BeanNameAware.setBeanName()] 단계는 빈 객체가 BeanNameAware 인터페이스를 구현하고 있을 경우 setBeanName() 메소드를 호출한다는 것을 표현하고 있다.

위 그림을 보면 전체 흐름은 [객체 생성/프로퍼티 설정 -> 초기화 -> 사용 -> 소멸]의 네 단계를 거치는 것을 알 수 있다. 컨테이너는 빈 객체를 생성하고 프로퍼티를 설정한 뒤에 빈의 초기화를 진행하며,
컨테이너를 종료(close())하는 과정에서 생성한 빈 객체의 소멸 과정을 진행한다.

빈의 초기화와 소멸 방법은 각각 세 가지가 존재하며, 각 방식이 쌍을 이루어 함께 사용되곤 한다.
즉, @PostConstruct 어노테이션을 사용해서 초기화 메소드를 지정했다면 @PreDestroy 어노테이션을 사용해서 소멸 메소드를 지정하고,
커스텀 init 메소드를 사용했다면 커스텀 destroy 메소드를 사용하는 식이다. (물론, 초기화와 소멸 방식을 다르게 해도 무방하다.)

빈 라이프사이클의 각 단계에 대해 차례대로 살펴보자.


	1.2	InitializingBean 인터페이스와 DisposableBean 인터페이스
	
스프링은 객체의 초기화 및 소멸 과정을 위해 다음의 두 인터페이스를 제공하고 있다.

	- o.s.beans.factory.InitializingBean : 빈의 초기화 과정에서 실행될 메소드를 정의
	- o.s.beans.factory.DisposableBean : 빈의 소멸 과정에서 실행될 메소드를 정의
	
이 두 인터페이스는 각각 다음과 같이 정의되어 있다.


	public interface InitializingBean {
		void afterPropertiesSet() throws Exception;
	}
	
	public interface DisposableBean {
		void destroy() throws Exception;
	}
	
	
스프링 컨테이너는 생성한 빈 객체가 InitializingBean 인터페이스를 구현하고 있으면, InitializingBean 인터페이스로 정의되어 있는 afterPropertiesSet() 메소드를 호출한다.
따라서, 스프링 빈 객체가 정상적으로 동작하기 위해 객체 생성 이외의 추가적인 초기화 과정이 필요하다면 InitializingBean 인터페이스를 상속받고 afterPropertiesSet() 메소드에서
초기화 작업을 수행하면 된다. 비슷하게 스프링 컨테이너가 종료될 때, 빈 객체가 알맞은 처리가 필요하다면 DisposableBean 인터페이스를 상속받아 destroy() 메소드에서 소멸 작업을 수행하면 된다.

초기화/소멸 과정이 필요한 전형적인 예가 데이터베이스 커넥션 풀 기능이다. 커넥션 풀은 미리 머넥션을 생성해 두었다가 커넥션이 필요할 때 제공하는 기능이므로,
초기화 과정을 필요로 한다. 또한, 더 이상 커넥션이 필요 없으면 생성한 커넥션을 모두 닫기 위한 소멸 과정을 필요로 한다.
이런 커넥션 풀 기능을 스프링 빈으로 사용하고 싶은 경우, InitializingBean 인터페이스와 DisposableBean 인터페이스를 상속받아 초기화/소멸 과정을 처리할 수 있을 것이다.


	import org.springframework.beans.factory.DisposableBean;
	import org.springframework.beans.factory.InitializingBean;
	
	public class ConnPool implements InitializingBean, DisposableBean {
		...
		@Override
		public void afterPropertiesSet() throws Exception {
			// 커넥션 풀 초기화 실행 : DB 커넥션을 여는 코드
		}
	
		@Override
		public void destroy() throws Exception {
			// 커넥션 풀 종료 실행 : 연 DB 커넥션을 닫는 코드
		}
	}
		
		
위 클래스를 스프링 빈으로 등록하면, 스프링 컨테이너는 빈 생성 후 afterPropertiesSet() 메소드를 호출해서 초기화를 진행하고
destroy() 메소드를 호출해서 소멸을 진행한다.


	<!-- 스프링 컨테이너가 afterPropertiesSet() 메소드를 실행해서 초기화를 진행하고,
		컨테이너를 종료할 때 빈의 destroy() 메소드를 실행해서 소멸을 진행한다. -->
	<bean id="connPool" class="net.madvirus.spring4.chap03.ConnPool">
	</bean>
	
	
이 두 인터페이스를 모두 상속해야 하는 것은 아니며, 필요한 인터페이스만 상속받으면 된다.
예를 들어, 스프링 컨테이너가 빈 객체를 생성할 때 초기화만 필요하면 InitializingBean 인터페이스만 상속받아 구현하면 된다.


	1.3	@PostConstruct 어노테이션과 @PreDestroy 어노테이션
	
스프링 컨테이너가 빈 객체의 초기화/소멸 메소드를 실행할 수 있는 또 다른 방법은 @PostConstruct 어노테이션과 @PreDestroy 어노테이션을 사용하는 것이다.
각각 초기화를 실행하는 메소드와 소멸을 실행하는 메소드에 적용한다.


	import javax.annotation.PostConstruct;
	import javax.annotation.PreDestroy;
	
	public class ConnPool2 {
	
		@PostConstruct
		public void initPool() {
			// 커넥션 풀 초기화 실행 : DB 커넥션을 여는 코드
		}
	
		@PreDestroy
		public void destroyPool() {
			// 커넥션 풀 종료 실행 : 연 DB 커넥션을 닫는 코드
		}
	}
		
		
이 두 어노테이션은 @Resource 어노테이션과 함께 JSR 250에 정의되어 있다. 따라서, 이 두 어노테이션이 적용된 메소드를 초기화/소멸 과정에서 실행하려면 다음과 같이
CommonAnnotationBeanPostProcessor 전처리기를 스프링 빈으로 등록해주어야 한다.
(<context:annotation-config> 태그를 사용하려면 CommonAnnotationBeanPostProcessor가 빈으로 등록되는데, 이는 2장에서 설명한 바 있다.)


	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
	       http://www.springframework.org/schema/beans/spring-beans.xsd
	       http://www.springframework.org/schema/context
	       http://www.springframework.org/schema/context/spring-context.xsd">
	
		<context:annotation-config />
		
		...
		<!-- @PostConstruct와 @PreDestroy를 가진 빈 설정 -->
		
		
AnnotationConfigApplicationContext를 사용할 경우 어노테이션과 관련된 기능을 모두 활성 시키므로, 별도의 설정을 추가할 필요는 없다.

초기화와 소멸 과정에서 사용될 메소드는 파라미터를 가져서는 안된다.


	1.4 커스텀 init 메소드와 커스텀 destroy 메소드
	
외부에서 제공받은 라이브러리가 있는데, 이 라이브러리의 클래스는 스프링 빈으로 사용해야 할 수도 있다. 이 라이브러리의 클래스는 초기화를 위해 init() 메소드를 제공하고 있는데,
이 init() 메소드는 @PostConstruct 어노테이션을 갖고 있지 않다. 또한 스프링의 InitializingBean 인터페이스를 상속받지도 않았다고 하자.
스프링은 이런 경우에도 초기화 메소드를 실행할 수 있도록 커스텀 초기화 메소드를 지정하는 방법을 제공하고 있다.
또한, 커스텀 소멸 메소드를 지정하는 방법도 제공하고 있다.

XML 설정을 사용한다면 다음과 같이 init-method 속성과 destroy-method 속성을 사용해서 초기화 및 소멸 과정에서 사용할 메소드의 이름을 지정하면 된다.

	
	<bean id="pool3" class="net.madvirus.spring4.chap03.ConnPool3"
		init-method="init" destroy-method="destroy" />
		
		
자바 기반 설정을 사용한다면, @Bean 어노테이션의 initMethod 속성과 destroyMethod 속성을 사용하면 된다.


	@Bean(initMethod="init", destroyMethod="destroy")
	public ConnPool3 connPool3() {
		return new ConnPool3();
	}
	
	
초기화와 소멸 과정에서 사용될 메소드는 파라미터를 가져서는 안된다.


	1.5 ApplicationContextAware 인터페이스와 BeanNameAware 인터페이스
	
빈으로 사용될 객체에서 스프링 컨테이너에 접근해야 한다거나, 빈 객체에서 로그를 기록할 때 빈의 이름을 남기고 싶다면 어떻게 해야 할까?
이런 경우에 다음의 두 인터페이스를 사용하면 된다.

	- o.s.context.ApplicationContextAware
		: 이 인터페이스를 상속받은 빈 객체는 초기화 과정에서 컨테이너(ApplicationContext)를 전달받는다.
	
	- o.s.beans.factory.BeanNameAware
		: 이 인터페이스를 상속받은 빈 객체는 초기화 과정에서 빈 이름을 전달받는다.
		
먼저 ApplicationContextAware 인터페이스는 다음과 같이 정의되어 있다.


	public interface ApplicationContextAware extends Aware {
		void setApplicationContext(ApplicationContext applicationContext)
			throws BeansException;
	}
	
	
ApplicationContext 인터페이스를 상속받아 구현한 클래스는 setApplicationContext() 메소드를 통해서 컨테이너 객체(ApplicationContext)를 받는다.
따라서, 전달받은 컨테이너를 필드에 보관한 후, 이를 이용해서 다른 빈 객체를 구하거나 컨테이너가 제공하는 기능(이벤트 발생, 메시지 구하기)을 사용할 수 있다.
아래 코드는 ApplicationContextAware 인터페이스의 구현 예시이다.


	import org.springframework.beans.BeansException;
	import org.springframework.context.ApplicationContext;
	import org.springframework.context.ApplicationContextAware;
	
	public class WorkScheduler implements ApplicationContextAware {
	
		private WorkRunner workRunner;
		private ApplicationContext ctx;
	
		@Override
		public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
			this.ctx = applicationContext;
		}
	
		public void makeAndRunWork() {
			for (long order = 1; order <= 10; order++) {
				Work work = ctx.getBean("workProto", Work.class);
				work.setOrder(order);
				workRunner.execute(work);
			}
		}
		...
	
	
BeanNameAware 인터페이스는 다음과 같이 정의되어 있다.


	public interface BeanNameAware extends Aware {
		void setBeanName(String name);
	}
	
	
BeanNameAware 인터페이스를 상속받아 구현한 클래스는 setBeanName() 메소드를 이용해서 빈의 이름을 전달받는다.
따라서, 로그 메시지에 빈의 이름을 함께 기록해야 할 때처럼 빈의 이름을 필요한 경우에 BeanNameAware 인터페이스를 사용하면 된다.


	import org.springframework.beans.factory.BeanNameAware;
	
	public class WorkRunner implements BeanNameAware {
	
		private String beanId;
	
		@Override
		public void setBeanName(String name) {
			this.beanId = name;
		}
	
		public void execute(Work work) {
			System.out.printf("WorkRunner[%s] execute Work[%d]\n", beanId, work.getOrder());
			work.run();
		}
		...

	
주로 같은 타입을 가진 빈 객체들이 두 개 이상 존재하고, 각 빈을 이름으로 구분해야 할 때, BeanNameAware 인터페이스를 사용한다.
(로그에 빈 이름을 함께 남기는 것이 전형적인 예이다.)