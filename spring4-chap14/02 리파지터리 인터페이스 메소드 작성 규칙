스프링 데이터 JPA를 사용하는 기본 방법을 익혔다. 이제 남은 건 용도에 맞게 메소드를 작성하는 방법을 익히는 것 뿐이다.
조회 메소드, 저장 메소드, 쿼리 지정 방식 등 몇 가지 규칙만 익히면 스프링 데이터에 맞는 리파지터리 메소드를 작성할 수 있다.

	
	2.1 Repository 인터페이스
	
스프링 데이터 JPA 모듈이 리파지터리로 사용할 인터페이스는 o.s.data.repository.Repository 인터페이스를 상속받아야 한다.
이 인터페이스는 다음과 같이 정의되어 있다.


	public interface Repository<T, ID extends Serializable> {
	}
	
	
Repository 인터페이스의 타입 파라미터 T는 엔티티의 타입을 의미하며, 타입 파라미터 ID는 식별값 타입을 의미한다. 식별값으로 사용될 타입은 Serializable 인터페이스를 구현하고 있어야 한다.
앞서 작성해 본 EmployeeRepository 인터페이스의 경우 엔티티 타입으로 Employee를 사용하고 식별값 타입으로 Long을 사용했었다.


	import org.springframework.data.repository.Repository;
	
	public interface EmployeeRepository extends Repository<Employee, Long> {
		public Employee save(Employee emp);
		public Employee findOne(Long id);
	}
	

[	트랜잭션 범위

스프링 데이터 JPA가 생성하는 리파지터리 객체는 기본적으로 다음과 같이 @Transactional 어노테이션을 적용한다.

	- 조회 메소드 : @Transactional(readOnly = true)
	- 변경 메소드 : @Transactional
	
즉, 리파지터리의 각 메소드는 스프링의 트랜잭션 범위 내에서 실행되며, 조회 메소드만 실행할 경우 읽기 전용 트랜잭션으로 실행한다.]


	2.2 조회 메소드 규칙
	
스프링 데이터 JPA 모듈을 사용할 때 가장 많이 참조하게 될 규칙이 바로 조회 메소드 작성 규칙이다. 
먼저, 특정 식별값을 갖는 엔티티를 검색하는 메소드는 다음과 같이 findOne() 메소드를 사용한다.

	- T fineOne(ID primaryKey)
	
T는 엔티티 타입이고 ID는 식별값 타입이다. 식별값에 해당하는 엔티티가 존재하면 해당 엔티티 객체를 리턴하고, 존재하지 않으면 null을 리턴한다.

모든 엔티티 목록을 구하고 싶을 때에는 findAll() 메소드를 사용한다. 리턴 타입은 다음과 같이 List나 Iterable 중 하나를 사용하면 된다.
	
	- List<T> findAll()
	- Iterable<T> findAll()
	
특정 프로퍼티 값을 이용해서 검색하고 싶다면 findBy 프로퍼티이름() 형식의 메소드를 사용한다.
예를 들어, birthYear 프로퍼티 값을 사용해서 Employee 목록을 추출하고 싶다면 다음과 같이 find 메소드를 추가하면 된다.

	- List<Employee> findByYear(int value)
	
findBy로 시작하는 메소드의 경우에도 리턴 타입으로 List나 Iterable을 사용할 수 있다.

두 개 이상의 프로퍼티를 검색 조건으로 사용하고 싶다면 다음과 같이 And나 Or를 이용하면 된다.

	- List<Employee> findByNameAndBirthYear(String n, int year)
	
위 메소드는 name 프로퍼티의 값이 n 이고, birthYear 프로퍼티의 값이 year 인 Employee 목록을 구한다.

And나 Or 외에 크기 비교나 Null 여부, Like 쿼리를 위한 메소드 키워드를 제공하고 있다. 스프링 데이터 JPA 레퍼런스 문서에 따르면 다음과 같이 사용 가능한 키워드가 존재한다.
표에서 JPQL의 ?1 이나 ?2 는 메소드에 전달된 첫 번째 파라미터와 두 번째 파라미터 값을 의미한다.

	
	키워드				매소드 예시									JPQR 변환
	
	And					findByLastnameAndFirstname				where x.lastname = ?1 and x.firstname =?2
		
	Or					findByFirstNameOfLastName				where x.firstname =?1 and x.lastname = ?2
	
	Is, Equals			findByName
						findByNameIs							where x.name = ?1
						findByNameEquals
		
	Between				findByStartDateBetween					where x.startDate between ?1 and ?2
	
	LessThan			findByAgeLessThan						where x.age < ?1
	
	LessThanEqual		findByAgeLessThanEqual					where x.age <= ?1
	
	GreaterThan			findByAgeGreaterThan					where x.age > ?1
	
	GreaterThanEqual	findByAgeGreaterThanEqual				where x.age >= ?1
	
	After				findByStartDateAfter					where x.stratDate > ?1
	
	Before				findByStartDateBefore					where x.stratDate < ?1
	
	IsNull				findByAgeIsNull							where x.age is null
	
	IsNotNull			findByAgeIsNotNull						where x.age not null
	NotNull				findByAgeNotNull
													
	Like				findByNameLike							where x.name like ?1
	
	NotLike				findByNameNotLike						where x.name not like ?1
	
	StartingWith		findByNameStartingWith					where x.name like ?1 (파라미터 값 뒤에 %가 붙음)
	
	EndingWith			findByNameEndingWith					where x.name like ?1 (파라미터 값 앞에 %가 붙음)
	
	Containing			findByNameContaining					where x.name like ?1 (파라미터 값 양 쪽에 %가 붙음)
	
	Not					findByNameNot							where x.name <> ?1
	
	In					findByAgeIn(Collection<Age> ages)		where x.age in ?1
	
	NotIn				findByAgeNotIn(Collection<Age> ages)	where x.age not in ?1
	
	True				findByActiveTrue						where x.active = true
	
	False				findByActiveFalse						where x.active = false;
	
	IgnoreCase			findByNameIgnoreCase					where x.name like ?1 (파라미터 값 양 쪽에 %가 붙음)
	
	
Like 키워드의 경우 '%'가 붙지 않는다. 예를 들어, 다음의 메소드를 리파지터리 인터페이스에 정의했다고 하자.


	public interface EmployeeRepository extends Repository<Employee, Long> {
		public Iterable<Emplyee> findByNameLike(String name);
		...
	}
	
	
그리고, 다음과 같이 findByNameLike() 메소드를 실행했다고 하자.


	Iterable<Employee> emps = empRepository.findByNameLike("범");
	
	
이 경우 실행되는 JPQL은 다음과 같다.


	from Employee e where e.name like '범'
	
	
만약 Like를 사용하면서 전달한 파라미터 값을 포함한 경우를 찾고 싶다면, 다음과 같이 직접 '%'를 파라미터 값에 사용해야 한다.


	Iterable<Employee> emps = empRepository.findByNameLike('%범%');
	
	
StartingWith, EndingWith, Containing 키워는 각각 뒤, 앞, 앞뒤에 %를 붙여서 실행한다.
예를 들어, 다음 코드를 보자.


	Iterable<Employee> emps = empRepositry.findByNameStartingWith("최");
	
	
이 코드는 다음과 같은 JPQL을 실행하게 된다.


	from Employee e where e.name like '최%'
	

In과 NotIn 키워드를 사용할 때는 콜렉션이나 배열을 파라미터로 받는다. 예를 들어, birthYear 프로퍼티의 값이
1980, 1984, 1988 중의 하나인 Employee 목록을 구하는 메소드를 작성하고 싶다면 다음과 같이 In 키워드를 사용하면 된다.


	Iterable<Employee> findByBirthYearIn(Collector<Integer> years);
	
	
쿼리 결과로 조회되는 객체가 1개 또는 0개인 경우도 있다. 예를 들어, id 프로퍼티가 식별값이라면 findById(String id) 메소드로 검색되는 엔티티는 1개이거나 0개일 것이다.
또는 사번과 같이 고유값에 해당하는 프로퍼티를 이용해서 검색하는 쿼리 메소드의 조회 결과도 1개 내지 0개다. 이렇게 조회 결과가 1개나 0개인 쿼리 메소드는
리턴 타입으로 Iterable 대신 엔티티 타입을 사용해도 된다.


	Employee findById(Long id);
	Employee findByEmployeeNum(String num);
	

findByEmployeeNum 메소드는 employeeNum 프로퍼티 값이 지정한 값과 동일한 엔티티가 존재하면 해당 엔티티를 리턴하고, 그렇지 않을 경우 null을 리턴한다.
예를 들어, employeeNum 프로퍼티 값이 "12345678990"인 엔티티가 존재하지 않을 경우 다음 코드는 null을 리턴한다.


	Employee emp = employeeRepository.findByEmployeeNum("1234567890");
	// emp == null : true
	
	
쿼리 메소드의 birthYear 프로퍼티의 값이 year 파라미터보다 큰 엔티티를 검색한다. 여기서 문제는 year 파라미터 값 보다 큰 birthYear 프로퍼티 값을 갖는
엔티티가 두 개 이상 존재할 수 있다는 점이다. 실제로 두 개 이상 조회되도록 year 파라미터 값을 주면, 다음과 같은 익셉션이 발생하게 된다.


	Exception in thread "main" o...dao.IncorrectResultSizeDataAccessException;
		result returns more than one elements; nested exception is
		javax.persistence.NonUniqueResultException: result retuns more than one elements ...
		
		
	(1) 개수 조회 메소드
	
전체 개수를 구하는 메소드를 작성하고 싶다면 다음과 같이 메소드 이름을 count()로 지정하면 된다.


	public interface EmployeeRepository extends Repository<Employee, Long> {
		long count();
		...
	}
	
	
count() 메소드를 실행하면 전체 엔티티의 개수 -즉, 테이블의 전체 행 개수- 를 리턴한다.


	// 전체 개수 구함
	long totalCount = employeeRepository.count();
	
	
long 타입 대신에 int, Long, Integer, Number 타입을 사용할 수도 있다.

특정 조건을 충족하는 엔티티의 개수를 구하고 싶다면 다음과 같이 countBy로 시작하는 메소드를 추가하면 된다. 예를 들어, teamId 프로퍼티를 이용해서 개수를 구하고 싶다면
다음과 같은 count 메소드를 사용하면 된다.

	
	public long countByTeamId(Long teamId);
	
	
	(2) 쿼리 메소드의 중첩 프로퍼티 접근
	
Employee 클래스는 다음과 같이 레퍼런스 타입의 프로퍼티인 address와 team 프로퍼티를 갖고 있다.

	
	@Entity
	@Table(name = "EMPLOYEE")
	public class Employee {
	
		...
		@Embedded
		@AttributeOverrides({...})
		private Address address;
		
		@ManyToOne
		@JoinColumn(name = "TEAM_ID")
		private Team team;
		
		...
		
		
레퍼런스 타입 프로퍼티는 다시 중첩 프로퍼티를 갖고 있다. 예를 들어, address 프로퍼티는 다시 address1이나 zipcode 프로퍼티를 갖고 있고,
team 프로퍼티는 다시 name 프로퍼티를 갖고 있다. 이런 중첩 프로퍼티를 쿼리 메소드에서 사용하려면 단순히 중첩 프로퍼티 이름을 연속해서 붙여주면 된다.
예를 들어, team 프로퍼티의 name 프로퍼티의 값을 이용해서 Employee 객체를 구하고 싶다면 다음의 쿼리 메소드를 사용하면 된다.


	public Iterable<Employee> findByTeamName(String teamName);\
	

위 메소드를 실행하면 다음의 JPQL과 동일한 Employee 객체 목록을 얻게 된다.


	from Employee e where e.team.name = ?1
	
	
만약 다음과 같이 두 개의 프로퍼티가 존자한다면 어떻게 될까?


	@Entity @Table(name = "EMPLOYEE")
	public class Employee {
		@Column(name = "TEAMNAME") private String teamName;
		@ManyToOne private Team team;
		....
	}
	
	
이 경우 리파지터리 인터페이스의 findByTeamName(String name) 메소드는 teamName 프로퍼티 값을 비교하게 된다.
만약 teamName 프로퍼티가 아니라 team 프로퍼티의 중첩된 프로퍼티인 name 값을 이용해서 비교하고 싶다면, 다음과 같이 밑줄을 이용해서 중첩 프로퍼티임을 구체적으로 지정해주어야 한다.


	public List<Employee> findByTeam_Name(String teamName);
	
	
	2.3 정렬과 페이징 처리
	
정렬을 처리하는 방법은 크게 두 가지가 있다. 하나는 메소드 이름에 OrderBy를 이용해서 지정하는 것이다. 다음은 OrderBy 키워드의 몇 가지 사용 예를 보여주고 있다.


	public List<Employee> findByNameStartingWithOrderByNameAsc(String name);
	public List<Employee> findByTeamIdOrderByIdDesc(Long teamId);
	public List<Employee> findByBirthYearOrderByTeamNameAscNameAsc(int year);
	
	
[주의할 점은 OrderBy 키워드를 사용하려면 반드시 findBy와 함께 사용해야 한다는 점이다.
findAllOrderByNameDesc() 와 같은 메소드 이름을 사용할 경우 스프링 데이터 JPA 모듈이 리파지터리 인터페이스의 메소드 이름을 분석하는 과정에서 익셉션을 발생시킨다.
findAll() 메소드에 정렬을 적용하고 싶다면 뒤에서 설명할 Sort나 Pageable을 파라미터로 전달하는 방법을 사용해야 한다.]

정렬하는 두 번째 방법은 Sort나 Pageable을 사용하는 것이다. OrderBy 키워드는 정렬 기준이 고정된 반면에, Sort나 Pageable을 사용하면
런타임에 정렬 순서를 지정할 수 있다. 따라서, 런타임에 정렬 순서를 지정하려면 Sort나 Pageable 타입의 파라미터를 사용해야 한다.

o.s.data.domain.Sort 클래스는 쿼리 메소드에서 정렬 순서를 지정할 때 사용된다. 쿼리 메소드에서 정렬 순서를 지정하고 싶다면,
다음과 같이 쿼리 메소드의 마지막 파라미터로 Sort 타입 파라미터를 사용할 수 있다.


	import org.springframework.data.domain.Sort;
	
	public interface EmployeeRepository extends Repository<Employee, Long> {
		public List<Employee> findAll(Sort sort);
		public List<Employee> findByTeam(Team team, Sort sort);
		...
	}
	
	
Sort 객체를 생성할 때에는 다음과 같이 o.s.data.domain.Sort.Order 클래스를 이용할 수 있다.
아래 코드에서 Direction 열거 타입과 Order 클래스는 Sort 클래스에 중첩 정의된 클래스이다.


	import org.springframework.data.domain.Sort;
	import org.springframework.data.domain.Sort.Direction;
	import org.springframework.data.domain.Sort.Order;
	...
	// team.id 프로퍼티와 name 프로퍼티를 오름차순으로 정렬
	// 즉, from Employee e order by e.team asc, e.name asc JPQL과 동일한 결과
	Sort sort = new Sort(
		new Order(Direction.DESC, "team.id"),
		new Order(Direction.ASC, "name") );
		
	List<Employee> emps = employeeRepository.findAll(sort);
	
	
위 코드에서 Order 클래스 생성자는 Direction 열거 타입을 이용해서 정렬 방향을 지정하고, 정렬 대상이 되는 파라미터를 지정했다.
만약 모든 프로퍼티를 오름차순으로 정렬할 목적으로 Order 객체를 생성한다면, 다음과 같이 Direction을 생략하고 파라미터 이름만 이용해서 Order 객체를 생성할 수 있다.

	
	// team.id 프로퍼티와 name 프로퍼티를 오름차순으로 정렬
	Sort sort = new Sort(new Order("team.id"), new Order("name"));
	
	
지정한 프로퍼티를 모두 오름차순으로 정렬한다면 Order 객체를 생성하는 대신 다음과 같이 Sort 객체를 생성할 때 오름차순으로 정렬할 프로퍼티 목록을 전달해도 된다.


	Sort sort = new Sort("team.id", "name");
	
	
모든 프로퍼티의 정렬 방향이 동일하다면 다음과 같이 정렬 방향을 첫 번째 파라미터로 지정하고, 이후 가변 인자 값으로 프로퍼티 목록을 전달해도 된다.


	Sort sort = new Sort(Direction.DESC, "team.id", "birthYear");
	
	
Sort 대신에 o.s.data.domain.Pageable 인터페이스를 사용할 수도 있다. 쿼리 메소드의 마지막 파라미터로 Pageable 타입을 사용하면, 조회 범위와 정렬 순서를 함께 지정할 수 있다.
다음은 Pageable 타입의 파라미터를 마지막 인자로 갖는 메소드의 작성 예를 보여주고 있다.


	public interface EmployeeRepository extends Repository<Employee, Long> {
		...
		public List<Employee> findByBirthYearLessThen(int birthYear, Pageable pageable);
	}
	
	
Pageable 타입의 객체를 생성할 때에는 o.s.data.domain.PageRequest 클래스를 사용한다. (직접 Pageable 인터페이스를 구현한 클래스를 만들 수도 있지만,
PageRequest 클래스가 이미 필요한 내용을 구현하고 있다.) PageRequest 클래스의 생성자는 다음과 같다.

	- PageRequest(int page, int size)
	- PageRequest(int page, int size, Sort sort)
	- PageRequest(int page, int size, Direction direction, String ... properties)
	
page 파라미터와 size 파라미터는 페이징과 관련된 값이다. page 파라미터는 0 기반의 페이지 번호를 지정하며, size는 한 페이지에 읽어올 개수를 지정한다.
예를 들어, 한 페이지에 5개의 데이터를 보여주고 세 번째 페이지에 해당하는 데이터를 읽어오도록 하고싶다면 다음과 같이 PageRequest 객체를 생성하면 된다.


	// 2: 세 번째 페이지 번호, 5: 페이지 크기
	Pageable pageable = new Pageable(2, 5);
	List<Employee> emps = employeeRepository.findByBirthYearLessThen(2000, pageable);
	
	
정렬을 지정하고 싶다면 Sort 파라미터를 전달받는 생성자를 사용하고, 정렬에 사용할 프로퍼티가 모두 동일한 정렬 방향을 갖는다면
Direction과 프로퍼티 목록을 전달받는 생성자를 사용한다.


	Pageable pageable = new PageRequest(3, 10, new Sort("birthYear"));
	List<Employee> emps = empRepo.findByBirthYearLessThen(2000, pageable);
	
	
Pageable 타입 파라미터를 갖는 쿼리 메소드는 리턴 타입으로 o.s.data.domain.Page<T> 타입을 사용할 수 있다.
앞서 살펴본 쿼리 메소드가 리턴 타입으로 엔티티 타입이나 Iterable 타입(또는 그 하위 타입인 List 등의 타입)을 사용했는데,
이들 타입은 값 목록만을 표현한다는 특징이 있다. 반면에 Page 타입은 값 목록뿐만 아니라 전체 페이지 개수, 전체 데이터 개수, 이전/다음 페이지를 가졌는지 여부 등의 정보도 함께 제공한다.

다음 코드는 리턴 타입으로 Page를 사용하는 쿼리 메소드의 작성 예를 보여주고 있다.

	
	public Page<Employee> findByTeam(Team team, Pageable pageable)
	
	
Page 인터페이스는 다음과 같은 메소드를 제공하고 있으며, 이들 메소드를 이용해서 페이징 처리 및 조회된 결과 데이터를 사용할 수 있다.


	메소드						설명
	
	int getTotalPages()			전체 페이지 개수를 구한다.
	
	long getTotalElements()		전체 엘리먼트(엔티티) 개수를 구한다.
	
	int getNumber()				현재 페이지 번호를 구한다.
	
	int getNumberOfElements()	리턴된 엘리먼트의 개수를 구한다.
	
	int getSize()				페이지의 기준 크기를 구한다.
	
	boolean hasContent()		조회 결과가 존재하는지 여부를 구한다.
	
	List<T> getContent()		조회된 엘리먼트 목록을 구한다.
	
	boolean isFirst()			첫 번째 페이지인지 여부를 구한다.
	
	boolean isLast()			마지막 페이지인지 여부를 구한다.
	
	boolean hasNext()			다음 페이지가 존재하는지 여부를 구한다.
	
	boolean hasPrevious()		이전 페이지가 존재하는지 여부를 구한다.
	
	
[	Pageable과 SQL 쿼리

Pageable을 쿼리 메소드의 파라미터로 사용할 때 리턴 타입이 Iterable이나 List와 같은 단순 목록이냐 아니면 Page이냐에 따라 실행되는 쿼리가 달라진다.
먼저 두 가지 경우에 모두 지정한 범위의 데이터를 읽어오기 위한 쿼리를 실행한다. 예를 들어, 다음과 같은 코드를 실행했다고 하자.


	Pageable pageable = new PageRequest(1, 4, new Sort("birthYear"));
	Team team = ...;	// id가 1L인 Team 객체
	List<Employee> emps = employeeRepository.findByTeamId(1L, pageable);
	Page<Employee> pageEmp = employeeRepository.findByTeam(team, pageable);
	
	
이때, 리턴 타입이 List인 findByTeamId() 메소드와 리턴 타입이 Page인 findByTeam() 메소드는 둘 다 아래의 쿼리를 실행한다.
참고로, MySQL에서 실행했기 때문에 쿼리를 보면 페이징 처리를 위해 limit 키워드가 사용된 것을 알 수 있다.


	select
		E.EMPLOYEE_ID, E.HOME_ADDR1, E.HOME_ADDR2, E.HOME_ZIPCODE,
		E.BIRTH_YEAR, E.EMPLOYEE_NUM, E.JOINED_DATE, E.NAME, E.TEAM_ID
	from EMPLOYEE E left outer join TEAM T on E.TEAM_ID = T.TEAM_ID
	where T.TEAM_ID = ?
	order by E.BIRTH_YEAR asc limit ?, ?
	
	
그리고, 리턴 타입이 Page인 경우는 페이징과 관련된 정보를 생성하기 위해 다음의 쿼리를 먼저 실행한다.


	select count(E.EMPLOYEE_ID)
	from EMPLOYEE E left outer join TEAM T on E.TEAM_ID = T.TEAM_ID
	where T.TEAM_ID = ?
	
	
따라서, 전체 개수나 전체 페이지 개수 등의 정보가 필요 없다면 리턴 타입으로 Page를 사용하지 않아야 불필요하게 count 쿼리를 실행하지 않는다.]

만약 쿼리 메소드 이름에 OrderBy를 사용하고 파라미터 타입으로 Sort나 Pageable을 사용하면 어떻게 될까?
예를 들어, 다음의 쿼리 메소드를 생각해보자.


	public Iterable<Employee> findByTeamIdOrderByNameDesc(Long teamId, Sort sort);
	
	
이 쿼리 메소드는 OrderBy를 이용해서 name 역순으로 정렬이 되도록 했고, 메소드의 마지막 파라미터로 Sort를 전달받고 있다.
이 메소드를 이용해서 다음과 같은 조회 코드를 실행할 수 있을 것이다.


	Sort sort = new Sort("birthYear");
	Iterable<Employee> emps = empRepository.findByTeamIdOrderByNameDesc(1L, sort);
	
	
위 코드를 실행하면 실제로 다음과 같은 order by 절을 이용해서 정렬 순서를 정하게 된다.


	from Employee e where e.team_id = 1L order by name desc, birthYear asc
	
	
위 쿼리를 보면 OrderBy 키워드로 지정한 정렬 순서가 먼저 적용되고  그 다음에 Sort나 Pageable 파라미터로 전달받은 정렬 순서가 적용된 것을 알 수 있다.


	2.4 저장 메소드 규칙
	
엔티티를 DB에 저장하려면 다음과 같은 save() 메소드를 사용하면 된다.


	public interface EmployeeRepository extends Repository<Employee, Long> {
		Employee save(Employee entity);
		...
	}
	
	
save() 메소드는 저장하거나 또는 수정한다. 다음의 경우 save() 메소드는 EntityManager.persist() 메소드를 이용해서 엔티티를 DB에 저장하고, 파라미터로 전달받은 entity 객체를 리턴한다.

	- 버전 프로퍼티가 없는 경우 : 파라미터로 전달한 엔티티 객체의 ID에 해당하는 프로퍼티 값이 null임
	- 버전 프로퍼티가 있는 경우 : 버전 프로퍼티의 값이 null 임
	
다음의 경우에는 EntityManager.merge() 메소드를 이용해서 기존 데이터를 변경하고, merge() 메소드의 결과를 리턴한다.

	- 버전 프로퍼티가 없는 경우 : 파라미터로 전달한 엔티티 객체의 ID에 해당하는 프로퍼티 값이 null이 아님
	- 버전 프로퍼티가 있는 경우 : 버전 프로퍼티의 값이 null 이 아님
	
즉, 리파지터리 인터페이스의 save() 메소드는 실제로는 saveOrUpdate()와 같은 기능을 제공한다.

만약 엔티티 클래스가 o.s.data.domain.Persistable 인터페이스를 구현하고 있다면, 이 인터페이스에 정의된 isNew() 메소드를 이용해서 새로운 객체인지 여부를 판단한다.


	2.5 삭제 메소드 규칙
	
특정 엔티티를 DB에서 삭제하려면 다음의 delete() 메소드를 사용한다.


	public interface EmployeeRepository extends Repository<Employee, Long> {
		void delete(Long id);
		void delete(Employee entity);
		void delete(Iterable<Employee> entities);
		void deleteAll();
	}
	
	
식별값을 파라미터로 전달받은 delete() 메소드는 식별값에 해당하는 데이터를 DB에서 삭제한다.
만약 id에 해당하는 데이터가 존재하지 않으면 EmptyResultDataAccessException을 발생시킨다.

한 개 엔티티를 전달받은 delete() 메소드와 Iterable로 목록을 전달받은 delete() 메소드는 파라미터로 전달받은 엔티티를 DB에서 삭제한다.

deleteAll() 메소드는 모든 데이터를 삭제한다. deleteAll() 메소드를 사용하면 내부적으로 delete(findAll())을 실행한다.
즉, "delete from EMPLOYEE"가 아닌 "delete from EMPLOYEE where EMPLOYEE_ID = ?" 쿼리를 엔티티 개수만큼 실행하므로,
조금이라도 빠른 실행 속도를 원한다면 deleteAll() 메소드를 사용하는 대신 쿼리를 직접 실행하는 방법을 사용해야 한다.