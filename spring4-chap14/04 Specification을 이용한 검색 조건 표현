상황에 따라 다양한 조건을 조합해서 검색 조건을 생성해야 할 때가 있다. 예를 들어, 다음과 같이 조건 조합에 따라 검색한다고 해보자.

	- 검색어가 있다면 : 검색어와 같은 name을 갖거나 같은 employeeNumber를 갖는 Employee를 검색한다.
	- 검색 조건에 팀ID가 있다면 : 해당 팀에 속하는 Employee를 검색한다.
	- 검색어와 팀ID가 없다면 : 최근 한 달 내에 입사한 Employee를 검색한다.
	
위 조건의 경우 검색어와 팀ID의 존재 여부에 따라 다음과 같은 쿼리를 실행하게 된다.

	- from Employee e where (e.name = 검색어 or e.employeeNumber = 검색어)
	- from Employee e where e.team.id = 팀ID
	- from Employee e where (e.name = 검색어 or e.employeeNumber = 검색어) and e.team.id = 팀ID
	- from Employee e where e.joinedDate > '한 달 전 날짜 값'
	
검색 조건이 더 다양하다면 사용해야 할 쿼리도 더 많아지게 되고, 이는 결과적으로 리파지터리의 쿼리 메소드를 증가시키는 상황을 만들게 된다.
이런 문제를 해소하기 위해 다음 코드처럼 JPA의 Criteria API를 사용할 수 있다.


	public class JpaEmployeeListService implements EmployeeListService {
	
		@PersistenceUnit
		private EntityManagerFactory entityManagerFactory;
		private EmployeeRepository employeeRepository;
	
		@Transactional
		@Override
		public List<Employee> getEmployee(String keyword, Long teamId) {
			CriteriaBuilder cb = entityManagerFactory.getCriteriaBuilder();
	
			CriteriaQuery<Employee> query = cb.createQuery(Employee.class);
			Root<Employee> employee = query.from(Employee.class);
			query.select(employee);
	
			if (hasValue(keyword) || hasValue(teamId)) {
				if (hasValue(keyword) && !hasValue(teamId)) {
					query.where(cb.or(
							cb.equal(employee.get("name"), keyword),
							cb.equal(employee.get("employeeNumber"), keyword)));
				} else if (!hasValue(keyword) && hasValue(teamId)) {
					query.where(cb.equal(employee.get("team").get("id"), teamId));
				} else {
					query.where(cb.and(
							cb.or(
									cb.equal(employee.get("name"), keyword),
									cb.equal(employee.get("employeeNumber"), keyword)),
							cb.equal(employee.get("team").get("id"), teamId)
							));
				}
			} else {
				Calendar cal = Calendar.getInstance();
				cal.add(Calendar.DATE, -30);
				query.where(cb.greaterThan(employee.<Date> get("joinedDate"), cal.getTime()));
			}
			// 실제로 스프링 데이터 JPA는 CriteriaQuery 타입 파라미터를 지원하지 않음
			return employeeRepository.findAll(query);
		}
		...
	}

	
위 코드처럼 CriteriaBuilder를 이용해서 조건에 맞는 검색 조건을 생성하는 CriteriaQuery 객체를 생성할 수 있지만, 위 코드는 다음과 같은 단점을 갖고 있다.

	- EmployeeListService는 DB에 대한 직접 접근이 필요 없음에도 불구하고 Criteria API를 사용하기 위해 DB와 관련된 EntityManagerFactory를 필드로 참조해야 한다.
	- 스프링 데이터 JPA는 리파지터리 메소드의 파라미터로 CriteriaQuery 타입을 지원하지 않는다.
	
스프링 데이터 JPA는 조회 메소드에서 CriteriaQuery를 직접 지원하지 않는 대신, 좀 더 표현력이 좋은 Specification 타입을 도입했다.
Specification 타입을 사용하면, Criteria API와 같은 검색 조건 조합을 만들 수 있으면서도 검색 조건을 생성하는 코드에서 
EntityManagerFactory, CriteriaBuilder 등 JPA 관련 코드를 직접 사용하지 않아도되는 장점이 있다.

Specification을 이용해서 검색 조건을 지정하려면 다음과 같은 작업을 하면 된다.

	- Specification을 입력 받도록 Repository 인터페이스를 정의하기
	- 검색 조건을 모아 놓은 클래스 만들기
	- 검색 조건을 조합한 Specification 인스턴스를 이용해서 검색하기
	
	
	4.1 리파지터리 인터페이스에 Specification 타입 파라미터 추가하기
	
리파지터리 인터페이스에 Specification 타입의 파라미터를 추가하는 것은 어렵지 않다.
다음과 같이 o.s.data.jpa.domain.Specification <엔티티타입> 타입의 파라미터를 추가해주기만 하면 된다.


	import org.springframework.data.jpa.domain.Specification;
	import org.springframework.data.repository.Repository;
	
	public interface EmployeeRepository extends Repository<Employee, Long> {
			
		public List<Employee> findAll(Specification<Employee> spec);
		
		...


다른 조회 메소드와 마찬가지로 Specification 타입 뒤에 정렬이나 페이징 처리를 위한 Sort나 Pageable 파라미터를 추가할 수 있으며,
Pageable 파라미터를 가질 경우 리턴 타입으로 Page를 사용할 수 있다.


	public List<Employee> findAll(Specification<Employee> spec, Sort sort);
	public Page<Employee> findAll(Specification<Employee> sepc, Pageable pageable);
	
	
	4.2 Specification을 생성해주는 클래스 만들기
	
앞서 추가한 메소드를 사용하려면, 알맞은 Specification 객체를 생성해주면 된다.
Specification은 검색 조건을 표현하는 인터페이스로서 다음과 같이 정의되어 있다.


	package org.springframework.data.jpa.domain;
	
	import javax.persistence.criteria.CriteriaBuilder;
	import javax.persistence.criteria.CriteriaQuery;
	import javax.persistence.criteria.Predicate;
	import javax.persistence.criteria.Root;
	
	public interface Specification<T> {
		Predicate toPredicate(Root<T> root, CriteriaQuery<?> query, CriteriaBuilder cb);
	}
	
	
Specification 구현 클래스는 toPredicate() 메소드에서 검색 조건에 해당하는 Predicate 객체를 생성해주어야 한다.
예를 들어, Employee 엔티티의 name이 특정 값과 같은지 확인하는 조건을 나타내는 Specification 객체는 다음과 같이 생성할 수 있다.


	final String name = ...;
	Specification<Employee> spec = new Specification<Employee>() {
		@Override
		public Predicate toPredicate(
				Root<Employee> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
			return cb.equal(root.get("name"), name);
		}
	}
	
	
모든 Specification 객체를 위 코드처럼 임의 객체를 이용해서 생성할 수 있지만, 그것보다는 엔티티별로 알맞은 Specification 객체를 생성해주는 클래스를 만들어서
사용하는 것이 코드 가독성 관리면에서 좋다. 예를 들어, 다음과 같이 Employee 엔티티 타입을 위한 검색 조건을 생성해주는 클래스를 만들 수 있을 것이다.


	public class EmployeeSpec {
	
		public static Specification<Employee> nameEq(final String name) {
			return new Specification<Employee>() {
				@Override
				public Predicate toPredicate(Root<Employee> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
					return cb.equal(root.get("name"), name);
				}
			};
		}
	
		public static Specification<Employee> employeeNumberEq(final String num) {
			return new Specification<Employee>() {
				@Override
				public Predicate toPredicate(Root<Employee> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
					return cb.equal(root.get("employeeNumber"), num);
				}
			};
		}

		
[	JPA 메타 모델 클래스

앞서 코드를 보면, 조건을 생성할 때 다음과 같이 엔티티의 프로퍼티 이름을 문자열로 지정하고 있다.


	public static Specification<Employee> nameEq(final String name) {
		return new Specification<Employee>() {
			@Override
			public Predicate toPredicate(
					Root<Employee> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				return cb.equal(root.get("name"), name);
			}
		};
	}
	
	
그런데 프로퍼티 이름을 문자열로 입력하면 오타와 같은 실수를 하기 쉽다. 이런 단순 실수를 줄이기 위한 방법이 있는데, 그럿은 바로 JPA의 메타 모델 클래스를 사용하는 것이다.
메타 모델 클래스는 다음과 같이 생겼다.


	import java.util.Date;
	
	import javax.persistence.metamodel.SingularAttribute;
	import javax.persistence.metamodel.StaticMetamodel;
	
	@StaticMetamodel(Employee.class)
	public class Employee_ {
		public static volatile SingularAttribute<Employee, Long> id;
		public static volatile SingularAttribute<Employee, String> employeeNumber;
		public static volatile SingularAttribute<Employee, String> name;
		public static volatile SingularAttribute<Employee, Address> address;
		public static volatile SingularAttribute<Employee, Integer> birthYear;
		public static volatile SingularAttribute<Employee, Team> team;
		public static volatile SingularAttribute<Employee, Date> joinedDate;
	}
	
	
메타 모델 클래스의 이름은 모델 클래스 이름 뒤에 밑줄('_')을 붙인 것을 사용한다. 위 코드는 Employee 클래스에 대한 메타 모델 클래스가 된다.
메타 모델 클래스는 정적 필드를 이용해서 실제 모델 클래스에 대한 프로퍼티 정보를 기술한다.
예를 들어, 위 코드에서 id 정적 필드는 같은 이름을 갖는 Employee의 id 프로퍼티에 대한 정보를 기술한다.


	public static Specification<Employee> nameEq(final String name) {
		return new Specification<Employee>() {
			@Override
			public Predicate toPredicate(Root<Employee> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				return cb.equal(root.get(Employee_.name), name);
			}
		};
	}
	
	
위 코드처럼 메타 모델 클래스를 사용하면, 오타를 사전에 알 수 있고(컴파일 에러) 이클립스와 같은 개발 환경에서는 코드 자동 완성 기능을 이용해서 빠르게 코드를 완성할 수 있게 된다.

메타 모델 클래스의 코드를 직접 작성할 수 있지만, 모델 코드로부터 자동 생성하는 기능이 있기 때문에 그 기능을 사용하면 된다.
하이버네이트의 경우 	http://goo.gl/EJDso1	문서에 나와있는 방법을 이용해서 메이븐 플러그인이나 이클립스를 사용해서 메타 모델 클래스의 소스 코드를 생성할 수 있다.]


	4.3 검색 조건 조합해서 리파지터리 사용하기
	
주요 검색 조건별로 Specification 객체를 생성해주는 클래스를 만들면, 다음과 같이 간결한 코드를 이용해서 EmployeeRepository에 전달할
Specification 객체를 생성할 수 있다.


	List<Employee> empLiey = employeeRepository.findAll(EmployeeSpec.nameEq(name));
	
	
복합적인 검색 조건을 사용해야 한다면, o.s.data.jpa.domain.Specification 클래스를 이용해서 각 Specification을 ANd와 OR로 조합할 수 있다.
다음은 Specification을 이용해서 두 Specification을 AND로 조합하는 코드의 예를 보여주고 있다.


	// spec1과 spec2가 있다고 가정
	Specifications<Employee> specs = Specifications.where(spec1);
	Specifications<Employee> andSpecs = specs.and(spec2);	// (sepc1 and spec2) 조건 생성
	List<Employee> empLisy = employeeRepository.findAll(andSpecs);
	

Specifications.where() 메소드는 Specification을 파라미터로 전달받고 검색 조건을 조합할 수 있는 Specification 객체를 리턴한다.
Specifications 클래스의 and() 메소드는 검색 조건을 AND로 조합한 새로운 Specifications 객체를 리턴한다. 예를 들어, 위 코드의 경우 specs.and(spec2) 코드는
spec1과 spec2를 AND 조합한 Specification를 생성한다. Specifications 클래스는 Specification 인터페이스를 상속받고 있기 때문에,
위 코드처럼 Specifications를 검색 조건으로 전달할 수 있다. OR 조합을 하고 싶다면 and() 메소드 대신에 or() 메소드를 사용하면 된다.

and() 메소드와 or() 메소드의 파라미터는 가변인자이므로 다음과 같이 2개 이상의 조건을 조합할 수 있다.

	
	Specifications<Employee> specs = Specifications.where(spec1);
	Specifications<Employee> andSpecs = specs.and(spec2, spec3);
	
	
정적 메소드인 where() 메소드와 조합을 위해 and()/or() 메소드는 모두 Specifications 객체를 리턴하므로, 다음과 같이 메소드를 연결하면
좀 더 간결하게 조건을 표현할 수 있다.


	Specifications<Employee> specs = Specifications.where(spec1).or(spec2, spec3);
	
	
앞서 언급했던 검색 조건을 다시 살펴보자.

	- 검색어가 있다면 : 검색어와 같은 name을 갖거나 같은 employeeNumber를 갖는 Employee를 검색한다.
	- 검색 조건에 팀ID가 있다면 : 해당 팀에 속하는 Employee를 검색한다.
	- 검색어와 팀ID가 없다면 : 최근 한 달 내에 입사한 Employee를 검색한다.
	
검색 조건을 모아 놓은 EmployeeSpec 클래스와 Specifications의 조합 기능을 이용하면 다음과 같이 위 검색 조건을 조회 기능을 구현할 수 있을 것이다.


	package net.madvirus.spring4.chap14.application;
	
	import static net.madvirus.spring4.chap14.domain.EmployeeSpec.*;
	import static org.springframework.data.jpa.domain.Specifications.where;
	...
	import org.springframework.data.jpa.domain.Specifications;
	
	public class SpecEmployeeListService implements EmployeeListService {
	
		private EmployeeRepository employeeRepository;
	
		@Transactional
		@Override
		public List<Employee> getEmployee(String keyword, Long teamId) {
			if (hasValue(keyword) || hasValue(teamId)) {
				if (hasValue(keyword) && !hasValue(teamId)) {
					return employeeRepository.findAll(
							where(nameEq(keyword)).or(employeeNumberEq(keyword))
					);
				} else if (!hasValue(keyword) && hasValue(teamId)) {
					return employeeRepository.findAll(teamIdEq(teamId));
				} else {
					Specifications<Employee> spec1 = where(nameEq(keyword)).or(employeeNumberEq(keyword));
					return employeeRepository.findAll(spec1.and(teamIdEq(teamId)));
				}
			} else {
				Calendar cal = Calendar.getInstance();
				cal.add(Calendar.DATE, -30);
				return employeeRepository.findAll(joinedDateGt(cal.getTime()));
			}
		}
	
		private boolean hasValue(Object value) {
			return value != null;
		}
		...
		
		
위 코드를 보면 EmployeeSpec의 정적 멤버와 Specifications.where 메소드를 정적 임포트했다. 이렇게 하면 EmployeeSpec.nameEq() 대신에 empEq() 메소드를
그리고 Specifications.where() 대신에 where() 메소드를 바로 사용할 수 있으므로, 검색 조건 생성 코드의 가독성이 향상된다.
또한, 위 코드를 보면 joinedDateGt()나 nameEq() 처럼 Criteria API를 직접 사용하는 경우와 비교해서 검색 조건의 의미를 더 잘 드러내는 것을 알 수 있다.