다음과 같은 Option 클래스가 있다고 해보자.


	public class Option<T> {
	
		private T value;
	
		public Option(T value) {
			this.value = value;
		}
	
		public boolean hasValue() {
			return value != null;
		}
	
		public T get() {
			if (value == null)
				throw new IllegalStateException("no value");
			return value;
		}
	}
	
	
Option 타입을 리턴 값으로 사용하면 다음과 같이 null 체크 대신에 hasValue() 메소드를 이용해서 값이 존재하는지 여부를 확인하도록 바꿀 수 있다.


	Option<Employee> empOp = employeeRepo.getOptionEmployee(someId);
	if(empOp.hasValue()) {
		Employee emp = empOp.getValue();
		...
	}
	
	
null을 리턴하는 대신 Option을 리턴하면 값이 존재하지 않을 수도 있다는 것을 명시적으로 표현할 수 있기 때문에, null 검사를 안 해서 NullPointerException이 발생하는 실수를 줄일 수 있다.

그런데, 스프링 데이터 JPA는 리턴 타입으로 Option 타입을 지원하지 않기 때문에, 다음과 같은 메소드를 추가할 수 있다.


	public interface EmployeeRepository extends Repository<Employee, Long> {
		// 리파지터리 인터페이스를 분석하는 과정에서 익셉션 발생!
		public Option<Employee> getOptionEmployee(Long id);
	}
	
	
이렇게 스프링이 지원하는 규칙에서 벗어난 메소드를 추가하고 싶다면, 직접 커스텀 구현을 만들어야 한다. 커스텀 구현을 추가하는 방법은 두 가지가 있다.
첫 번째는 단일 리파지터리를 위한 커스텀 구현 추가 방법이고 다른 하나는 모든 리파지터리를 위한 커스텀 구현 추가 방법이다. 이 두 구현 방법을 차례대로 살펴보자.


	6.1 단일 리파지터리를 위한 구현 클래스 등록
	
단일 리파지터리를 위한 커스텀 메소드 구현을 등록하려면 다음과 같이 하면 된다.

	- 1. 커스텀 메소드를 정의한 인터페이스를 정의한다.
	- 2. 리파지터리로 사용할 인터페이스가 1에서 만든 커스텀 인터페이스를 상속받도록 한다.
	- 3. 1에서 정의한 커스텀 인터페이스를 구현한 커스텀 구현 클래스를 작성한다.
	- 4. (선택) 3에서 구현한 커스텀 클래스를 스프링 빈으로 등록한다.
		A. 리파지터리 인터페이스 이름 뒤에 지정한 접미사(Impl)을 붙인 이름을 커스텀 클래스의 이름으로 사용했다면 스프링 빈으로 등록하지 않아도 된다.
		
만일 할 일은 커스텀 메소드를 정의한 인터페이스를 작성하는 것이다. 다음은 커스텀 인터페이스 작성 예이다.

	
	public interface EmployeeCustomRepository {
		public Option<Employee> getOptionEmployee(Long id);
	}
	
	
커스텀 인터페이스를 작성했다면, 리파지터리로 사용할 인터페이스가 커스텀 인터페이스를 상속하도록 한다.


	public interface EmployeeRepository
			extends EmployeeCustomRepository, Repository<Employee, Long> {
		...
	}
	
	
절반은 끝났다. 이제 나머지 절반은 커스텀 인터페이스를 구현한 클래스를 작성하는 것이다.
앞서 만든 커스텀 인터페이스에 대한 구현 클래스를 다음 코드처럼 구현해보았다.


	public class EmployeeRepositoryImpl implements EmployeeCustomRepository {
		@PersistenceContext
		private EntityManager entitiyManager;
		
		@Override
		public Option<Employee> getOptionEmployee(Long id) {
			Employee emp = entityManager.find(Employee.class, id);
			return Option.value(emp);
		}
	}
	
	
커스텀 구현 클래스를 스프링 빈으로 등록하면 준비는 끝난다. 스프링 빈으로 등록하는 방법에는 두 가지가 있다.
먼저 구현 클래스 이름이 다음 형식을 따르면 스프링 데이터 JPA가 자동으로 검색해서 빈으로 등록한다.

	- 인터페이스 이름 + 접미사(Impl)
	
예를 들어, 앞서 리파지터리 인터페이스 이름은 'EmployeeRepository' 인데, 이 경우 스프링은 이름이 EmployeeRepositoryImpl인 클래스를 찾아서
커스텀 구현체로 사용한다. 단, 이 클래스는 스프링 데이터 JPA가 스캔하는 패키지에 위치해야 한다.

접미사를 붙이는 방법을 사용하면 커스텀 구현체가 스캔을 통해서 등록된다. 따라서, 커스텀 구현 클래스에서 다른 빈 객체를 내부에서 사용해야 한다면,
@Autowired나 @Resource 등의 어노테이션을 이용해서  의존 자동 주입을 해야 한다.

기본 접미사는 Impl인데, 접미사를 바꾸고 싶다면 다음과 같은 설정을 사용한다.


	-- XML 설정
	<jpa:repositories base-package="net.madvirus.spring4.chap14.domain"
			repository-impl-postfix="CustomImpl">
	</jpa:repositories>
	
	-- 자바 코드 설정
	@EnableJpaRepositories(basePackages = "net.madvirus.spring4.chap14.domain",
			repositoryImplmentationPostfix = "CustomImpl")
	public class JpaConfig ... {
		...
	}
	
	
남은 건 리파지터리의 커스텀 메소드를 사용하는 것뿐이다. 스프링 데이터 JPA는 리파지터리의 커스텀 메소드를 호출하면,
앞서 구현한 커스텀 구현 클래스를 이용해서 기능을 제공하게 된다.


	// EmployeeRepositoryImpl의 getOptionEmployee()를 실제 구현으로 사용
	Option<Employee> empOp = employeeRepository.getOptionEmployee(100L);
	
	
만약 정해진 접미사를 사용하지 않았거나 복잡한 설정 때문에 자동 스캔을 사용할 수 없다면, 직접 커스텀 구현 객체를 스프링 빈으로 등록해도 된다.
이때 빈의 식별 값은 '리파지터리 타입 이름 + 접미사'의 형식을 가져야 한다.

아래 코드는 직접 빈으로 등록한 설정 예를 보여주고 있다. 이 코드를 보면 커스텀 구현 클래스의 위치가 <jpa:repositories> 에서 지정한 패키지가 아닌 다른 패키지에 있다.
따라서, 스캔 대상에 커스텀 구현 클래스가 포함되지 않기 때문에 커스텀 구현 클래스를 직접 빈으로 등록했다. 그리고, EmployeeRepository의 커스텀 구현 클래스로
사용하기 위해 빈의 이름을 'employeeRepositoryImpl'로 지정했다.


	<jpa:repositories base-package="net.madvirus.spring4.chap14.domain" />
	
	<bean id="employeeRepositoryImpl"
		class="net.madvirus.spring4.chap14.infra.EmployeeRepositoryImpl">
	</bean>
	
	
	6.2 전체 리파지터리를 위한 메소드 구현 등록
	
개별 리파지터리가 아닌 전체 리파지터리에 커스텀 기능을 추가할 수도 있다. 이를 하기에 앞서 실제로 스프링 데이터 JPA가 사용하는 구현 클래스를 잠깐 살펴보자.
스프링 데이터 JPA는 리파지터리 인터페이스에 정의된 save(), findOne() 등의 구현을 제공하는 SimpleJpaRepository 클래스를 제공하고 있다.
이 클래스는 다음과 같이 JpaRepository 인터페이스와 JpaSpecificationExecutor 인터페이스를 상속받고 있으며,
상위 인터페이스에 정의된 모든 메소드의 구현을 제공하고 있다.


		<< interface >>			<< interface >>
		JpaRepository		JpaSpecificationExecutor
			↑							↑
			└───────────────┬───────────┘
							│				<< instantiate >>								<< instantiate >>
				SimpleJpaRepository		<──────────────────────	JpaRepositoryFactory	<──────────────────────	JpaRepositoryFactoryBean
				
				
스프링 데이터 JPA는 런타임에 리파지터리 구현 객체를 생성할 때, SimpleJpaRepository 객체의 메소드를 구현으로 사용한다.
예를 들어, EmployeeRepository 인터페이스에 정의된 findOne() 메소드를 실행하면 실제로 SimpleJpaRepository 객체의 findOne() 메소드가 실행된다.
즉, 런타임에 리파지터리에서 사용할 구현체로 SimpleJpaRepository 클래스를 사용한다.

런타임에 사용할 리파지터리 구현체를 생성해주는 것이 바로 JpaRepositoryFactory 클래스이고, 이 클래스의 객체를 생성할 때 사용하는 것이 JpaRepositoryFactoryBean 클래스다.
따라서, 전체 리파지터리에서 사용할 수 있는 커스텀 기능을 추가하려면 다음에서 * 표시한 커스텀 리파지터리 인터페이스와 각 구현 클래스를 추가해주면 된다.


		<< interface >>			<< interface >>
		JpaRepository		JpaSpecificationExecutor
		↑	↑							↑
		│	└───────────────┬───────────┘
	<< interface >>			│					<< instantiate >>								<< instantiate >>
	CustomRepository*	SimpleJpaRepository	<──────────────────────	JpaRepositoryFactory	<──────────────────────	JpaRepositoryFactoryBean
			↑				↑					<< instantiate >>								<< instantiate >>											↑												↑
			└──────	CustomJpaRepository*	<──────────────────────	CustomRepositoryFactory*<──────────────────────	CustomRepositoryFactoryBean*
	
	
가장 먼저 기능을 정의한 인터페이스를 작성한다. 이 인터페이스는 JpaRepository 인터페이스를 상속받은 뒤, 추가할 메소드를 정의한다.
다음은 작성 예이다.


	import org.springframework.data.jpa.repository.JpaRepository;
	
	public interface CustomRepository<T, ID extends Serializable>
			extends JpaRepository<T, ID> {
		// 모든 리퍼지터리 대상으로 추가 가능한 메소드 정의
		public Option<T> getOption(ID id);
	}
	
	
다음으로 추가할 기능의 구현을 제공할 클래스를 작성한다. 이 클래스는 SimpleJpaRepository 클래스를 상속받고,
앞서 정의한 인터페이스를 구현한다. 다음은 CustomRepository 인터페이스를 위한 구현 클래스의 작성 예이다.


	import javax.persistence.EntityManager;
	
	import org.springframework.data.jpa.repository.support.JpaEntityInformation;
	import org.springframework.data.jpa.repository.support.SimpleJpaRepository;
	
	public class CustomJpaRepository<T, ID extends Serializable>
			extends SimpleJpaRepository<T, ID>
			implements CustomRepository<T, ID> {
	
		// 기능 구현에 필요한 EntitiyManager 필드에 보관
		private EntityManager entityManager;
	
		public CustomJpaRepository(Class<T> domainClass, EntityManager em) {
			super(domainClass, em);
			this.entityManager = em;
		}
	
		public CustomJpaRepository(JpaEntityInformation<T, ?> entityInformation, EntityManager entityManager) {
			super(entityInformation, entityManager);
			this.entityManager = entityManager;
		}
	
		// 커스텀 기능 구현
		@Override
		public Option<T> getOption(ID id) {
			return Option.value(entityManager.find(getDomainClass(), id));
		}
	
	}
	
	
커스텀 기능 구현 클래스를 만들었으니, 이제 이 구현 클래스를 이용해서 객체를 생성하는 팩토리를 만들 차례다.
이 팩토리 클래스는 JpaRepositoryFactory 클래스를 상속받은 뒤 getTargetRepository() 메소드와 getRepositoryBaseClass()를 재정의하면 된다.
구현 예는 다음과 같다.


	import javax.persistence.EntityManager;
	
	import org.springframework.data.jpa.repository.support.JpaRepositoryFactory;
	import org.springframework.data.repository.core.RepositoryMetadata;
	
	public class CustomRepositoryFactory extends JpaRepositoryFactory {
	
		private EntityManager entityManager;
	
		public CustomRepositoryFactory(EntityManager entityManager) {
			super(entityManager);
			this.entityManager = entityManager;
		}
	
		@SuppressWarnings({ "rawtypes", "unchecked" })
		@Override
		protected Object getTargetRepository(RepositoryMetadata metadata) {
			return new CustomJpaRepository(metadata.getDomainType(), entityManager);
		}
	
		@Override
		protected Class<?> getRepositoryBaseClass(RepositoryMetadata metadata) {
			return CustomJpaRepository.class;
		}
	
	}
	
	
위 코드에서 두 메소드는 앞서 구현한 CustomJpaRepository를 사용해서 재정의했다.

이제 마지막으로 팩토리 생성을 위한 FactoryBean 클래스를 작성할 차례이다.
JpaRepositoryFactoryBean 클래스를 상속받은 뒤 앞서 작성한 팩토리 객체를 리턴하도록 createRepositoryFactory() 메소드를 재정의해주면 된다.


	import javax.persistence.EntityManager;
	
	import org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean;
	import org.springframework.data.repository.Repository;
	import org.springframework.data.repository.core.support.RepositoryFactorySupport;
	
	public class CustomRepositoryFactoryBean<T extends Repository<S, ID>, S, ID extends Serializable>
			extends JpaRepositoryFactoryBean<T, S, ID> {
	
		@Override
		protected RepositoryFactorySupport createRepositoryFactory(EntityManager entityManager) {
			return new CustomRepositoryFactory(entityManager);
		}
	
	}
	
	
이제 스프링 데이터 JPA 모듈이 커스텀 구현을 사용하도록 만들 차례이다. 스프링이 커스텀 구현 클래스를 사용하도록 하려면,
다음과 같이 JPA 설정에서 앞서 작성한 CustomRepositoryFactoryBean 클래스를 팩토리 클래스로 사용하도록 지정하면 된다.


	-- XML 설정
	<jap:repositories base-package="net.madvirus.spring4.chap14.domain"
		factory-class="net.madvirus.spring4.chap14.domain.CustomRepositoryFactoryBean" />
		
	-- 자바 코드 설정
	@EnableJpaRepositories(basePackages = "net.madvirus.spring4.chap14.domain",
		repositoryFactoryBeanClass = CustomRepositoryFactoryBean.class)
	public class JpaConfig ... {
		...
	}
	
	
모든 설정이 끝났다. 남은 건 리파지터리 인터페이스에서 커스텀 메소드를 사용하는 것이다.


	public interface EmployeeRepository extends Repository<Employee, Long> {
		...
		public Option<Employee> getOption(Long id);	// 커스텀 메소드 사용
	}
	
	public interface TeamRepository extends Repository<Team, Long> {
		...
		public Option<Team> getOption(Long id);	// 커스텀 메소드 사용
	}