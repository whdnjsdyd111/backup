o.s.data.jpa.repository.Query 어노테이션을 사용하면 조회 메소드에서 실행할 쿼리를 직접 지정할 수 있다.
다음은 @Query 어노테이션을 이용한 조회 메소드의 작성 예를 보여주고 있다.


	@Query("from Employee e where e.employeeNumber = ?1 or e.name like %?2%")
	public Emplyee findByEmployeeNumberLike(String empNum, String name);
	
	@Query("from Employee e where e.birthYear < :year order by e.birthYear")
	public List<Employee> findEmployeeBornBefore(@Param("year") int year);
	
	
@Query 어노테이션은 실행할 JPQL을 값으로 갖는다. 첫 번째 @Query 어노테이션 쿼리를 보면 위치 기반 쿼리 파라미터인 ?1 과 ?2 가 있는데,
여기서 ?1 과 ?2 는 각각 첫 번째 파라미터 empNum과 두 번째 파라미터 name 값을 사용한다. ?2 를 보면 앞 뒤로 %가 있는데, 이는 like 검색을 위한 것이다.

두 번째 @Query의 JPQL은 ":year"를 포함하고 있다. ":이름"은 이름 기반의 네임드 파라미터로서, 네임드 파라미터의 이름과 동일한 값을 갖는
@Param 어노테이션이 적용된 메소드 파라미터 값이 사용된다. 위 코드의 경우 :year 위치에 year 파라미터 값이 사용된다.

@Query 어노테이션에서 사용하는 쿼리에서 order by를 사용해서 정렬 순서를 지정할 수 있다.
또한, 다음 코드처럼 조회 메소드의 파라미터로 Sort와 Pageable을 사용해서 정렬 순서와 페이징 처리를 할 수도 있다.


	@Query("from Employee e where e.birthYear < :year")
	public List<Employee> findEmployeeBornBefore(@Param("year") int year, Sort sort);
	
	@Query("from Employee e where e.birthYear < :year order by e.birthYear")
	public Page<Employee> findEmployeeBornBefore(@Param("year") int year, Pageable pageable);
	
	
첫 번째 메소드처럼 @Query의 쿼리에 order by 절이 없으면 Sort 타입 파라미터나 Pageable에 지정한 Sort를 이용해서 order by 부분을 생성한다.
반면에 두 번째 메소드 처럼 @Query의 쿼리에 order by가 존재하고 메소드 파라미터에 Sort가 포함되어 있다면, 쿼리의 order by 절 뒤에 Sort로 지정한 정렬 순서를 추가한다.
예를 들어, 위 코드에서 Pageable을 전달받는 메소드는 다음과 같이 호출했다고 해보자.


	PageRequest pageReq = new PageRequest(1, 2, new Sort("name"));
	Page<Emplyee> pageEmp = empRepository.findEmployeeBornBefore(1980, pageReq);
	
	
위 코드를 실행하면 실제로 다음과 같은 order by 절을 사용한 JPQL을 실행하게 된다.


	from Employee e where e.birthYear < 1980 order by e.birthYear asc, name asc
	
	
[자바 7 버전까지는 네임드 파라미터를 사용하려면 @Param 어노테이션을 이용해서 메소드 파라미터와 매핑될 네임드 파라미터의 이름을 지정해 주어야 했다.
하지만, 자바 8 버전부터는 새롭게 추가된 메소드 파라미터 이름 발견 기능을 통해 네임드 파라미터와 동일한 이름을 갖는 메소드 파라미터를 사용할 수 있다.]


	3.1 수정 쿼리 실행하기
	
수정 쿼리를 사용할 경우 @Modifying 어노테이션을 함께 사용해야 한다.


	import org.springframework.data.jpa.repository.Modifying;
	
	public interface TeamRepository extends Repository<Team, Long> {
	
		@Modifying
		@Query("update Team t set t.name = ?2 where t.id = ?1")
		public int updateName(Long id, String newName);
		
		
수정 쿼리 메소드는 쿼리 실행 결과로 수정된 행의 개수를 리턴한다.

수정 쿼리 메소드를 실행할 때 주의할 점이 있다. 일단 다음 코드를 보자.


	@Transactional
	@Override
	public void updateName(Long teamId, String newName) {
		Team team = teamRepository.findOne(teamId);
		if(team == null)
			throw new TeamNotFoundException("No Team for ID[" + teamId + "]");
			
		// 변경 전 : team.getName()은 변경 전 값
		
		int updated = teamRepository.update(teamId, newName);
		
		// 쿼리 실행 후 : team.getName() 은 여전히 이전 값
	}
	
	
위 코드는 findOne() 메소드로 엔티티 객체를 구한다. 엔티티가 존재하면 updateName()을 이용해서 수정 쿼리를 실행한다.
updateName() 쿼리를 실행하면 DB 데이터가 변경되지만, 앞서 읽어온 엔티티의 데이터의 변경되지 않는다. 이는 JPA의 영속성 컨텍스트에 변경 내역이 반영되지 않았기 때문에 발생하는 증상이다.

만약 수정 쿼리를 실행한 후에 이미 로딩한 엔티티 객체에 변경 내역을 반영하고 싶다면, 다음과 같이 @Modifying 어노테이션의
clearAutomatically 속성 값을 true로 지정해주면 된다.


	@Modifying(clearAutomatically=true)
	@Query("update Team t set t.name = ?2 where t.id = ?1")
	public int updateName(Long id, String newName);
	
	
	3.2 네이티브 쿼리 사용하기
	
네이티브 쿼리를 실행하고 싶다면, @Query 어노테이션의 값으로 네이티브 쿼리를 입력하고 nativeQuery 속성의 값을 true로 지정하면 된다.


	@Query(value = "select * from TEAM where NAME like ?1%", nativeQuery = true)
	List<Team> findByNameLike(String name);
	
	
네이티브 쿼리를 사용할 때 주의할 점은 메소드에 Sort나 Pageable을 파라미터로 추가해도 원하는 결과를 얻을 수 없다는 점이다.
네이티브 쿼리를 사용하면 정렬이나 페이징 처리와 관련된 쿼리를 각 DBMS에 맞게 생성하는 것이 어렵기 때문에, Sort나 Pageable이 제대로 반영되지 않는다.