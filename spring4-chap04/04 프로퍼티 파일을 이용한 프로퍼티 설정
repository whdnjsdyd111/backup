스프링 빈 객체의 프로퍼티나 생성자 값을 설정하기 위해 Environment를 직접 사용하는 경우는 드물다. 아니 거의 없다.
사실, 스프링에 Environment가 추가되기 전부터 스프링은 외부의 프로퍼티 파일을 이용해서 스프링 빈을 설정하는 방법을 제공하고 있었다.
앞에서 언급했던 db.properties 파일을 다시 보자.

	
	db.driver=com.mysql.Driver
	db.jdbcUrl=jdbc:mysql://host/test
	db.user=madvirus
	db.password=bkchoi
	
	
이 프로퍼티 파일의 내용을 XML과 자바 설정에서 (Environment 없이) 직접 사용하는 방법을 살펴보자.

	
	4.1 XML에서의 프로퍼티 설정 : <context:property-placeholder> 사용
	
XML 설정을 이용한다면, 매우 간단한 방법으로 프로퍼티 파일을 이용할 수 있다. 다음은 그 방법이다.

	<bean ...>
	
		<context:property-placeholder location="classpath:/db.properties" />
	
		<bean id="connProvider" class="net.madvirus.spring4.chap04.JdbcConnectionProvider"
			init-method="init">
			<property name="driver" value="${db.driver}" />
			<property name="url" value="${db.jdbcUrl}" />
			<property name="user" value="${db.user}" />
			<property name="password">
				<value>${db.password}</value>
			</property>
		</bean>
	
	</beans>
		
		
<context:property-placeholder> 태그는 location 속성으로 지정한 프로퍼티 파일로부터 정보를 읽어와 빈 설정에 입력한 플레이스폴더(${로 시작하고 }로 끝나는)의 값을 
프로퍼티 파일에 존재하는 값으로 변경한다. 플레이스홀더는 '${' 와 '}' 사이에 사용할 프로퍼티 이름을 지정하며, <context:property-placeholder>는
플레이스홀더를 동일한 이름을 갖는 프로퍼티의 값으로 치환한다. 즉, 위 코드는 다음과 같은 XML 설정을 사용한 것과 같은 결과를 만든다.


	<bean ...>
	
		<context:property-placeholder location="classpath:/db.properties" />
	
		<bean id="connProvider" class="net.madvirus.spring4.chap04.JdbcConnectionProvider"
			init-method="init">
			<property name="driver" value="com.mysql.jdbc.Driver" />
			<property name="url" value="jdbc:mysql://host/test" />
			<property name="user" value="madvirus" />
			<property name="password">
				<value>bkchoi</value>
			</property>
		</bean>
	
	</beans>
	
	
location 속성 외에 <context:property-placeholder> 태그가 제공하는 주요 속성은 다음과 같다.

	- file-encoding : 파일을 읽어올 때 사용할 인코딩을 지정한다. 이 값이 없으면,
		자바 프로퍼티 파일 인코딩을 따른다. (JDK에서 제공하는 native2ascii 도구를 이용해서 생성 가능한 인코딩)
	
	- ignore-resource-not-found : 이 속성의 값이 true면, location 속성에 지정한 자원이 존재하지 않더라도 익셉션을 발생시키지 않는다.
		false면, 자원이 존재하지 않을 때 익셉션을 발생시킨다. 기본값은 false이다.
	
	- ignore-unresolvable : 이 값이 true이면, 플레이스홀더에 일치하는 프로퍼티가 없어도 익셉션을 발생시키지 않는다.
		false면 플레이스홀더와 일치하는 프로퍼티가 없을 경우 익셉션을 발생시킨다. 기본값은 false이다.
		
<context:property-placeholder> 태그는 내부적으로 PropertySourcesPlaceholderCongigurer를 빈으로 등록한다.
PropertySourcesPlaceholderCongigurer는 location으로 지정한 파일에서 프로퍼티 값을 찾을 수 없는 경우 Environment의 프로퍼티를 확인하며,
Environment가 해당 프로퍼티를 갖고 있으면 그 값을 사용한다.

<context:property-placeholder> 태그를 사용할 때 주의할 점은 전체 설정에서 이 태그를 두 번 이상 사용할 경우,
첫 번째로 사용한 태그의 값이 우선순위를 갖는다는 것이다. 예를 들어, 아래와 같이 두 개의 프로퍼티 파일이 있다고 해보자.


	-- db.properties 파일
	db.driver=com.mysql.Driver
	db.jdbcUrl=jdbc:mysql://host/test
	db.user=madvirus
	db.password=bkchoi
	
	-- app.properties 파일
	calc.batchSize=10000
	
	
이 두 파일은 서로 다른 빈을 위한 프로퍼티를 갖고 있다. 이제 다른 두 개의 XML 설정에서 서로 다른 프로퍼티 파일을 사용할 수 있을 것이다.


	-- app-config.xml 파일
	<beans ...>
		<context:property-placeholder location="classpath:/app.properties" />
	
		<bean id="chargeCalculator" class="net.madvirus.spring4.chap04.ChargeCalculator">
			<property name="batchSize" value="${calc.batchSize}" />
			<property name="connectionProvider" ref="connProvider" />
		</bean>
	</beans>
	
	- db-config.xml 파일
	<beans ...>
		<context:property-placeholder location="classpath:/db.properties" />
	
		<bean id="connProvider" class="net.madvirus.spring4.chap04.JdbcConnectionProvider"
			init-method="init">
			<property name="driver" value="${db.driver}" />
			<property name="url" value="${db.jdbcUrl}" />
			<property name="user" value="${db.user}" />
			<property name="password" value="${db.password}" />
		</bean>
	</beans>
	
	
app-config.xml 파일과 db-config.xml 파일은 각각 app.properties 파일과 db.properties 파일을 사용하고 있는데,
app-config.xml 파일에서 db-config.xml 파일에 정의된 connProvider 빈을 사용하므로 이 두 XML 파일을 이용해서 스프링 컨테이너를 생성해야 할 것이다.


	GenericXmlApplicationContext ctx = new GenericXmlApplicationContext(
		"classpath:/app-config.xml", "classpath:/db-config.xml");
		
	
그런데, 위 코드를 실행하면 익셉션이 발생한다.
익셉션 메시지를 보면 ${db.driver} 플레이스홀더의 값을 찾을 수 없다는 내용을 담고 있다.
즉, app.properties 파일의 프로퍼티만 읽어오고 db.properties 파일의 프로퍼티는 읽어오지 않는 것이다.
이런 이유로 다수의 XML 파일에서 사용되는 프로퍼티 파일이 두 개 이 상이라면, 다음과 같이 별도의 XML 파일에서 <context:property-placeholder>
태그를 설정하고 다른 XML 파일에서 플레이스홀더를 사용하도록 구성하는 것이 좋다.


	-- 프로퍼티 전용 XML
	<beans ...>
		<context:property-placeholder
			location="classpath:/db.properties, classpath:/app.properties" />
	</beans>
	
	
두 개 이상의 프로퍼티 파일을 사용하고 싶다면 위 코드처럼 각 프로퍼티 파일을 콤마로 구분해서 지정하면 된다.
또한, 아래 코드처럼 애스터리크를 사용할 수도 있다.


	<context:property-placeholder location="classpath:/*.properties />
	

[	PropertySourcesPlaceholderConfigurer의 동작 방식

<context:property-placeholder> 태그는 내부적으로 PropertySourcesPlaceholderConfigurer 객체를 빈으로 등록한다.
PropertySourcesPlaceholderConfigurer는 다른 빈 객체를 생성하기 전에 먼저 생성되어, 다른 빈들의 설정 정보에 있는 플레이스홀더의 값을 프로퍼티의 값으로 변경한다.
PropertySourcesPlaceholderConfigurer 클래스는 BeanFactoryPostProcessor 인터페이스를 구현하고 있는데,
스프링은 BeanFactoryPostProcessor 인터페이스를 구현한 객체를 특수한 방식으로 사용한다.

스프링은 설정 정보를 읽은 뒤에, BeanFactoryPostProcessor를 구현한 클래스가 있으면,
그 빈 객체를 먼저 생성한다. 그런 뒤에 다른 빈의 메타 정보를 BeanFactoryPostProcessor를 구현한 빈 객체에 전달해서 메타 정보를 변경할 수 있도록 한다.
PropertySourcesPlaceholderConfigurer의 경우, 전달받은 메타 정보에 플레이스홀더가 포함되어 있으면, 플레이스홀더를 일치하는 프로퍼티 값으로 치환하는 방식으로 메타 정보를 변경하게 된다.

BeanFactoryPostProcessor는 5장에서 살펴본다.
]


	4.2 Configuration 어노테이션을 이용하는 자바 설정에서의 프로퍼티 사용
	
@Configuration 을 이용한 자바 설정에서 프로퍼티 파일을 사용하고 싶을 때에는 PropertySourcesPlaceholderConfigurer와 @Value 어노테이션을 함께 쓴다.
다음은 사용 예이다.


	import org.springframework.beans.factory.annotation.Value;
	import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;
	import org.springframework.core.io.ClassPathResource;
	
	@Configuration
	public class ConfigByProp {
	
		@Value("${db.driver}")
		private String driver;
		@Value("${db.jdbcUrl}")
		private String jdbcUrl;
		@Value("${db.user}")
		private String user;
		@Value("${db.password}")
		private String password;
	
		@Bean
		public static PropertySourcesPlaceholderConfigurer properties() {
			PropertySourcesPlaceholderConfigurer configurer = new PropertySourcesPlaceholderConfigurer();
			configurer.setLocation(new ClassPathResource("db.properties"));
			return configurer;
		}
	
		@Bean(initMethod = "init")
		public ConnectionProvider connectionProvider() {
			JdbcConnectionProvider connectionProvider = new JdbcConnectionProvider();
			connectionProvider.setDriver(driver);
			connectionProvider.setUrl(jdbcUrl);
			connectionProvider.setUser(user);
			connectionProvider.setPassword(password);
			return connectionProvider;
		}

		
위 코드에서 주의해서 볼 점은 PropertySourcesPlaceholderConfigurer 타입의 빈을 설정하는 메소드는 정적(static) 메소드라는 것이다.
이는 PropertySourcesPlaceholderConfigurer 클래스가 특수한 목적의 빈(앞서 Tip에서 말한 BeanFactoryPostProcessor 타입의 빈)
이기 때문에 정적 메소드로 지정하지 않으면 원하는 방식으로 동작하지 않는다.

@Value 어노테이션이 플레이스홀더를 값으로 가질 경우, PropertySourcesPlaceholderConfigurer는 플레이스 홀더의 값을 프로퍼티의 값으로 치환한다.
위 예의 경우 ${db.driver} 플레이스홀더를 db.properties에 정의되어 있는 "db.driver" 프로퍼티의 값으로 치환한다.
따라서, 실제 빈을 생성하는 메소드 -앞의 코드에서는 connectionProvider() -는 @Value 어노테이션이 붙은 필드를 통해서 해당 프로퍼티의 값을 사용할 수 있게 된다.

PropertySourcesPlaceholderConfigurer 클래스를 직접 사용할 때에는 다음과 같은 메소드를 이용해서 동작 방식을 설정할 수 있다.

	- setLocation(Resource location) : location을 프로퍼티 파일로 사용한다.
	
	- setLocation(Resource[] location) : locations를 프로퍼티 파일로 사용한다.
	
	- setFileEncoding(String encoding) : 프로퍼티 파일을 읽어올 때 사용할 인코딩을 지정한다. 지정하지 않을 경우 자바 프로퍼티 파일 인코딩을 따른다.
	
	- setIngnoreReourceNotFound(boolean b) : true를 전달하면, 자원을 발견할 수 없어도 익셉션을 발생하지 않고 무시한다.
	
	- setIgnoreUnresolvablePlaceholders(boolean b) : true를 전달하면, 플레이스홀더에 해당하는 프로퍼티를 발견할 수 없어도 익셉션을 발생하지 않고 무시한다.
	
[	Resource 인터페이스

o.s.core.io.Resource 인터페이스는 스프링에서 자원을 표현할 때 사용하는데, 대표적인 구현 클래스로 다음의 두 가지가 있다.

	- o.s.core.io.ClassPathResource : 클래스패스에 위치한 자원으로부터 데이터를 읽음
	- o.s.core.io.FileSystemresource : 파일 시스템에 위치한 자원으로부터 데이터를 읽음
	
@Configuration 어노테이션 기반의 자바 설정에서 PropertySourcesPlaceholderConfigurer 클래스의 setLocation()이나
setLocations() 메소드를 직접 호출할 경우에 이들 Resource 구현 클래스를 주로 사용한다.]

[@Value 어노테이션은 스프링에서 프로퍼티 값을 설정할 때 사용할 수 있는 어노테이션이다.
@Configuration 어노테이션을 사용한 설정 클래스 역시 스프링에서는 빈 객체로 생성된다. 따라서, @Configuration 어노테이션 사용 클래스에서
@Value가 붙은 필드는 스프링에서 빈의 프로퍼티로 인식되며, @Value가 플레이스홀더를 가질 경우 PropertySourcesPlaceholderConfigurer의 치환 대상이 된다.]

@PropertySource 어노테이션과 PropertySourcesPlaceholderConfigurer를 함께 사용하면 좀 더 쉽게 코드를 작성할 수 있다.
@PropertySource는 프로퍼티 파일을 이용해서 Environment에 프로퍼티를 추가할 때 사용되는데, PropertySourcesPlaceholderConfigurer는
자신의 설정에서 사용할 파일에 프로퍼티가 존재하지 않을 경우 Environment의 프로퍼티 값을 사용하도록 되어 있다.
따라서, 아래와 같은 코드를 사용하면 @PropertySource를 이용해서 등록한 프로퍼티 정보를 플레이스홀더에서 사용할 수 있게 된다.


	@Configuration
	@PropertySources(@PropertySource("classpath:/db.properties"))
	public class ConfigByPropSource {
	
		@Bean
		public static PropertySourcesPlaceholderConfigurer properties() {
			PropertySourcesPlaceholderConfigurer configurer = new PropertySourcesPlaceholderConfigurer();
			return configurer;
		}
	
		@Value("${db.driver}")
		private String driver;