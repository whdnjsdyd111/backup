Environment와 PropertySource에 대해서 알아봤는데, 스프링 빈은 Environment에 직접 접근해서 Environment가 제공하는 프로퍼티를 사용할 수 있다.
스프링 빈 객체에 Environment에 접근할 필요가 있다면, 다음의 두 가지 방법 중의 하나를 사용하면 된다.

	- o.s.context.EnvironmentAware 인터페이스를 구현
	- @Autowired 어노테이션을 Environment 필드에 적용
	
EnvironmentAware 인터페이스는 다음과 같이 정의되어 있다.

	
	package org.springframework.context;
	
	import org.springframework.beans.factory.Aware;
	import org.springframework.core.env.Environment;
	
	public interface EnvironmentAware extends Aware {
		void setEnvironment(Environment environment);
	}
	
	
스프링 빈 객체가 EnvironmentAware 인터페이스를 구현하고 있을 경우, 
스프링 컨테이너 빈 객체를 생성한 뒤에 빈 객체의 setEnvironment() 메소드를 호출해서 컨테이너가 사용하는 Environment 객체를 전달한다.
따라서, EnvironmentAware 인터페이스를 구현한 스프링 빈은 아래 코드처럼 setEnvironment() 메소드에서 전달받은 Environment 객체를 필드에 보관하고, 
Environment의 프로퍼티가 필요한 곳에서 이 필드를 사용하면 된다.


	public class ConnectionProvider implements EnvironmentAware {
	
		private String driver;
		private String user;
		private String password;
		private String url;
		private Environment env;
		
		@Override
		public void setEnvironment(Environment environment) {
			this.env = environment;
		}
		
		public void init() {
			driver = env.getProperty("db.driver");
			url = env.getProperty("db.jdbcUrl");
			user = env.getProperty("db.user");
			password = env.getProperty("db.password");
		}
		...
		
		
어노테이션 기반 의존 설정 기능이 활성화되어 있다면, 다음과 같이 @Autowired 어노테이션을 이용해서 Environment에 접근할 수 있다.


	public class ConnectionProvider {
		@Autowired
		private Environment environment;
		
		public void init() {
			driver = env.getProperty("db.driver");
			url = env.getProperty("db.jdbcUrl");
			user = env.getProperty("db.user");
			password = env.getProperty("db.password");
		}
	}
		
		
@Configuration 기반 자바 설정 코드에서도 동일한 방법으로 Environment를 구할 수 있다.
다음 코드는 @Autowired 어노테이션을 이용해서 Environment를 구하는 코드를 보여주고 있다.


	@Configuration
	public class SpringConfig {
	
		@Autowired
		private Environment env;
	
		@Bean(initMethod = "init")
		public ConnectionProvider connectionProvider() {
			// ConnectionProvider에 직접 Environment에 접근하지 않는다고 가정
			JdbcConnectionProvider connectionProvider = new JdbcConnectionProvider();
			connectionProvider.setDriver(env.getProperty("db.driver"));
			connectionProvider.setUrl(env.getProperty("db.jdbcUrl"));
			connectionProvider.setUser(env.getProperty("db.user"));
			connectionProvider.setPassword(env.getProperty("db.password"));
			return connectionProvider;
		}
		...