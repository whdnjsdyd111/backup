지금까지 스프링 MVC를 이용해서 웹 요청을 처리하는 데 필요한 기본적인 지식을 익혔다.
이 절에서는 기본 설정 외에 개발을 하다보면 자주 접하게 될 설정에 대해 설펴보도록 하자.


	10.1	WebMvcConfigurer를 이용한 커스텀 설정
	
MVC 네임스페이스를 사용할 때와 달리 @EnableWebMvc 어노테이션을 이용하는 경우에는 다음의 인터페이스를 상속받은 @Configuration 클래스를 구현해야 할 때가 있다.

	- o.s.web.servlet.config.annotation.WebMvcConfigurer 인터페이스
	
이 인터페이스는 MVC 네임스페이스를 이용한 설정과 동일한 설정을 하는 데 필요한 메소드를 정의하고 있다.
예를 들어, <mvc:view-controller> 태그는 뷰 컨트롤러를 설정할 때 사용되는데 이와 동일한 설정을 위해 WebMvcConfigurer 인터페이스의 addViewController() 메소드를 이용한다.

WebMvcConfigurer 인터페이스는 10개가 넘는 메소드를 정의하고 있는데, 이들 메소드를 모두 구현하는 경우는 드물다.
대신, WebMvcConfigurer 인터페이스를 구현하고 있는 o.s.web.servlet.config.annotation.WebMvcConfigurerAdapter 클래스를 상속받아
필요한 메소드만 구현하는 것이 일반적이다. 이 장에서도 WebMvcConfigurerAdapter 클래스를 상속받아 전송하는 방식을 사용할 것이다.

WebMvcConfigurer 인터페이스나 WebMvcConfigurerAdapter 클래스를 상속받아 구현한 클래스는
@Configuration 어노테이션을 적용해서, 설정 정보로 사용해야 한다.

	
	@Configuration
	@EnableWebMvc
	public class MvcConfiguration extends WebMvcConfigurerAdapter {
	
		@Override
		public void addViewControllers(ViewControllerRegistry registry) {
			registry.addViewController("/index").setViewName("index");
		}
		
		
위 코드처럼 @EnableWebMvc 어노테이션을 적용한 클래스가 WebMvcConfigurerAdapter 클래스를 상속받도록 구현하면 MVC 관련 설정이 한 클래스에 모이므로,
이 방법이 코드 관치 측면에서 좋다고 본다.

다음 코드처럼 @EnableWebMvc 클래스와 WebMvcConfigurer 구현 클래스가 서로 다를 수도 있다.


	@Configuration
	@EnableWebMvc
	@Import(MvcConfiguration.class)
	public class Config {
		...
	}
	
	@Configuration
	public class MvcConfiguration extends WebMvcConfigurerAdapter {
		...
	}
	
	
	10.2	뷰 전용 컨트롤러 설정하기
	
/index 경로로 요청이 들어오면 단순히 "index" 뷰로 보여주고 싶다고 하자. 이를 위해 다음과 같은 컨트롤러 코드를 작성하는 것은 성가실 것이다.


	@Controller
	public class IndexController {
		@RequestMapping("/index")
		public String index() {
			return "index";
		}
	}
	
	
이렇게 특별한 구현없이 단순히 요청 경로에 알맞은 뷰 이름만 리턴해주는 컨트롤러가 필요하다면 다음과 같이 <mvc:view-controller> 태그를 이용해서 쉽게 처리할 수 있다.


	<beans ...>
		<mvc:annotation-driven />
		<mvc:default-servlet-handler />
		<mvc:view-controller path="/index" view-name="index" />
		
		
위 설정을 사용하면 별도의 컨트롤러 코드를 작성하지 않고 "/index" 경로에 대해 index 뷰를 사용하게 된다.
여기서 path 속성의 값은 컨텍스트 경로를 제외한 나머지 경로에 해당한다.

@EnableWebMvc를 사용한다면, WebMvcConfigurerAdapter를 상속받고 addViewController() 메소드에서 경로와 뷰 이름을 매핑해주면 된다.


	import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
	import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
	
	@Configuration
	@EnableWebMvc
	public class SampleConfig extends WebMvcConfigurerAdapter {
	
		@Override
		public void addViewController(ViewControllerRegistry registry) {
			registry.addViewController("/index").setViewName("index");
		}
		
		
	10.3	디폴드 서블릿 설정과 동작 방식
	
디폴트 서블릿은 이미 "서블릿 매핑에 따른 컨트롤러 경로 매핑과 디폴트 서블릿 설정" 절에서 필요 여부를 설명했었다. 여기서는 설정과 관련된 추가적인 내용만 설명하겠다.

web.xml 파일에서 DispatcherServlet에 대한 경로 매핑을 '/'로 했다고 하자.


	<servlet>
		<servlet-name>dispatcher3</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		...
	</servlet>
	
	<servlet-mapping>
		<servlet-name>dispatcher3</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	
이 경우, CSS나 JS, HTML, JSP 등에 대한 요청이 DispatcherServlet으로 전달된다.
하지만, 이들 자원 경로에 매핑된 컨트롤러가 존재하지 않는 이상 DispatcherServlet은 404 응답 에러를 발생시킨다.
실제로 css, js, html, jsp 등의 요청은 WAS가 기본으로 제공하는 디폴트 서블릿이 처리하게 되어 있기 때문에, 이들 자원에 대한 요청이 들어오면 디폴트 서블릿이 처리하도록 해야 한다.
(디폴트 서블릿이 있는데 JSP나 CSS와 같은 경로를 처리하는 컨트롤러를 따로 개발하는 것은 불필요한 작업이다.)

MVC 네임스페이스나 @EnableWebMvc 어노테이션을 이용한 쉬운 설정을 사용할 때 DispatcherServlet에 대한 매핑 경로로 "/"를 주는 경우는 매우 흔하기 때문에,
스프링 MVC는 디폴트 서블릿 핸들러라는 특별한 핸들러 구현을 제공하고 있다. 이 디폴트 서블릿 핸들러는 css, js, jsp 등에 대한 요청이 들어오면 그 요청을
디폴트 서블릿에 다시 전달하는 핸들러이다. 따라서, 디폴트 서블릿 핸들러를 사용하면 DispatcherServlet의 매핑 경로로 "/" 를 지정하면서
CSS, JS, JSP 등의 처리는 디폴트 서블릿이 처리하도록 할 수 있다.

디폴트 서블릿 핸들러를 설정하는 방법은 다음과 같다.


	-- XML 설정
	<beans ...>
		<mvc:annotation-driven />
		<mvc:default-servlet-handler />
	</beans>
	
	-- 자바 코드 설정
	@Configuration
	@EnableWebMvc
	public class SampleConfig extends WebMvcConfigurerAdapter {
	
		@Override
		public void configureDefaultServletHandling(
				DefaultServletHandlerConfigurer configurer) {
			configurer.enable();
		}
		
		
디폴트 서블릿 핸들러를 등록하면, DispatcherServlet은 요청이 들오올 때 다음의 과정을 거쳐서 요청을 처리하게 된다.

	- 1. 요청 경로와 일치하는 컨트롤러를 찾는다.
	- 2. 컨트롤러가 존재하지 않으면, 디폴트 서블릿 핸들러에 전달한다.
	- 3. 디폴트 서블릿 핸들러는 WAS의 디폴트 서블릿에 처리를 위임한다.
	- 4. 디폴트 서블릿의 처리를 결과를 응답으로 전송한다.
	
디폴트 서블릿의 이름은 WAS마다 다른데, 디폴트 서블릿 핸들러 설정에서 디폴트 서블릿의 이름을 지정하고 싶다면 다음과 같은 코드를 사용하면 된다.


	<!-- XML -->
	<mvc:default-servlet-handler default-servlet-name="default" />
	
	// 자바 설정
	@Configuration
	@EnableWebMvc
	public class SampleConfig extends WebMvcConfigurerAdapter {
	
		@Override
		public void configureDefaultServletHandling(
				DefaultServletHandlerConfigurer configurer) {
			configurer.enable("default");
		}
		
		
디폴트 서블릿 이름을 지정하지 않으면, 각 WAS 별로 다음과 같은 디폴트 서블릿 이름을 사용한다.

	- 톰캣, Jetty, JBoss : default
	- 웹 로직 : FileServlet
	- 구글 앱엔진 : _ah_default
	- 웹스피어 : SimpleFileServlet
	
	
	10.4	정적 자원 설정하기
	
CSS, JS, 이미지 등의 자원은 거의 변하지 않기 때문에, 웹 브라우저에 캐시를 하면 네트워크 사용량, 서버 사용량, 웹 브라주어의 반응 속도 등을 개선할 수 있다.
이런 정적 자원은 보통 별도 웹 서버에서 제공하기 때문에 웹 서버의 캐시 옵션 설정을 통해 웹 브라우저 캐시를 활성화시킬 수 있다.
하지만, 스프링 MVC를 이용하는 웹 어플리케이션에 정적 자원 파일이 함께 포함되어 있다면 웹 서버 설정을 사용하지않고 <mvc:resources> 설정을 이용해서 웹 브라우저 캐시를 사용하도록 지정할 수 있다.
다음은 <mvc:resources> 태그의 사용 예를 정리한 것이다.


	<mvc:resources mapping="/images/**" location="/img/, /WEB-INF/resources/"
			cache-period="60" />
			
			
<mvc:resources> 태그의 각 속성은 다음과 같다.

	- mapping : 요청 경로 패턴을 설정한다. 컨텍스트 경로를 제외한 나머지 부분의 경로와 매핑된다.
	- location : 웹 어플리케이션 내에서 요청 경로 패턴에 해당하는 자원의 위치를 지정한다. 위치가 여러 곳일 경우 각 위치를 콤마로 구분한다.
	- cache-period : 웹 브라우저에 캐시 시간 관련 응답 헤더를 전송한다. 초 단위로 캐시 시간을 지정하며, 이 값이 0일 경우 웹 브라우저가 캐시하지 않도록 한다.
		이 값을 설정하지 않으면 캐시 관련된 응답 헤더를 전송하지 않는다.
		
위 설정의 경우 요청 경로가 /images/로 시작하면, 그에 해당하는 자원을 /img/나 /WEB-INF/resources/ 디렉토리에서 검색한다.
예를 들어, 요청 경로가 /images/log/spring1.png 인 경우 ,웹 어플리케이션 디렉토리 기준으로 /img/log/spring1.png 파일이나 
/WEB-INF/resource/log/spring1/png 파일이 존재하는지 검색한다. 파일이 존재하면 그 파일을 웹 브라우저에 전송한다.
그리고, cache-period 속성 값이 60이므로, 응답 헤더에 캐시 유효 시간을 60초로 지정해서 웹 브라우저에 전송한다.

@EnableWebMvc 설정을 사용한다면, 다음과 같이 WebMvcConfigurerAdapter 클래스를 상속받은 뒤 addResourceHandlers() 메소드를 재정의하면 된다.

	
	@Configuration
	@EnableWebMvc
	public class SampleConfig extends WebMvcConfigurerAdapter {
	
		@Override
		public void addResourceHandler(ResourceHandlerRegistry registry) {
			registry.addResourceHandler("/images/**");
				.addResourceLocations("/img/", "/WEB-INF/resources")
				.setCachePeriod(60);
		}