스프링을 이용한 웹 개발은 어렵지 않다. 몇 가지 간단한 설정과 코드를 만들면 될 뿐이다.
요구 사항에 맞게 기능을 구현하는 것이 어려운 부분이지 스프링 MVC 자체가 어렵지는 않다.
이 절에서는 스프링 MVC를 이용해서 웹 개발을 하는 가장 기본적인 과정을 살펴볼 것이다. 이를 통해 스프링을 이용해서 웹 어플리케이션을 어떻게 만들지에 대한 감을 잡아보도록 하자.

[이 장에서는 메이븐을 이용해서 웹 프로젝트를 생성하고 이를 이클립스에 임포트해서 사용하는 방법을 설명할 것이다.
만약 메이븐 프로젝트가 아닌 이클립스의 웹 프로젝트를 생성하고 싶다면, 스프링 MVC를 실행하는데 필요한 jar 파일들을 구해야 한다.
이 jar 파일들을 일일이 구하는 건 매우 귀찮은 일이므로, 미리 이클립스용 예제 프로젝트를 만들어 두었다. 이장의 예제 다운로드 사이트인
http://cafe.daum.net/javacan	에서 이클립스용 7장 예제를 다운로드 받아 압축을 풀고 lib 폴더에 있는 jar 파일들이 있는데,
이 파일들을 이클립스 웹 프로젝트의 lib 폴더에 복사하여 사용하면 된다.]


	1.1	메이븐 웹 프로젝트 생성 및 설정
	
[프로젝트 생성에 앞서 메이븐 사용법이 익숙하지 않다면 먼저	http://javacan.tistory.com/entry/MavenBasic	을 읽어보도록 하자.]

가장 먼저 할 작업은 메이븐 웹 프로젝트를 생성하는 것이다. 프로젝트 생성 과정은 아래와 같다.

	- 1. 프로젝트 디렉토리를 생성한다.
	- 2. 프로젝트 디렉토리에서 다음의 세 디렉토리를 생성한다.
		A. src/main/java
		B. src/main/resources
		C. src/main/webapp
	- 3. 웹 애플리케이션을 위한 pom.xml 파일을 프로젝트 디렉토리에 생성한다.
	
순서대로 진행해보자. 먼저 프로젝트를 생성할 폴더를 c:\work라고 가정하겠다. 존재하지 않으면 c:\work 폴더를 생성한다.
윈도우 탐색기를 이용해서 폴더를 생성해도 된다.

c:\work 폴더에 프로젝트 폴더를 생성한다. 여기서는 spring4-chap07 폴더를 사용할 것이다.
c:\work\spring4-chap07 폴더를 생성했다면, 다음과 같은 폴더를 각각 생성한다.

	- c:\work\spring4-chap07\src\main\java
	- c:\work\spring4-chap07\src\main\resources
	- c:\work\spring4-chap07\src\main\webapp
	
세 폴더는 각각 자바 소스 코드, XML 등의 자원 파일, 그리고 웹 애플리케이션을 위한 폴더이다.
위 폴더를 모두 만들었다면, 남은 작업은 pom.xml 파일을 생성하는 것이다.
pom.xml 파일은 다음의 설정 정보를 담는다.

	- 의존 모듈
		~ 서블릿, JSP
		~ 스프링 MVC 모듈 및 스프링 MVC가 필요로 하는 모듈
		
	- 웹 테스트를 위한 Jetty 서버 설정
	
이 예제에서 이를 위한 메이븐 설정은 다음과 같다.


	pom.xml		260쪽
	
	
설정 내용은 다음과 같다.

	- 라인 12-29 : 서블릿, JSP, JSTL을 위한 의존 설정
	- 라인 30-34 : 스프링 MVC 실행을 위한 의존 설정
	- 라인 65-75 : 메이븐 웹 프로젝트를 실행하기 위한 Jetty 플러그인 설정(이클립스에서 웹 서버를 실행할 경우 생략해도 됨)
	
[Jetty는 톰캣과 같은 서블릿/JSP 컨테이너로서, Jetty 서버를 이용하면 이클립스에서 별도 서버 설정 없이도 메이븐 웹 프로젝트를 테스트 할 수 있다.]

	(1) 이클립스에 메이븐 웹 프로젝트 임포트
	
이클립스 4.3(Kepler) Java EE Developers 버전부터 이클립스 메이븐 플러그인이 기본으로 설치되어 있다.
이클립스를 실행한 뒤에 다음의 순서대로 메이븐 프로젝트를 임포트하면 된다.

	- 1 File -> Import 메뉴 실행
	- 2 Maven/Existing Maven Projects 선택 후, [Next] 버튼 클릭
	- 3 Root Directory로 c:\work\spring4-chap07 폴더 선택
		a. 잠시 후 프로젝트 목록에 spring4-chap07 메이븐 프로젝트가 표시 됨
	- 4 spring-chap07 메이븐 프로젝트를 선택하고 [Finish] 버튼을 클릭
	- 5 프로젝트 목록에 spring-chap07이 표시됨
	
정상적으로 임포트 했다면, 이클립스에 spring-chap07 프로젝트가 목록에 표시된다.


	1.2	스프링 MVC를 위한 설정을 web.xml에 추가하기
	
다음으로 할 작업은 web.xml 파일에 DispatcherServlet 설정을 추가하는 것이다.
다음은 web.xml의 작성 예이다.


	web.xml		262쪽
	
	
위 설정에서 주요 내용은 아래와 같다.
	
	- 라인 09-19 : DispatcherServlet을 등록한다. DispatcherServlet은 내부적으로 스프링 컨테이너를 생성하는데, 
		contextConfigLocation 초기화 파라미터를 이용해서 컨테이너를 생성할 때 사용할 설정 파일을 지정한다. 지금의 '스프링 MVC 일단 해보기' 예제에서는 
		mvc-quick-start.xml 이라는 파일을 스프링 설정 파일로 사용할 것이다.
		
	- 라인 21-24 : dispatcher 서블릿에 대한 매핑을 '*.do'로 지정한다. 따라서 웹 브라우저 요청 중에서 확장자가 do로 끝나는 모든 요청을 dispatcher 서블릿이 처리하게 된다.
	
	- 라인 79-90 : 요청 파라미터를 UTF-8로 처리하기 위한 필터를 설정한다.
	
DispatcherServlet에 대한 설정은 뒤에서 다시 자세히 살펴보도록 하자.


	1.3	스프링 컨트롤러 구현
	
web.xml의 DispatcherServlet 설정이나 뒤에서 살펴볼 스프링 MVC 설정은 프로젝트 시작 시점에 설정하면 대부분 완료되며, 실제 컨트롤러와 뷰를 구현하는데 많은 시간을 사용한다.
'스프링 MVC 일단 해보기' 예제에서 사용할 컨트롤러 클래스의 구현은 다음과 같다.


	package net.madvirus.spring4.chap07.quickstart;

	import org.springframework.stereotype.Controller;
	import org.springframework.ui.Model;
	import org.springframework.web.bind.annotation.RequestMapping;
	
	@Controller
	public class HelloController {
	
		@RequestMapping("/hello.do")
		public String hello(Model model) {
			model.addAttribute("greeting", "안녕하세요");
			return "hello";
		}
	}
	
	
위 코드의 내용은 다음과 같다.

	- 라인 12 : 클래스가 스프링 MVC 컨트롤러임을 지정
	- 라인 15 : hello() 메소드가 /hello.do로 들어오는 요청을 처리함을 지정
	- 라인 17 : 뷰에 "greeting"이라는 이름으로 "안녕하세요"라은 데이터를 전달
	- 라인 18 : 리턴 값 "hello"를 뷰 이름으로 사용
	
스프링 MVC 컨트롤러는 클라이언트(웹 브라우저)의 요청을 처리하는 기능을 제공한다.
위 코드는 경우 웹 브라우저가 "/hello.do" 주소로 요청을 하면 hello() 메소드를 이용해서 그 요청을 처리한다고 지정했다.

컨트롤러에서 직접 응답 결과를 생성할 수도 있지만, 보통 결과를 보여줄 때 사용할 뷰 이름을 리턴한다.
위 코드에서 "hello"를 리턴했는데, 스프링 MVC는 "hello"에 해당하는 뷰 구현을 찾은 뒤, 해당 뷰를 이용해서 응답 결과를 생성한다.

뷰에서 응답 결과를 생성할 때 데이터가 필요할 수도 있다. 예를 들어, 웹 브라주어가 게시글 목록을 요청한 경우, 뷰는 화면을 생성하기 위해 게시블 목록 데이터가 필요하다.
컨트롤러는 뷰에서 사용할 데이터를 모델(라인 17)에 담아서 전달하며, 뷰에서는 모델에 담긴 데이터를 이용해서 알맞은 응답 결과를 생성하게 된다.


	1.4	JSP를 이용한 뷰 구현
	
스프링 MVC에서 뷰(View)는 응답 결과를 생성해주는 기능을 제공하는데, 스프링은 기본적으로 JSP를 포함하여 벨로시티나 프리마커와 같은 템플릿 엔진을 지원하고 있다.
이 장에서는 JSP를 이용해보도록 하겠다. 예제에서 사용할 JSP 코드는 다음과 같다.


	view/hello.jsp		265쪽
	
	
위 코드는 평범한 JSP 파일이다. 이 코드에서 눈여겨볼 부분은 라인 08이다.
라인 08에서는 ${greeting}을 사용하고 있는데, JSP 파일 자체에서는 greeting을 위한 값을 설정하는 코드가 없다.
이 greeting의 값은 앞서 작성했던 HelloController 클래스의 모델 설정을 통해서 전달된다.


	view/hello.jsp
	
		model.addAttribute("greeting", "안녕하세요");
								│
								│
	hello.jsp		┌───────────┘
					↓
		인사말 : ${greeting}
	

여기서 궁금한 점은 HelloController에서 "hello"를 리턴했는데, 이 값으로 어떻게 WEB-INF/view 디렉토리에 위치한 hello.jsp 파일을 뷰로 사용하느냐 하는 점이다.
이는 스프링 MVC 설정을 통해서 처리된다.


	1.5 스프링 MVC 설정 파일 작성
	
스프링 MVC를 위한 설정 파일을 작성해보자. 스프링이 제공하는 mvc 네임스페이스를 사용해서 설정하며, 이 코드는 다음과 같이 비교적 간단하다.


	mvc-quick-start.xml		266쪽
	
	
라인 11의 <mvc:annotation-driven />은 몇 개의 설정을 한 번에 해주는 코드이다.
실제 이 코드가 무엇을 하는지에 대한 내용은 뒤에서 배울 것이다.

라인 13-17은 뷰 이름을 실제 어떤 뷰와 연결할지 결정하는 ViewResolver를 설정하고 있다.
이 ViewResolver는 JSP를 뷰로 사용하게 되는데, 다음의 방법으로 뷰로 사용할 JSP를 선택한다.

	- prefix + 뷰 이름 + suffix
	
예를 들어, 앞서 작성한 HelloController 클래스의 hello() 메소드는 "hello"를 뷰 이름으로 리턴했는데, 이 경우 다음의 JSP 파일을 뷰로 사용하게 된다.

	- /WEB-INF/view/hello.jsp
	
mvc-quick-start.xml의 라인 19는 커맨드 객체를 빈으로 등록한다. 커맨드로 사용할 클래스는 빈으로 등록해야 한다.


	1.6 실행
	
모두 작성했으므로 이제 실행해볼 차례이다. 다음의 두 가지 실행 방법이 있다.

	- 명령행 프롬프트(터미널)에서 mvn jetty:run 명령어로 Jetty 웹 서버 실행
	- 이클립스의 "Run on Server"로 실행
	
여기서는 첫 번째 방법을 사용할 것이며 두 번째 방법이 궁금한 독자는 서문에 있는 "소스 코드 사용법"을 참조하자.

명령 프롬프트를 열고 프로젝트 폴더로 이동하자. 이 예에서는 c:\work\spring4-chap07 로 이동하면 된다.
그 폴더에서 "mvn jetty:run" 메이븐 명령어를 실행한다.

[기본적으로 세팅되는 포트 번호는 8080이다. 이미 이포트 번호를 이용하고 있어서 충돌이 일어날 시
"mvn -Djetty.port=8001 jetty:run" 로 실행하여 포트 번호를 바꾸면 된다. 나는 8001로 포트를 변경하였다. ]


	\spring4-chap07>mvn jetty:run
	...
	...
	...
	[INFO] Started ServerConnector@7f4701b1{HTTP/1.1}{0.0.0.0:8001}
	[INFO] Started Jetty Server
	[INFO] Starting scanner at interval of 3 seconds.


위 명령을 처음 실행하면 Jetty 서버를 실행하는 데 필요한 모듈을 그 시점에 다운로드 받는다.(네트워크 상황에 따라 오래 걸릴 수도 있다.) 
다운로드가 완료되면 Jetty 서버가 실행되며, Jetty 서버가 성공적으로 실행되면 "Started Jetty Server"가 출력된다.

Jetty 서버가 성공적으로 실행되었으면 웹 브라우저에서 	http://localhost:8001/spring4-chap07/hello.do	URL을 입력해보자.
그럼 다음과 같은 결과를 볼 수 있다.


	인사말: 안녕하세요
	
	
이 결과를 보면 hello.jsp가 응답을 생성한 것을 알 수 있고, HelloController에서 생성한 모델(greeting 값)이 알맞게 뷰에 전달된 것을 알 수 있다.