요청 경로마다 접근 제어를 다르게 해야 한다거나 사용자가 특정 URL을 요청할 때마다 접근 내역을 기록하고 싶다면 어떻게 해야 할까? 이런 기능은 특정 컨트롤러에 종속되기 보다는
여러 컨트롤러에 공통으로 적용되는 기능들이다. 이런 기능을 각 컨트롤러에서 개별적으로 구현하면 중복 코드가 발생하므로, 코드 중복 없이 컨트롤러에 적용하는 방법이 필요하다.

스프링은 이미 AOP를 제공하고 있지만, AOP는 너무 범용적인 방법이다. 스프링 MVC는 여러 컨트롤러에 공통으로 적용되는 기능을 구현하는 방법인 HandlerInterceptor를 제공하고 있으며,
이를 사용하면 스프링 MVC에 맞게 공통 기능을 다수의 URL에 적용할 수 있게 된다.


	11.1	HandlerInterceptor 인터페이스 구현하기
	
o.s.web.servlet.HandlerInterceptor 인터페이스를 사용하면, 다음의 세 가지 시점에 대해 공통 기능을 넣을 수 있다.

	- 컨트롤러(핸들러) 실행 전
	- 컨트롤러(핸들러) 실행 후, 아직 뷰를 실행하기 전
	- 뷰를 실행한 이후
	
세 시점을 처리하기 위해 HandlerInterceptor 인터페이스는 다음과 같이 세 개의 메소드를 정의하고 있다.


	package org.springframework.web.servlet;
	
	import javax.servlet.http.HttpServletRequest;
	import javax.servlet.http.HttpServletResponse;
	
	import org.springframework.web.method.HandlerMethod;
	
	public interface HandlerInterceptor {
	
		boolean preHandle(HttpServletRequest request, HttpServletResponse response,
				Object handler) throws Exception;
				
		void postHandle(
				HttpServletRequest request, HttpServletResponse response, Object handler,
				ModelAndView modelAndView) throws Exception;
				
		void afterCompletion)(
				HttpServletRequest request, HttpServletResponse response, Object handler,
				Exception ex) throws Exception;
	}
	

preHandle() 메소드를 컨트롤러/핸들러 객체를 실행하기 전에 필요한 기능을 구현할 때 사용된다.
handle 파라미터는 웹 요청을 처리할 컨트롤러/핸들러 객체이다. 이 메소드를 사용하면 접근 권한이 없는 경우 컨트롤러를 실행하지 않는다거나, 컨트롤러를 실행하기 전에
컨트롤러에 필요로 하는 정보를 생성하는 등의 작업이 가능하다. preHandle() 메소드의 리턴 타입은 boolean 인데, preHandle() 메소드가 false를 리턴하면
컨트롤러(또는 다음 HandlerInterceptor)를 실행하지 않는다.

postHandle() 메소드는 컨트롤러/핸들러가 정상적으로 실행된 이후에 추가 기능을 구현할 때 사용된다.
만약 컨트롤러가 익셉션을 발생하면 postHandle() 메소드는 실행되지 않는다.

afterCompletion() 메소드는 클라이언트에 뷰를 전송한 뒤에 실행된다. 만약 컨트롤러를 실행하는 과정에서 익셉션이 발생하면,
이 메소드의 네 번째 파라미터로 전달된다. 익셉션이 발생하지 않았다면 네 번째 파라미터는 null이 된다. 따라서, 컨트롤러 실행 이후에 예기치 않게 발생한
익셉션을 로그로 남긴다거나 실행 시간을 기록하는 등의 후처리를 하기에 적합한 메소드이다.

o.s.web.servlet.handler.HandlerInterceptorAdapter 클래스는 HandlerInterceptor 인터페이스를 구현하고 있는데
각 메소드는 아무 기능도 수행하지 않는다. 따라서, HandlerInterceptor 인터페이스의 메소드를 모두 구현할 필요가 없다면,
HandlerInterceptorAdapter 클래스를 상속받은 뒤 필요한 메소드만 재정의하면 된다.

간단하게 웹 요청 처리 시간을 측정하는 HandlerInterceptor를 만들어 보자.


	common/MeasuringInterceptor.java		365쪽
	
	
MeasuringInterceptor 클래스는 preHandle() 메소드에서 현재 시간을 request의 "mi.beginTime" 속성에 보관한다.
그리고 afterCompletion() 메소드는 요청을 처리한 이후에 시간을 구해서(라인 22), preHandle() 메소드에서 구한 시간과의 차이를 출력한다.
즉, 클라이언트의 요청을 처리하기 전과 후의 시간을 구해서 그 차이를 출력함으로써, 요청 처리 시간을 구한다.


	11.2	HandlerInterceptor 설정하기
	
HandlerInterceptor를 구현했다면, 다음으로 할 작업은 웹 요청을 처리할 때 HandlerInterceptor가 적용되도록 설정에 추가하는 것이다.
추가하는 방법은 다음과 같이 간단하다.


	<mvc:interceptor>
		<bean id="measuringInterceptor"
				class="net.madvirus.spring4.chap07.common.MeasuringInterceptor" />
	</mvc:interceptor>
	
	
<mvc:interceptor> 태그는 HandlerInterceptor 설정과 경로 설정을 함께 설정할 때 사용된다. 위 설정의 경우 <mvc:interceptor> 태그 내부에 정의한 빈 객체를 핸들러 인터셉터로 사용하고,
DispatcherServlet이 처리하는 요청에 대해 핸들러 인터셉터를 적용하게 된다.

위 설정에서 MeasuringInterceptor를 핸들러 인터셉터로 등록했는데, 웹 브라우저에서 알맞은 URL을 입력해보면 다음과 같이
MeasuringInterceptor의 afterCompletion() 메소드에서 출력한 메시지가 콘솔에 표시되는 것을 확인할 수 있다.(라인 23에서 출력)


	/spring4-chap07/newevent/step1 실행 시간: 5
	/spring4-chap07/newevent/step2 실행 시간: 22
	/spring4-chap07/event/list 실행 시간 : 3
	
	
자바 기반의 설정을 사용한다면 다음과 같이 WebMvcConfigurer의 addInterceptor() 메소드를 사용하면 된다.


	@Configuration
	@EnableWebMvc
	public class SampleConfig extends WebMvcConfigurerAdapter {
	
		@Override
		public void addInterceptors(InterceptorRegistry registry) {
			registry.addInterceptor(measuringInterceptor());
		}
		
		@Bean
		public MeasuringInterceptor measuringInterceptor() {
			return new MeasuringInterceptor();
		}
		
		
앞서 설정은 DispatcherServlet이 처리하는 모든 요청에 대해 핸들러 인터셉터를 적용하는데, 만약 특정 요청 경로에 대해서만 핸들러 인터셉터를 적용하고 싶다면
다음과 같이 중첩된 <mvc:interceptor> 태그(태그 이름 뒤에 s가 없다)를 사용한다.


	<mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/event/**" />
			<mvc:mapping path="/folders/**" />
			<bean class="net.madvirus.spring4.chap07.common.MeasuringInterceptor" />
		</mvc:interceptor>
	</mvc:interceptor>
	
	
위 설정에서 <mvc:interceptor>은 핸들러 인터셉터를 적용할 요청 경로 패턴을 지정한다.(이 경로는 컨텍스트 경로를 제외한 나머지 경로와 매핑된다.)
<mvc:mapping> 태그로 지정한 경로 패턴에 적용될 핸들러 인터셉터는 <bean> 태그를 이용해서 지정한다.

자바 설정을 사용한다면 다음과 같이 addPathPatterns() 메소드를 이용해서 경로 패턴 목록을 지정해주면 된다.
addPathPatterns() 메소드의 파라미터는 가변 인자이므로 한개 이상 목록을 지정해주면 된다.


	@Configuration
	@EnableWebMvc
	public class SampleConfig extends WebMvcConfigurerAdapter {
	
		@Override
		public void addInterceptors(InterceptorRegistry registry) {
			registry.addInterceptor(measuringInterceptor())
				.addPathPattern("/event/**", "/folders/**");
		}
		
		
	11.3	HandlerInterceptor의 실행 순서
	
한 요청 경로에 대해 두 개 이상의 핸들러 인터셉터를 적용할 수도 있다.
예를 들어, 다음의 세 핸들러 인터셉터가 있다고 하자.

	- MeasuringInterecptor : 실행 시간 측정 (앞서 MeasuringInterceptor.java 에서 구현)
	- AuthInterceptor : 로그인 한 사용자만 접근 허용
	- CommonModelInterceptor : 여러 뷰에서 함께 사용될 모델 설정
	
AuthInterceptor 클래스의 코드는 다음과 같다. preHandle() 메소드는 HttpSession에 "auth" 속성이 존재하지 않으면
403(SC_FORBIDDEN) 응답 코드를 전송하고 false를 리턴한다.


	common/AuthInterceptor.java		368쪽
	
	
CommonModelInterceptor의 구현은 다음과 같이 간단하다.
postHandle() 메소드는 모델 "project"라는 이름으로 "Spring4" 값을 추가한다.


	common/CommonModelInterceptor.java		369쪽
	
	
세 개의 핸들러 인터셉터를 다음과 같이 적용하고 싶다고 하자.

	- 먼저 /acl/로 시작하는 경로에 AuthInterceptor를 적용
	- 그 다음 전체 경로에 대해 MeasuringInterceptor를 적용
	- 세 번째로 /acl, /header, /newevent로 시작하는 경로에 대해 CommonModelInterceptor를 적용
	
위와 같은 순서와 매핑 경로를 이용해서 핸들러 인터셉터를 적용하고 싶다면, 다음의 설정을 사용하면 된다.


	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/acl/**" />
			<bean class="net.madvirus.spring4.chap07.common.AuthInterceptor" />
		</mvc:interceptor>
		<bean class="net.madvirus.spring4.chap07.common.MeasuringInterceptor" />
		<mvc:interceptor>
			<mvc:mapping path="/acl/**" />
			<mvc:mapping path="/header/**" />
			<mvc:mapping path="/newevent/**" />
			<bean class="net.madvirus.spring4.chap07.common.CommonModelInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>
	
	
위 설정을 보면 적용하고 싶은 순서대로 배치한 것을 알 수 있다. 위 설정을 사용하면 /acl/list 요청에 대해 다음과 같은 순서로 인터셉터와 컨트롤러가 실행된다.

	- 1. 핸들러 인터셉터 preHandle() 실행
		A. AuthInterceptor.preHandle()
		B. MeasuringInterceptor.preHandle()
		C. CommonModelInterceptor.preHandle()
		
	- 2. 컨트롤러 실행
	 
	- 3. 핸들러 인터셉터 postHandle() 실행
		A. CommonModelInterceptor.postHandle()
		B. MeasuringInterceptor.postHandle()
		C. AuthInterceptor.postHandle()
		
	- 4. 핸들러 인터셉터 afterCompletion() 실행
		A. CommonModelInterceptor.afterCompletion()
		B. MeasuringInterceptor.afterCompletion()
		C. AuthInterceptor.afterCompletion()
		
이 실행 순서를 보면 preHandle() 메소드는 지정한 순서대로 실행되고, postHandle() 메소드와 afterCompletion() 메소드는 지정한 역순으로 실행되는 것을 알 수 있다.

만약 AuthInterceptor.preHandle() 메소드가 false를 리턴하면 이후 위치의 과정은 모두 실행되지 않게 된다.
즉, 1.A에서 false를 리턴하면 컨트롤러 실행뿐만 아니라 1.B, 1.C 및 3, 4 과정이 모두 실행되지 않는다.

그런데, 1.B의 preHandle()에서 false를 리턴하면 어떻게 될까? 이 경우 순서상 먼저 실행된 AuthInterceptor의 afterCompletion()은 실행된다.
비슷하게 1.C의 preHandle()이 false를 리턴하면, 순서상 먼저 실행된 두 핸들러 인터셉터의 afterCompletion() -4.B와 4.C- 은 실행된다.
preHandle() 메소드에서 false를 리턴하면 컨트롤러는 실행되지 않으므로, 컨트롤러가 정상 실행된 후에 적용되는 postHandle() 메소드는 모두 실행되지 않는다.

자바 코드를 이용한 설정에서도 등록한 순서대로 핸들러 인터셉터가 적용된다.

	@Configuration
	@EnableWebMvc
	public class SampleConfig extends WebMvcConfigurerAdapter {
	
		@Override
		public void addInterceptors(InterceptorRegistry registry) {
			// addInterceptor()를 실행한 순서대로 핸들러 인터셉터를 등록
			registry.addInterceptor(new AuthInterceptor()).addPathPatterns("/acl/**");
			registry.addInterceptor(measuringInterceptor()).addPathPatterns("/**");
			registry.addInterceptor(commonModelInterceptor())
					.addPathPatterns("/acl/**", "/header/**", "/newevent/**");
		}
		
		
특정 경로 패턴에 대해 핸들러 인터셉터를 적용하고 싶지 않다면 <mvc:exclude-mapping path="" /> 태그 또는
excludePathPatterns() 메소드를 이용해서 제외할 경로 패턴을 지정한다.


	-- XML 설정
	<mvc:interceptor>
		<mvc:interecptor>
			<mvc:mapping path="/acl/**" />
			<mvc:exclude-mapping path="/acl/modify" />
			<bean class="net.madvirus.spring4.chap07.common.CommonModelInterceptor" />
		</mvc:interceptor>
	</mvc:interceptor>
	
	-- 자바 설정
	@Override
	public void addInterceptors(InterceptorRegistry registry) {
		registry.addInterceptor(commonModelInterceptor())
				.addPathPatterns("/acl/**", "/header/**", "/newevent/**")
				.excludePathPatterns("/acl/modify");
	}