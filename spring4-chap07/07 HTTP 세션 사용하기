트래픽이 작거나 단일 서버에서 동작하는 웹 어플리케이션의 경우 서블릿의 HttpSession을 이용해서 로그인 상태를 유지하는 경우가 많다.
스프링은 컨트롤러에서 HttpSession을 처리하기 위한 기능을 지원하고 있는데, 이 절에서는 그 방법을 살펴보겠다.


	7.1 HttpSession을 직접 사용하기
	
HttpSession을 사용하는 가장 손쉬운 방법은 HttpSession을 컨트롤러 메소드의 파라미터로 지정하는 것이다.

	
	import javax.servlet.http.HttpSession;
	
	@Controller
	@RequestMapping("/auth/login")
	public class LoginController {
		
		@RequestMapping(method = RequestMethod.POST)
		public String login(@Valid LoginCommand loginCommand, Errors errors,
				HttpSession session) {
			if(errors.hasErrors()) {
				return LOGIN_FROM;
			}
			try {
				Auth auth = authenticator.authenticate(
					loginCommand.getEmail(), loginCommand.getPasswordk=());
				session.setAttribute("auth", auth);
				return "redirect:/index.jsp";
			} catch (AuthenticationException ex) {
				errors.reject("invalidIdOrPassword");
				return LOGIN_FORM;
			}
		}
		...
		
		
HttpSession 타입의 파라미터가 존재하면 스프링 MVC는 HttpSession을 생성해서 파라미터 값으로 전달한다.
기존에 세션이 존재하면 그 세션을 전달하고, 세션이 존재하지 않았으면 새로운 세션을 생성해서 전달한다.

만약 상황에 따라 세션을 생성하고 싶다면, HttpSession을 파라미터로 받으면 안 된다.
대신, 다음 코드처럼 HttpServletRequest를 받아서 상황에 따라 세션을 직접 생성해주어야 한다.


	@RequestMapping(method = RequestMethod.POST)
	public String login(@Valid LoginCommand loginCommand, Errors errors,
			HttpServletRequest request) {
		if(errors.hasErrors()) {
			return LOGIN_FORM;
		}		
		try {
			Auth auth = authenticator.authenticate(
					loginCommand.getEmail(), loginCommand.getPassword());
			HttpSession session = request.getSession();
			session.setAttribute("auth", auth);
			return "redirect:/index.jsp";
		} catch (AuthenticationException ex) {
			errors.reject("invalidIdOrPassword");
			return LOGIN_FORM;
		}
	}
	
	
	7.2 @SessionAttributes 어노테이션을 이용한 모델과 세션 연동
	
여러 화면에 걸쳐서 진행되는 작업을 처리하면, 화면과 화면 사이에 데이터를 공유해야 할 일이 생긴다.
예를 들어, 다음의 3단계를 거쳐서 한 개의 이벤트를 생성하는 화면이 있다고 하자.

	- 1단계 : 이벤트 기본 정보 입력 (이름, 기간 등)
	- 2단계 : 이벤트 참가 가능 대상
	- 3단계 : 내용 확인
	
이벤트 생성 단계의 경우 내용 확인 단계에서 정보 수정을 위해 1단계나 2단계로 돌아갈 수 있어야 한다.
그런데, 다른 단계로 돌아갔을 때 전에 입력한 내용이 입력 폼에 나오지 않고 다시 입력해야 한다면 이벤트 생성 담당자는 매우 불편할 것이다.
이런 불편을 줄이기 위해 다음의 세 가지 방법을 사용할 수 있다.

	- 각 화면마다 공유할 데이터를 위한 hidden 타입의 <input> 태그 사용
	- 임시 데이터를 DB에 보관
	- 세션에 임시 데이터 보관
	
이 중에서 가장 간단한 방법은 세션을 사용하는 것이다. 스프링은 이렇게 임시 용도로 사용될 데이터를 세션에 보관할 때 사용할 수 있는 @SessionAttributes 어노테이션을 제공하고 있다.
이 어노테이션을 이용해서 각 화면 간 모델 데이터를 공유하는 방법은 다음과 같다.

	- 클래스에 @SessionAttributes 를 적용하고, 세션으로 공유할 객체의 모델 이름을 지정한다.
	- 컨트롤러 메소드에서 객체를 모델에 추가한다.
	- 공유한 모델의 사용이 끝나면 SessionStatus를 사용해서 세션에서 객체를 제거한다.
	
세션을 이용해서 특정 객체를 공유하려면, 객체를 세션에 보관할 때 사용할 속성 이름이 필요하다. @SessionAttributes 어노테이션을 사용해서 이 이름을 지정하게 된다.
예를 들어, 아래 코드는 EventCreationController 에서 임시 목적으로 사용될 객체를 세션에 보관할 때 세션 속성의 이름으로 "eventForm"을 사용한다는 것을 뜻한다.


	import org.springframework.web.bind.annotation.SessionAttributes;
	
	@Controller
	@SessionAttributes("eventForm")
	public class EventCreationController {
		...
		
		
@SessionAttributes가 제대로 동작하려면 모델에 같은 이름을 갖는 객체를 추가해야 한다. 보통 첫 번째 단계를 처리하는 컨트롤러 메소드에서 모델에 객체를 추가한다.
예를 들어, 아래 코드처럼 이벤트 생성을 위한 첫 번째 단계를 처리하는 @RequestMapping 메소드에서 모델에 객체를 추가할 수 있다.


	@Controller
	@SessionAttributes("eventForm")
	public class EventCreationController {
	
		@RequestMapping("/newevent/step1")
		public String step1(Model model) {
			model.addAttribute("eventForm", new EventForm());
			return EVENT_CREATION_STEP1;
		}
		
		@RequestMapping(value = "/newevent/step2", method - RequestMethod.POST)
		public String step2(
				@ModelAttribute("eventForm") EventForm formData, BindingResult result) {
			new EventFormStep1Validator().validate(formData, result);
			if(result.hasErrors())
				return EVENT_CREATION_STEP1;
			return EVENT_CREATION_SETP2;
		}
		
		
다음은, step1() 메소드의 결과를 보여주는 뷰 코드의 일부를 표시한 것이다.


	<form:form commandName="eventForm"
			action="/spring4-chap07/newevent/step2">
			
		<label for="name">이벤트 명</label>
		<input type="text" name="name" id="name" value="${eventForm.name}" />
		<form:errors path="name" /> <br/>
		
		<label for="type">타입</label>
		<select name="type" id="type">
			<option value="">선택하세요</option>
			<c:forEach var="type" items="<%= EventType.values() %>">
				<option value="${type}" ${eventForm.type == type ? 'selected' : ''}>${type}</option>
			</c:forEach>
		</select>
		<form:errors path="type" /> <br/>
		...
		<input type="submit" value="다음 단계로" />
	</form:form>
	
	세션 존재 여부 : <%= session.getAttribute("eventForm") != null ? "존재" : "없음" %>
	
	
이 코드의 마지막에 session.getAttribute("eventForm")이 null 인지 여부에 따라 내용을 표시하도록 했는데,
실제 /newevent/step1의 실행 결과를 보면 다음처럼 세션에 객체가 존재하는 것을 확인할 수 있다.


	http://localhost:8001/spring4-chap07/newevent/step1		
	
	
세션에 보관할 객체를 생성하는 또 다른 방법은 @ModelAttribute 메소드를 사용하는 것이다.
다음은 예제 코드이다.


	@Controller
	@SessionAttribute("eventForm")
	public class EventCreationController {
		
		@ModelAttribute("eventForm")
		public EventForm formData() {
			return new EventForm();
		}
		
		@RequestMapping("/newevent/step1")
		public String step1() {
			return EVENT_CREATION_STEP1;
		}
		
		@RequestMapping(value = "/newevent/step2", method = RequestMethod.POST)
		public String step2(
				@ModelAttribute("eventForm") EventForm formData, BindingResult result) {
			new EventFormStep1Validator().validate(formData, result);
			if(result.hasErrors())
				return EVENT_CREATION_STEP1;
			return EVENT_CREATION_STEP2;	
		}
		
		
위 코드처럼 @ModelAttribute가 적용된 메소드에서 모델 객체를 생성하면, @RequestMapping 메소드에서 Model에 객체를 추가할 필요가 없다.
위 코드를 보면 formData()에 @ModelAttribute 메소드가 적용되어 있는데, 이 경우 매번 새로운 EventForm() 객체가 생성되기 때문에 데이터 공유를 위해 세션에 객체를 보관하는 데 문제가 있을 거라
생각할 수도 있을 것이다. 하지만, 스프링 @ModelAttribute가 적용된 모델 객체로 사용한다. 즉, 위 코드에서 세션에 이름이 "eventForm"인 객체가 존재하면,
formData() 메소드를 실행하지 않고 세션의 객체를 모델 객체로 사용한다. 따라서, step1()과 step2() 메소드에서 사용하는 FormData 객체는 동일 객체가 된다.

세션을 이용한 객체 공유가 끝나면 다음 코드처럼 컨트롤러 메소드에서 SessionStatus의 setComplete() 메소드를 호출하면 된다.


	import org.springframework.web.bind.annotation.SessionAttributes;
	import org.springframework.web.bind.support.SessionStatus;
	
	@Controller
	@SessionAttributes("eventForm")
	public class EventCreationController {
		
		@ModelAttribute("eventForm")
		public EventForm formData() {
			return new EventForm();
		}
		...
		@RequestMapping(value = "/newevent/step2", method = RequestMethod.POST)
		public String step2(
				@ModelAttribute("eventForm") EventForm formData, BindingResult result) {
			new EventFormStep1Validator().validate(formData, result);
			if(result.hasErrors())
				return EVENT_CREATION_STEP1;
			return EVENT_CREATION_STEP2;		
		}
		...
		@RequestMapping(value = "/newevent/done", method = RequestMethod.POST)
		public String done(@ModelAttribute("eventForm") EventForm formData,
				SessionStatus sessionStatus) {
			sessionStatus.setComplete();
			return EVENT_CREATION_DONE;		
		}
		
	}
	
	
SessionStatus.setComplete() 메소드를 실행하면 세션에서 객체를 제거한다. 위 코드의 경우 세션에서 "eventForm" 속성을 제거한다.
단, SessionStatus.setComplete()는 세션에서 객체를 제거할 뿐 모델에서 제거하지는 않는다. 따라서, 뷰 코드에서 모델의 값을 사용할 수 있다.
실제로 위 코드의 done() 메소드의 결과를 보여주는 뷰 JSP 코드에서는 다음과 같ㅇ; "eventForm" 모델 객체의 값을 사용할 수 있다.


	<body>
	
	이벤트 생성을 완료했습니다.
	
	<label>이벤트 명</label>: <c:out value="${eventForm.name}" /> <br>
	<label>타입</label>: ${eventForm.type} <br>
	<label>이벤트 기간</label>: 
	...
	<label>적용 회원 등급</label>: 
	${eventForm.target == 'all' ? '모든 회원' : '프리미엄 회원' }
	<br>
	
	세션 존재 여부: <%= session.getAttribute("eventForm") != null ? "존재" : "없음" %>
	
	</body>
	
	
세션에서 객체를 삭제하기 때문에, session.getAttribute("eventForm")은 null을 리턴한다.
실제 위 뷰 코드의 실행 결과는 다음과 같은데, 이 결과를 보면 세션 존재 여부가 '없음'으로 표시된 것을 확인할 수 있다.


	http://localhost:8001/spring4-chap07/newevent/step1 -> done
	
	
[임시 데이터를 보관하기 위해 세션을 사용한다는 것은 사용자마다 세션이 생성된다는 것을 의미한다.
즉, 접속자가 늘어날 수록 세션 객체 개수가 증가하고 이에 따라 세션 객체가 차지하는 메모리 비중이 높아진다.
예를 들어, 포털 사이트처럼 동시에 접속하는 사용자수가 많은 곳에서 세션을 사용하면 세션 객체로 인해 메모리 부족 현상이 발생할 수 있다.
따라서 트래픽이 높을 것으로 예상되는 곳에서 세션을 사용할 때에는 메모리가 부족하지 않을 지 따져봐야 하며, 메모리가 부족할 것으로 예상되면 세션 대신에
데이터베이스나 외부의 캐시 서버 등에 임시 데이터를 보관할 것을 고려해야 한다.]

	