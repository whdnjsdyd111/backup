컨트롤러 메소드를 실행하는 도중에 익셉션이 발생하면 어떻게 될까? 예를 들어, 다음 컨트롤러를 보자.


	@Controller
	public class CalculationController {
		
		@RequestMapping("/cal/divide")
		public String divide(Model model,
				@RequestParam("op1") int op1, @RequestParam("op2") int op2) {
			model.addAttribute("result", op1 / op2);
			return "cal/result";		
		}
	}
	
	
위 코드는 두 개의 파라미터 op1과 op2를 정수 타입으로 전달받고, op1을 op2로 나눈 결과를 "result" 모델로 추가하고 있다.
그런데, 정수 타입을 0으로 나눌 경우 ArithmeticException이 발생하기 때문에, op2 파라미터 값으로 0을 주면 익셉션 결과를 받게 된다.

실제 서비스를 제공하는데 익셉션 화면이 사용자에게 그대로 노출되면 안 될 것이다. 그래서 별도의 에러 화면을 만들어서 제공하게 되는데,
스프링은 에러 처리와 관련된 몇 가지 방법을 제공하고 있다. 이 책에서는 다음의 세 가지 방법을 설명한다.

	- @ExceptionHandler 어노테이션을 이용한 익셉션 처리
	- @ExccptionAdviec 어노테이션을 이용한 공통 익셉션 처리
	- @ResponseStatus 어노테이션을 이용한 익셉션 처리
	

	8.1 @ExceptionHandler를 이용한 익셉션 처리
	
컨트롤러의 @RequestMapping 메소드를 실행한ㄴ 과정에서 익셉션이 발생할 때 직접 그 익셉션을 처리하고 싶다면,
@ExceptionHandler 어노테이션을 사용하면 된다. 다음 코드처럼 익셉션을 처리할 메소드에 @ExceptionHandler 어노테이션을 적용하고,
처리할 익셉션 타입을 @ExceptionHandler 어노테이션의 값으로 지정하면 된다.


	import org.springframework.web.bind.annotation.ExceptionHandler;
	
	@Controller
	public class CalculationController {
	
		@RequestMapping("/cal/divide")
		public String divide(Model model,
				@RequestParam("op1") int op1, @RequestParam("op2") int op2) {
			model.addAttribute("result", op1 / op2);
			return "cal/result";		
		}
		
		@ExceptionHandler(ArithmeticException.class)
		public String handleException() {
			return "error/exception";
		}
	}
	
	
위 코드는 @RequestMapping 메소드 실행 과정에서 ArithmeticException이 발생하면 handleException()을 통해서 익셉션을 처리하게 된다.
@ExceptionHandler가 붙은 메소드는 @RequestMapping 메소드와 유사하게 구현한다.
예를 들어, 위 코드에서 handlerException() 메소드는 "error/exception"를 리턴하는데,
이 경우 에러 처리 결과로 "error/exception" 뷰를 사용하게 된다.

"error/eception" 뷰에 해당하는 JSP 코드가 다음과 같다고 하자.


	<%@ page contentType="text/html; charset=utf-8" %>
	<!DOCTYPE html>
	<html>
	<head>
	<title>에러 발생</title>
	</head>
	<body>
	
	작업 처리 도중 문제가 발생했습니다.
	
	</body>
	</html>
	
	
다시 한번 op2 파라미터에 0을 주어 ArithmeticException을 발생시켜 보자. 이번엔 다음과 같은 응답 화면을 보게 될 것이다.


	http://localhost:8001/spring4-chap07/cal/divide?op1=10&op2=0
	
	
익셉션 타입을 지정하면, 해당 타입을 포함해 하위 타입까지도 처리할 수 있다. 만약 다음과 같이 @ExceptionHandler의 값으로 RuntimeException.class를 설정하면,
RuntimeException 뿐만 아니락 하위 타입인 ArithmeticException까지 처리하게 된다.


	@ExceptionHandler(RuntimeException.class)
	public String handleException() {
		return "error/exception";
	}
	
	
@ExceptionHandler 메소드를 통해서 익셉션을 처리하면 기본적으로 응답 코드가 정상 처리를 뜻하는 200이 된다.
만약 500과 같은 다른 응답 코드를 전송하고 싶다면, @EXceptionHandler 메소드에서 HttpServletResponse를 파라미터로 추가하고 setStatusode() 메소드를 이용해서 
알맞은 응답 코드를 지정하면 된다.


	@ExceptionHandler(ArithmeticException.class)
	public String handleException(HttpServletResponse response) {
		response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
		return "error/exception";
	}
	
	
@ExceptionHandler 메소드는 HttpServletResponse 뿐만 아니라 HttpServletRequest, HttpSession, Model 등 응답 결과를 생성하는데 필요한 타입을 파라미터로
전달받을 수 있다. 또한, ModelAndView를 리턴하는 것도 가능하다.

스프링 MVC는 @ExceptionHandler 메소드로 처리한 익셉션 객체를 JSP 뷰 코드에서 사용할 수 있도록 해준다.
따라서, JSP 코드에서 다음과 같이 exception 기본 객체를 이용해서 익셉션 객체에 접근할 수 있다.


	<%@ page contentType="text/html; charset=utf-8" %>
	<!DOCTYPE html>
	<html>
	<head>
	<title>에러 발생</title>
	</head>
	<body>
	
	작업 처리 도중 문제가 발생했습니다.
	<%= exception %>

	</body>
	</html>
	
	
@ExceptionHandler 메소드에서 익셉션 객체에 접근하고 싶다면 익셉션 타입의 파라미터를 메소드에 추가해주면 된다.


	@ExceptionHandler
	public String handleException(ArithmeticException exception) {
		... // exception을 알맞게 사용
		return "error/exception";
	}
	
	
위 코드는 @ExceptionHandler의 값으로 익셉션 타입을 지정하지 않았는데, 이 경우 파라미터에 있는 익셉션 타입을 이용한다.
따라서, ArithmeticException이 발생하면, 파라미터 중에 ArithmeticException이 포함된 메소드를 이용해서 익셉션을 처리한다.

[스프링 MVC는 컨트롤러에서 익셉션이 발생하면 HandlerExceptionResolver에 처리를 위임한다.
HandlerExceptionResolver에는 여러 종류가 존재하는데, MVC 설정(<mvc:annotation-driven>) 태그나 @EnableWebMvc 어노테이션)을
사용할 경우 내부적으로 ExceptionHandlerExceptionResolver를 등록한다. 이 클래스는 @ExceptionHandler 어노테이션이 적용된 메소드를 이용해서
익셉션을 처리하는 기능을 제공하고 있다.]

MVC 설정을 사용할 경우 다음의 순서대로 HandlerExceptionResolver를 사용하게 된다.

	- 1. ExceptionHandlerExceptionResolver : 발생한 익셉션과 매칭되는 @ExceptionHandler 메소드를 이용해서 익셉션을 처리한다.
	- 2. DefaultHandlerExceptionResolver : 스프링이 발생시키는 익셉션에 대한 처리, 예를 들어, 요청 URL에 매핑되는 컨트롤러가 없을 경우
		NoHandlerFoundException이 발생하는데, 이 경우 DefaultHandlerException는 404 에러 코드를 응답으로 전송한다.
	- 3. ResponseStatusExceptionResolver : 익셉션 타입에 @ResponseStatus 어노테이션이 적용되어 있을 경우,
		@ResponseStatus 어노테이션의 값을 이용해서 응답 코드를 전송한다.
		

	8.2 @ControllerAdvice를 이용한 공통 익셉션 처리
	
컨트롤러 클래스에 @ExceptionHandler 어노테이션을 적용하면 해당 컨트롤러에서 발생한 익셉션만 처리한다.
그런데, 다수의 컨트롤러에서 동일 타입의 익셉션을 발생시킬 수 있고, 이때 익셉션 처리 코드가 동일하다면 어떻게 해야 할까?
각 컨트롤러 클래스마다 익셉션 처리 메소드를 구현하는 것은 불필요한 코드 중복을 발생시킨다.

이렇게 여러 컨트롤러에서 동일한 익셉션을 발생시킬 경우, @ControllerAdvice 어노테이션을 이용해서 익셉션 처리 메소드 중복을 없앨 수 있다.
다음은 @ControllerAdvice 어노테이션의 사용 예이다.


	import org.springframework.web.bind.annotation.ControllerAdvice;
	import org.springframework.web.bind.annotation.ExceptionHandler;
	
	@ControllerAdvice("net.mavirus.spring4.chap07")
	public class CommonExceptionHandler {
		
		@ExceptionHandler(RuntimeException.class)
		public String handleRuntimeException() {
			return "error/commonException";
		}
	}
	
	
@ControllerAdvice 어노테이션이 적용된 클래스는 지정한 범위의 컨트롤러에서 공통으로 사용될 설정을 지정할 수 있다.
위 코드의 경우 "net.madvirus.spring4.chap07" 패키지 및 그 하위 패키지에 속한 컨트롤러 클래스를 위한 공통 기능을 정의하였다.
이 패키지 및 하위 패키지에 속한 컨트롤러에서 RuntimeException이 발생하면 handleRuntimeException() 메소드를 통해서 익셉션을 처리하게 된다.

@ControllerAdvice 적용 클래스가 동작하려면 해당 클래스를 스프링에 빈으로 등록해주어야 한다.


	<bean class="net.madvirus.spring4.chap07.exhandler.CommonExceptionHandler" />
	
	
@ControllerAdvice 클래스에 있는 @ExceptionHandler 메소드와 컨트롤러 클래스에 있는 @ExceptionHandler 메소드 중 우선순위를 갖는 것은
컨트롤러 클래스에 적용된 @ExceptionHandler 클래스이다. 즉, 컨트롤러의 메소드를 실행하는 과정에서 익셉션이 발생하면 다음의 순서로
익셉션을 처리할 @ExceptionHandler 메소드를 찾는다.

	- 1	같은 컨트롤러에 위치한 @ExceptionHandler 메소드 중 해당 익셉션을 처리할 수 있는 메소드를 검색
	- 2 같은 클래스에 위치한 메소드가 익셉션을 처리할 수 없을 경우, @ControllerAdvice 클래스에 위치한 @ExceptionHandler 메소드를 검색
	
@ControllerAdvice 어노테이션은 공통 설정을 적용할 컨트롤러 대상을 지정하기 위해 몇 가지 속성을 제공하는데, 이 속성은 다음과 같다.

	
	속성					타입								설명
	
	value				String[]						공통 설정을 적용할 컨트롤러들이 속하는 기준 패키지
	basePackages
	
	annotations			Class<? extends Annotation>[]	특정 어노테이션이 적용된 컨트롤러 대상
	
	assignableTypes		Class<?>[]						특정 타입 또는 그 하위 타입인 컨트롤러 대상
	
	
	8.3 @ResponseStatus를 이용한 익셉션의 응답 코드 설정
	
@ResponseStatus 어노테이션은 익셉션 자체에 에러 응답 코드를 설정하고 싶을 때 사용한다.
예를 들어, 아래 코드를 보면 fileInfo가 null일 때 NoFileInfoException을 발생시키고 있다.


	@RequestMapping(value="/files/{fileId:[a-zA-Z]\\d{3}}", method=RequestMethod.GET)
	public String fileInfo(@PathVariable String fileId) throws NoFileInfoException {
		FileInfo fileInfo = getFileInfo(fileId);
		if(fileInfo == null) {
			throw new NoFileInfoException();
		}
		...
	}
	
	
익셉션이 발생하면 웹 브라부저에는 다음과 같은 에러 화면이 표시된다.


	http://localhost:8001/spring4-chap07/files/a111		[HTTP Status 500 에러]
	
	
NoFileInfoException의 경우는 FileInfo가 존재하지 않기 때문에 발생한 것이다. 따라서, 에러 코드로 서버 내부 에러를 뜻하는 500 코드 보다 존재하지 않음을 뜻하는
404 코드를 응답으로 전송하면 더 의미에 맞을 것이다. 이럴 때 @ResponseStatus 어노테이션을 사용하면 익셉션 처리를 따로 하지 않고 응답 코드를 변경할 수 있다.
@ResponseStatus 어노테이션은 다음과 같이 익셉션 클래스에 적용한다.


	import org.springframework.http.HttpStatus;
	import org.springframework.web.bind.annotation.ResponseStatus;
	
	@ResponseStatus(HttpStatus.NOT_FOUND)
	public class NoFileInfoException extends Exception {
	}
	
	
@ResponseStatus의 값은 HttpStatus를 사용한다. HttpStatus 열거 타입은 여러 응답 코드를 위한 열거 값을 정의하고 있다.
위 코드의 경우 404에 해당하는 NOT_FOUND를 값으로 주었다.

위와 같이 @ResponseStatus 어노테이션을 사용한 뒤에 다시 NoFileInfoException이 발생되는 요청을 전송하자.
그러면 다음처럼 500 상태 코드가 아닌 404 상태 코드를 응답 결과로 받는 것을 확인할 수 있다.


	http://localhost:8001/spring4-chap07/files/a111		[HTTP Status 404 에러]
	
	
o.s.http.HttpStatus 열거 타입에서 주로 사용되는 값은 다음과 같다. 이 외에 전체 값 목록은 스프링 API 문서를 참고하기 바란다.
(괄호에서 첫 번째는 응답 코드를, 두 번째는 원인 문구이다.)

	- OK(200, "OK"),
	- MOVED_PERMANENTLY(301, "Moved Permanently"),
	- NOT_MIDIFIED(304, "Not Modified"),
	- TEMPORARY_REDIRECT(307, "Temporary Redirect"),
	- BAD_REQUEST(400, "Bad Request"),
	- UNAUTHORIZED(401, "Unauthorized"),
	- PAYMENT_REQUIRED(402, "Payment Required"),
	- FORBIDDEN(403, "Forbidden"),
	- NOT_FOUND(404, "Not Found"),
	- METHOD_NOT_ALLOWED(405, "Method Not Allowed"),
	- NOT_ACCPETABLE(406, "Not Acceptable"),
	- UNSUPPORTED_MEDIA_TYPE(415, "Unsupported Media Type"),
	- TOO_MANY_REQUESTS(429, "Too Many Requests"),
	- INTERNAL_SERVER_ERROR(500, "Internal Server Error"),
	- NOT_IMPLEMENTED(501, "Not Implemented"),
	- SERVICE_UNAVAILABLE(503, "Service Unavailable"),
	
[	서비스/도메인/영속성 영역의 익셉션 코드에서는 @ResponseStatus를 사용하지 말 것

컨트롤러 영역의 익셉션이 아닌 서비스/도메인/영속성 영역의 익셉션에 @ResponseStatus 어노테이션을 적용하지 않도록 하자.
@ResponseStatus 어노테이션은 그 자체가 HTTP 요청/응답 영역인 UI 처리의 의미를 내포하기 때문에, 서비스/도메인/영속성 영역의 코드에
@ResponseStatus 어노테이션을 사용하면 UI 영역에 의존하는 결과를 만든다. 이 경우 UI를 HTTP에서 소켓을 직접 이용하는 방식으로 변경하면 서비스/도메인/영속성 코드도 함께
영향을 받을 가능성이 높아진다. 즉, UI의 변경이 핵심 영역(서비스/도메인 등)의 코드에 영향을 주는 것이다.
이런 상황이 발생하지 않도록, @ResponseStatus 어노테이션은 컨트롤러 영역에서 발생시키는 익셉션 코드에만 사용해야 한다.]