스프링 MVC는 여러 구성 요소가 맞물려 동작하기 때문에, 스프링 MVC를 이용해서  웹 어플리케이션을 개발하려면 적어도 스프링 MVC가 어떤 식으로 동작하는지 이해하고 있어야 한다.
이에 대한 이해가 부족하면 문제를 해결하는 좋은 방법을 찾을 수 없게 된다.

최초에 웹 브라우저에 요청이 들어오면 DispatcherServlet이 요청을 받으며, 다음의 과정을 거쳐 웹 브라우저에 응답을 전송하게 된다.


																4: 실행
		<< spring bean >>					<< spring bean >>	  →		<< spring bean >>
		: HandlerMapping					: HandlerAdapter──────────────── * 컨트롤러
			└───────────────┐				┌──────┘			  ←
		2: 요청 URL과 매칭되는	│				│					5: 결과 리턴
			컨트롤러 검색		│				│
							│		3: 요청	│	6: 컨트롤러 실행 결과를
							│↑		       처리  ↑	│↓	ModelAndView로 변환해서 리턴
							│				│
			1: 요청 전송		│				│
				→			│				│
	웹 브라우저	───────────────: DispatcherServlet
							│				│	7: 컨트롤러의 실행 결과를 
				  		↓	│				│ ↓		보여줄 View 검색
			8: 응답 생성 요청		│				│
						: View			<< spring bean >>
							│			: ViewResolver
						↓	│
			9: 응답 생성	 * JSP
			
			
위에서 HandlerMapping과 같이 << spring bean >> 이 표시된 것은 스프링 빈으로 등록되는 것을 표현한다. (View의 경우는 직접 구현해서 스프링 빈으로 등록하기도 한다.)
* 표시한 부분은 직접 구현해주는 부분이다. 앞서 Hello 예제에서 설정을 제외하고 직접 작성한 코드인 HelloController  클래스와 hello.jsp가 이에 해당한다.

위 그림의 각 구성 요소는 다음과 같은 역할을 수행한다.


	구성 요소					설명
	
	DispatcherServlet		클라이언트의 요청을 전달받는다. 컨트롤러에게 클라이언트의 요청을 전달하고, 컨트롤러가 리턴한 결과값을 View에 전달하여 알맞은 응답을 생성하도록 한다.
	
	HandlerMapping			클라이언트의 요청 URL을 어떤 컨트롤러가 처리할지를 결정한다.
	
	HandlerAdapter			DispatcherServlet의 처리 요청을 변환해서 컨트롤러에게 전달하고, 컨트롤러의 응답 결과를 DispatcherServlet이 요구하는 형식으로 변환한다.
							웹 브라우저 캐시 등의 설정도 담당한다.
	
	컨트롤러(Controller)		클라이언트의 요청을 처리한 뒤, 결과를 리턴한다. 응답 결과에서 보여줄 데이터를 모델에 담아 전달한다.
	
	ModelAndView			컨트롤러가 처리한 결과 정보 및 뷰 선택에 필요한 정보를 담는다.
	
	ViewResolver			컨트롤러의 처리 결과를 보여줄 뷰를 결정한다.
	
	뷰(View)					컨트롤러의 처리 결과 화면을 생성한다. JSP나 Velocity 템플릿 파일 등을 이용해서  클라이언트에 응답 결과를 전송한다.