파일을 업로드해야 할 경우 HTML 폼의 enctype 속성 값으로 "multipart/form-data"를 사용한다.


	<form method="post" enctype="multipart/form-data">
		...
	</form>
	
	
인코딩 타입이 multipart/form-data(이후 멀티파트 형식으로 표현)인 경우, 파라미터나 업로드한 파일 데이터를 사용하려면 전송 데이터를 알맞게 처리해주어야 한다.
스프링은 멀티파트 형식을 지원하고 있기 때문에, 이 기능을 이용하면 멀티파트를 위한 별도 처리 없이 멀티파트 형식으로 전송된 파라미터와 파일 정보를 구할 수 있다.

이 절에서는 스프링이 제공하는 멀티파트 지원 기능을 이용해서 업로드 한 파일을 처리하는 방법을 살펴보도록 하겠다.

	
	2.1 MultipartResolver 설정
	
멀티파트 지원 기능을 사용하려면 먼저 MultipartResolver를 스프링 설정 파일에 등록해주어야 한다.
MultipartResolver는 멀티파트 형식으로 데이터가 전송된 경우, 해당 데이터를 스프링 MVC에서 사용할 수 있도록 변환해주는 역할을 한다. 예를 들어,
@RequestParam 어노테이션을 이용해서 멀티파트로 전송된 파라미터 값과 파일 데이터를 사용할 수 있도록 해준다.

스프링이 기본으로 제공하는 MultipartResolver는 다음의 두 개가 있다.

	- o.s.web.multipart.commons.CommonsMultipartResolver : Commons FileUpload API를 이용해서 멀티파트 데이터를 처리한다.
	- o.s.web.multipart.support.StandardServletMultipartResolver : 서블릿 3.0의 Part를 이용해서 멀티파트 데이터를 처리한다.
	
위 두 MultipartResolver 구현체 중 하나를 스프링 빈으로 등록해주면 된다. 이때 주이할 점은 스프링 빈의 이름은 "multipartResolver"이어야 한다는 점이다.
DispatcherServlet은 이름이 "multipartResolver"인 빈을 사용하기 때문에, 다른 이름을 사용할 경우 MultipartResolver로 사용되지 않는다.

	(1) Commons FileUpload를 이용하기 위한 설정
	
CommonsMultipartResolver는 Commons FileUpload API를 이용해서 Mulitipart를 처리해준다.
CommonsMultipartResolver를 MultipartResolver로 사용하려면 다음과 같이 등록하면 된다.


	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	</bean>
	
	
CommonsMultipartResolver 클래스는 업로드와 관련해서 다음과 같은 프로퍼티를 제공하고 있다.


	프로퍼티				타입		설명
	
	maxUploadSize		long	최대 업로드 가능한 바이트 크기. -1은 제한이 없음을 의미한다. 기본 값은 -1이다.
	
	maxInMemorySize		int		디스크에 임시 파일을 생성하기 전에 메모리에 보관할 수 있는 최대 바이트 크기. 기본 값 10240 바이트이다.
	
	defaultEncoding		String	요청을 파싱할 때 사용할 캐릭터 인코딩. 지정하지 않을 경우, HttpServletRequest.setCharacterEncoding() 메소드로
								지정한 캐릭터 셋이 사용된다. 아무 값도 없을 경우 ISO-8859-1을 사용한다.
								
								
[CommonsMultipartResolve는 Commons FileUpload API를 사용하기 때문에, Commons FileUpload 라이브러리를
클래스패스에 추가해주어야 한다. 메이븐을 사용할 경우 다음과 같은 의존을 추가해주면 된다.

	<dependency>
		<groupId>commons-fileupload</groupId>
		<artifactId>commons-fileupload</artifactId>
		<version>1.3</version>
	</dependency>	]
	
	
	(2) 서블릿 3의 파일 업로드 기능 사용 위한 설정
	
서블릿 3의 파일 업로드 기능을 사용하려면 다음의 설정이 필요하다.

	- DispatcherServlet이 서블릿 3의 Multipart를 처리하도록 설정
	- StandardServletMultipartResolver 클래스를 MultipartResolver로 설정
	
먼저, 서블릿 3의 파일 업로드 기능을 사용하려면 <multipart-config> 태그를 이용해서 DispatcherServlet이 멀티파트를 처리할 수 있도록 설정해주어야 한다.
다음은 설정 예이다.


<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
		http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	version="3.0">

	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>
			org.springframework.web.servlet.DispatcherServlet
		</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/sample.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
		<multipart-config>
			<location>C:\temp</location>
			<max-file-size>-1</max-file-size>
			<max-request-size>-1</max-request-size>
			<file-size-threshold>1024</file-size-threshold>
		</multipart-config>
	</servlet>
	
	
<multipart-config>의 설정 관련 태그를 다음에 설명했다. 각 태그는 필수가 아니며, 필요한 태그만 선택해서 사용하면 된다.


	태그						설명
	
	<location>				업로드 한 파일이 임시로 저장될 위치를 지정한다.
	
	<max-file-size>			업로드 가능한 파일의 최대 크기를 바이트 단위로 지정한다. -1은 제한이 없음을 의미하며 기본값은 -1이다.
	
	<file-size-threshold>	업로드 한 파일 크기가 이 태그의 값보다 크면 <location>에서 지정한 디렉토리에 임시로 파일을 생성한다.
							업로드 파일 크기가 이 태그의 값 이하면 메모리에 파일 데이터를 보관한다. 단위는 바이트이며, 기본 값은 0이다.
	
	<max-request-size>		전체 Multipart 요청 데이터의 최대 제한 크기를 바이트 단위로 지정한다. -1 은 제한이 없음을 의미하며, 기본 값은 -1이다.
	
	
DispatcherServlet이 서블릿 3의 파일 업로드 기능을 사용할 수 있도록 <multipart-config>를 설정했다면,
스프링 설정에서 StandardServletMultipartResolver를 빈으로 등록해주면 된다.


	<bean id="multipartResolver"
		class="org.springframework.web.multipart.support.StandardServletMultipartResolver" />
		
		
파일 최대 크기나 임시 저장 디렉토리 등은 <multipart-config> 태그를 이용해서 설정하기 때문에,
StandardServletMultipartResolver는 별도 프로퍼티 설정을 제공하지 않는다.

서블릿 3 버전부터 자바 클래스를 이용해서 서블릿을 설정하는 방법이 추가됐는데, DispatcherServlet도 마찬가지로 web.xml이 아닌 자바 코드를 이용해서 설정할 수 있게 되었다.
즉, 자바 코드를 이용해서 서블릿 3의 파일 업로드 관련 부분을 설정할 수 있는데, 이에 대한 내용은 10장에서 다루자.

[StandardServletMultipartResolver는 서블릿 3 버전 이상만 지원하므로, 톰캣 6 버전과 같이 서블릿 2.5 또는 그 이하를 지원하는
웹 컨테이너에서는 동작하지 않는다.]


	2.2 업로드한 파일 접근하기
	
DispatcherServlet이 사용하는 스프링 설정에 MultipartResolver를 등록했다면, 이제 업로드한 파일 데이터를 컨트롤러에서 사용할 수 있게 된다.
스프링은 파일 데이터에 접근할 수 있는 다양한 방법을 제공하고 있는데, 각각의 방법을 차례대로 살펴보도록 하자.

	(1) MultipartFile 인터페이스 사용
	
o.s.web.multipart.MultipartFile 인터페이스는 업로드한 파일 정보 및 파일 데이터를 표현하기 위한 용도로 사용되며,
이 인터페이스를 이용해서 업로드한 파일 데이터를 읽을 수 있다. MultipartFile 인터페이스가 제공하는 주요 메소드는 다음과 같다.

	
	메소드							설명
	
	String getName()				파라미터 이름을 구한다.
	
	String getOriginalFilename()	업로드한 파일의 이름을 구한다.
	
	boolean isEmpty()				업로드한 파일이 존재하지 않는 경우 true를 리턴한다.
	
	long getSize()					업로드한 파일의 크기를 구한다.
		
	byte[] getBytes()				업로드한 파일 데이터를 구한다.
		throws IOException
		
	inputStream getInputStrea()		업로드한 파일 데이터를 읽어오는 inputStream을 구한다.
		throws IOException			InputStream의 사용이 끝나면 알맞게 종료해주어야 한다.
		
	void transferTo(File dest)		업로드한 파일 데이터를 지정한 파일에 저장한다.
		throws IOException		

		
업로드한 파일 데이터를 구하는 가장 단순한 방법은 MultipartFile.getByte() 메소드를 이용하는 것이다.
바이트 배열을 구한 뒤에 파일이나 DB 등에 저장하면 된다.


	@RequestMapping(value = "/upload/multipartFile", method = RequestMethod.POST)
	public String uploadByMultipartFile(@RequestParam("f") MultipartFile multipartFile,
			@RequestParam("title") String title, Model model) throws IOException {
		if (!multipartFile.isEmpty()) {
			File file = new File(uploadPath, multipartFile.getOriginalFilename());
			multipartFile.transferTo(file);
			model.addAttribute("title", title);
			model.addAttribute("fileName", multipartFile.getOriginalFilename());
			model.addAttribute("uploadPath", file.getAbsolutePath());
			return "upload/fileUploaded";
		}
		return "upload/noUploadFile";
	}
	
	
MultipartFile.transferTo() 메소드를 사용하면 좀 더 간결하게 업로드한 파일을 지정한 파일에 저장할 수 있다.


	if(multipartFile.isEmpty()) {
		File file = new File(fileName);
		multipartFile.transferTo(file);
		...
	}
	
	
	(2) @RequestParam 어노테이션을 이용한 업로드 파일 접근
	
업로드한 파일을 전달받는 첫 번째 방법은 @RequestParam 어노테이션이 적용된 MultipartFile 타입의 파라미터를 사용하는 것이다.
예를 들어, HTML 입력 폼이 다음과 같이 작성되어 있다고 해보자.


	<form action="multipartFile" method="POST" enctype="multipart/form-data">
		제목: <input type="text" name="title"><br/>
		파일: <input type="file" name="f"><br/>
		<input type="submit" value="MultipartFile 예로 전송" />
	</form>
	
	
위 HTML 코드에서 파일은 f 파라미터를 통해서 전달된다. 이 경우 다음 코드와 같이 @RequestParam 어노테이션과 MultipartFile 타입의 파라미터를 이용해서 업로드 파일 데이터를 전달받을 수 있다.

	
	import org.springframework.web.bind.annotation.RequestParam;
	import org.springframework.web.multipart.MultipartFile;
	
	@Controller
	public class UploadController {
	
		@RequestMapping(value = "/upload/multipartFile", method = RequestMethod.POST)
		public String uploadByMultipartFile(
				@RequestParam("f") MultipartFile multipartFile,
				@RequestParam("title") String title, Model model) throws IOException {
			if (!multipartFile.isEmpty()) {
				File file = new File(uploadPath, multipartFile.getOriginalFilename());
				multipartFile.transferTo(file);
				model.addAttribute("title", title);
				model.addAttribute("fileName", multipartFile.getOriginalFilename());
				model.addAttribute("uploadPath", file.getAbsolutePath());
				return "upload/fileUploaded";
			}
			return "upload/noUploadFile";
		}
	
		@RequestMapping(value = "/upload/multipartHttpServletRequest", method = RequestMethod.POST)
		public String uploadByMultipartHttpServletRequest(
				MultipartHttpServletRequest request, Model model) throws IOException {
			MultipartFile multipartFile = request.getFile("f");
			if (!multipartFile.isEmpty()) {
				File file = new File(uploadPath, multipartFile.getOriginalFilename());
				multipartFile.transferTo(file);
				model.addAttribute("title", request.getParameter("title"));
				model.addAttribute("fileName", multipartFile.getOriginalFilename());
				model.addAttribute("uploadPath", file.getAbsolutePath());
				return "upload/fileUploaded";
			}
			return "upload/noUploadFile";
		}
	

MultipartFile 인터페이스는 스프링에서 업로드한 파일을 표현할 때 사용되는 인터페이스로서, MultipartFile 인터페이스를 이용해서 업로드한 파일의 이름,
실제 데이터, 파일 크기 등을 구할 수 있다. MultipartFile 인터페이스 제공하는 메소드는 이 장의 'MultipartFile 인터페이스 사용' 절에서 살펴보자.

	(3) MultiparHttpServletRequest를 이용한 업로드 파일 접근
	
업로드한 파일을 전달받는 두 번째 방법은 MultiparHttpServletRequest 인터페이스를 사용하는 것이다.


import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

@Controller
public class UploadController {

	@RequestMapping(value = "/upload/multipartHttpServletRequest", method = RequestMethod.POST)
	public String uploadByMultipartHttpServletRequest(
			MultipartHttpServletRequest request, Model model) throws IOException {
		MultipartFile multipartFile = request.getFile("f");
		if (!multipartFile.isEmpty()) {
			File file = new File(uploadPath, multipartFile.getOriginalFilename());
			multipartFile.transferTo(file);
			model.addAttribute("title", request.getParameter("title"));
			model.addAttribute("fileName", multipartFile.getOriginalFilename());
			model.addAttribute("uploadPath", file.getAbsolutePath());
			return "upload/fileUploaded";
		}
		return "upload/noUploadFile";
	}
	
	
MultipartHttpServletRequest 인터페이스는 스프링이 제공하는 인터페이스로서, 멀티파트 요청이 들어올 때 내부적으로 원본 HttpServletRequest 대신 사용되는 인터페이스이다.
MultipartHttpServletRequest 인터페이스는 실제로는 어떤 메소드도 선언하고 있지 않으며, 다음과 같이 HttpServletRequest 인터페이스와
MultipartReqeust 인터페이스를 상속받고 있다.


	<< interface >>				<< interface >>
	HttpServletRequest			MultipartRequest
			↑					↑
				<< interface >>
			MultipartHttpServletRequest
			
			
MultipartHttpServletRequest 인터페이스는 javax.servlet.HttpServletRequest 인터페이스를 상속받기 때문에 웹 요청 정보를 구하기 위한
getParameter()나 getHeader()와 같은 메소드를 사용할 수 있으며, 추가로 MultipartRequest 인터페이스가 제공하는 멀티파트 관련 메소드를 사용할 수 있다.

MultipartRequest 인터페이스가 제공하는 업로드 파일 관련 주요 메소드는 다음과 같다.


	메소드									설명
	
	Iterator<String> getFileNames()			업로드 된 파일들의 파라미터 이름 목록을 제공하는 Iterator를 구한다.
	
	MultipartFile getFile(String name)		파라미터 이름이 name인 업로드 파일 정보를 구한다.
	
	List<MultiFile> getFiles(String name)	파라미터 이름이 name인 업로드 파일 정보 목록을 구한다.
	
	Map<String, MultipartFile> getFileMap()	파라미터 이름이 키로 파라미터에 해당하는 파일 정보 값으로 하는 Map을 구한다.
	
	
	(4) 커맨드 객체를 통한 업로드 파일 접근
	
커맨드 객체를 이용해도 업로드한 파일을 전달받을 수 있다. 단지 커맨드 클래스에 파라미터와 동일한 이름의 MultipartFile 타입 프로퍼티를 추가해주기만 하면 된다.
예를 들어, 업로드 파일의 파라미터 이름이 "repost"인 경우, 다음과 같이 "report" 프로퍼티를 커맨드 클래스에 추가해주면 된다.


	import org.springframework.web.multipart.MultipartFile;
	
	public class ReportCommand {
		
		private String studentNumber;
		private MultipartFile report;
		
		public String getStudentNumber() {
			return studentNumber;
		}
		
		public void setStudentNumber(String studentNumber) {
			this.studentNumber = studentNumber;
		}
		
		public MultipartFile getReport() {
			return report;
		}
		
		public void setReport(MultipartFile report) {
			this.report = report;
		}
	}
	
	
위 코드와 같이 MultipartFile 타입의 프로퍼티를 커맨드 클래스에 추가해주었다면, 업로드 파일 정보를 커맨드 객체를 통해서 전달받을 수 있게 된다.


	@Controller
	public class ReportSubmissionController {
		...
		@RequestMapping(
			value = "/report/submitReport3.do", method = RequestMethod.POST)
		public String submitReport3(ReportCommand reportCommand) {
			MultipartFile reportFile = reportCommand.getReport();
			saveFile(reportFile);
			...
		}
		
		
	(5) 서블릿 3의 part 사용하기
	
서블릿 3의 파일 업로드 기능을 사용했다면, 다음과 같이 서블릿 3에 추가된 javax.servlet.http.Part 타입을 이용해서 업로드한 파일을 처리할 수 있다.


	@RequestMapping(value = "/report/submitReport4.do", method = RequestMethod.POST)
	public String submitReport4(
			@RequestParam("studentNumber") String studentNumber,
			@RequestParam("report") Part report) {
		String fileName = getFileName(report);
		InputStream is = null;
		try {
			is = report.getInputStream();
			...
		} catch (IOException e) {
			...
		} finally {
			if(is != null)
				try { is.close(); } catch (IOException e) {}
		}
		return "report/submissionComplete";
	}
	
	private String getFileName(Part part) {
		for(String cd : part.getHeader("Content-Disposition").split(";")) {
			if(cd.trim().startsWith("filename")) {
				return cd.substring(cd.indexOf('=') + 1).trim()
					.replace("\", "");
				
			}
		}
		return null;
	}