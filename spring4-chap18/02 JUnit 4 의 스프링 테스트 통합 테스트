스프링 컨테이너를 생성하고, 컨테이너가 생성한 빈이 제대로 동작하는지 테스트하고 싶다며고 하자. 스프링의 테스트 지원 기능을 사용하지 않는다면 다음과 같은 코드를 사용해야 할 것이다.


	public class CalculatorBeanTest {
	
		private Calculator calculator;
	
		@Before
		public void setup() {
			GenericXmlApplicationContext ctx = new GenericXmlApplicationContext(
					"classpath:/springconf.xml");
			calculator = ctx.getBean(Calculator.class);
		}
	
		@Test
		public void sum() {
			assertThat(calculator.sum(1, 2), equalTo(3L));
		}
	}
	
	
위 코드는 GenericXmlApplicationContext 클래스를 이용해서 직접 컨테이너를 생성하고 있다. 컨테이너로부터  특정 빈 객체를 구하고, 이 빈 객체를 이용해서 테스트 메소드를 작성했다.

스프링의 테스트 지원 기능을 사용하면 위 코드를 다음과 같이 작성할 수 있다.


	@RunWith(SpringJUnit4ClassRunner.class)
	@ContextConfiguration("classpath:/springconf.xml")
	public class UseXmlConfTest {
	
		@Autowired
		private Calculator calculator;
	
		@Test
		public void sum() {
			assertThat(calculator.sum(1, 2), equalTo(3L));
		}
	}
	
	
앞서 컨테이너를 직접 생성했던 테스트 코드와 비교해보자. 위 코드는 컨테이너 객체를 생성하고 컨테이너로부터 테스트 대상 빈 객체를 구하는 코드가 없다.
대신, @ContextConfiguration 어노테이션을 이용해서 컨테이너를 생성할 때 사용할 스프링 설정 파일을 지정하고, @Autowired 어노테이션을 이용해서 테스트 대상 빈 객체를 지정했다.

@ContextConfiguration 어노테이션을 보면 이 테스트 클래스가 스프링 컨테이너의 빈을 이용해서 테스트 한다는 것과 컨테이너 생성을 위해 어떤 설정을 사용하는지 알 수 있다.
또한, @Autowired나 @Resource 등 자동 주입을 위한 어노테이션이 적용된 필드를 통해 테스트 대상이 되는 빈 객체가 무엇인지 쉽게 유추할 수 있게 된다.

	
	2.1 스프링 테스트 지원 기능 기본 사용
	
스프링의 테스트 지원 기능을 이용해서 컨테이너를 생성하고 빈 객체를 구하려면 다음과 같이 테스트 코드를 작성해야 한다.

	- SpringJUnit4ClassRunner를 테스트 실행기로 지정
	- @ContextConfiguration 어노테이션으로 설정 정보 지정
	- 자동 주입 어노테이션을 이용해서 테스트에서 사용할 빈 객체 필드로 보관
	
다음 코드는 스프링을 이용해서 테스트 코드를 작성할 때 사용되는 전형적인 코드 구성을 보여주고 있다.


import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("classpath:/springconf.xml")
public class UseXmlConfTest {

	@Autowired
	private Calculator calculator;

	
사용할 XML 파일이 두 개 이상이라면 다음과 같이 배열로 설정 파일 목록을 전달한다.

	
	@RunWith(SpringJUnit4ClassRunner.class)
	@ContextConfiguration({"classpath:/springconf.xml", "spring-app"})
	public class UseXmlConfTest {


locations 속성을 이용해서 XML 설정 파일의 경로를 지정할 수도 있다.


	@RunWith(SpringJUnit4ClassRunner.class)
	@ContextConfiguration(locations = {"classpath:/springconf.xml", "spring-app"})
	public class UseXmlConfTest {
	
	
@Configuration 어노테이션을 이용한 자바 코드를 설정으로 사용한다면, classes 속성 값으로 설정 클래스 목록을 전달하면 된다.


	@RunWith(SpringJUnit4ClassRunner.class)
	@ContextConfiguration(classes = SpringConf.class)
	public class UseJavaConfTest {
	
	
SpringJUnit4ClassRunner 클래스는 JUnit의 Runner를 구현한 클래스로서, 이 클래스는 @ContextConfiguration에 지정한 설정 정보를 이용해서 스프링 컨테이너를 생성한다.
그리고, @Autowired 등 자동 주입 기능을 이용해서 컨테이너가 생성한 빈 객체를 테스트 클래스의 필드에 할당해준다. 따라서, 테스트 코드에서 사용할 스프링 빈 객체는 자동 주입 어노테이션을 이용해서
필드로 선언하면 된다.


	@RunWith(SpringJUnit4ClassRunner.class)
	@ContextConfiguration(classes = SpringConf.class)
	public class UseJavaConfTest {
	
		@Autowired	// 테스트 코드에서 사용되는 스프링 빈 객체
		private Calculator calculator;
		
		@Test
		public void sum() {
			long value = calculator.sum(1L, 2L);
			assertThat(value, equalTo(3L));
		}
		
		
스프링 MVC를 위한 설정을 이용해서 테스트 코드를 작성하려면, @WebAppConfiguration 어노테이션을 추가로 적용한다.


	import org.springframework.test.context.ContextConfiguration;
	import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
	import org.springframework.text.context.web.WebAppConfiguration;
	
	@RunWith(SpringJUnit4ClassRunner.class)
	@ContextConfiguration({"classpath:/springconf.xml", "classpath:/spring-mvc.xml"})
	public class UseXmlConfTest {
	
		@Autowired
		private Calculator calculator;

		
@WebAppConfiguration 어노테이션을 사용하면, 웹을 위한 WebApplicationContext 타입의 컨테이너를 생성한다.
이때, WebApplicationContext가 사용하는 웹 어플리케이션의 기준 경로는 "src/main/webapp"로, 웹 어플리케이션 경로를 기준으로 자원을 구하는 코드는 src/main/webapp 디렉토리를 기준으로
자원을 찾는다. 만약 웹 어플리케이션 디렉토리 경로를 바꾸고 싶다면 @WebAppConfiguration 어노테이션에 경로 값을 지정하면 된다.


	@RunWith(SpringJUnit4ClassRunner.class)
	@ContextConfiguration({"classpath:/springconf.xml", "classpath:/spring-mvc.xml"})
	@WebAppConfiguration("src/webapp")
	public class UseXmlConfTest {
	
		@Autowired
		private Calculator calculator;

		
@ContextConfiguration 어노테이션에 어떤 값도 지정하지 않으면, 테스트 클래스와 같은 패키지에 위치한 "테스트클래스-context.xml" 파일을 설정 파일로 사용한다.


	package net.madvirus.spring4.chap18;
	
	@RunWith(SpringJUnit4ClassRunner.class)
	// classpath:/net/madvirus/spring4/chap18/UseDefaultConfigXmlTest-context.xml 사용
	@ContextConfiguration
	public class UseDefaultConfigXmlTest {
		...
		
		
@ContextConfiguration 어노테이션에 값을 지정하지 않고 클래스 내부에 중첩 클래스로 @Configuration 적용 클래스가 존재하면,
해당 클래스를 설정으로 사용한다.


	@RunWith(SpringJUnit4ClassRunner.class)
	// 중첩 클래스인 Config를 설정 클래스로 사용
	@ContextConfiguration
	public class UseInnserConfClassTest {
	
		@Resource(name = "calculator3")
		private Calculator calculator;
	
		@Test
		public void sum() {
			assertThat(calculator.sum(1, 2), equalTo(3L));
		}
	
		@Configuration
		public static class Config {
			@Bean
			public Calculator calculator3() {
				return new Calculator();
			}
	
		}
	}
	
	
	2.2 설정 재사용
	
스프링 테스트 지원 기능을 이용해서 테스트 코드를 작성하다 보면, 다음과 같이 동일한 설정을 사용하는 테스트 클래스가 생기곤 한다.


	// 첫 번째 테스트 클래스
	@RunWith(SpringJUnit4ClassRunner.class)
	@ContextConfiguration({"classpath:/springconf.xml", "classpath:/spring-mvc.xml"})
	@WebAppConfiguration
	public class UseXmlConfTest {
	
		@Autowired
		private Calculator calculator;
		
		
	// 두 번째 테스트 클래스 : 스프링 컨테이너 관련 설정이 동일하다.
	@RunWith(SpringJUnit4ClassRunner.class)
	@ContextConfiguration({"classpath:/springconf.xml", "classpath:/spring-mvc.xml"})
	@WebAppConfiguration
	public class ContainerXmlConfTest {
	
		@Autowired
		private ApplicationContext context;
		
		
동일한 설정 코드가 중복해서 출현하는데, 스프링은 이런 테스트 코드 설정의 중복을 없앨 수 있는 두 가지 방법을 제공하고 있다. 
첫 번째 방법은 스프링 4 버전부터 지원하기 시작한 메타 어노테이션을 사용하는 것이다.

메타 어노테이션은 어노테이션 설정을 묶어 놓은 또 다른 어노테이션이다. 예를 들어, 다음은 앞서 스프링 테스트 설정 어노테이션 설정을 묶어 놓은 메타 어노테이션을 보여주고 있다.


	import java.lang.annotation.ElementType;
	import java.lang.annotation.Retention;
	import java.lang.annotation.RetentionPolicy;
	import java.lang.annotation.Target;
	
	import org.springframework.test.context.ContextConfiguration;
	import org.springframework.test.context.web.WebAppConfiguration;
	
	@ContextConfiguration({"classpath:/springconf.xml", "classpath:/spring-mvc.xml"})
	@WebAppConfiguration
	@Retention(RetentionPolicy.RUNTIME)
	@Target(ElementType.TYPE)
	public @interface SpringTestConfig {
	}
	
	
테스트를 실행할 클래스는 동일한 테스트 설정 코드를 중복해서 작성할 필요 없이, 이 클래스를 상속받아 구현하면 된다.


	public class ReuseParentConfTest extends AbstractCommonConfTest {
		
		@Autowired
		private ApplicationContext context;
		
		@Test
		public void beanExists() {
			assertThat(context.containsBean("calculator"), equalTo(true));
		}
	}
	
	
만약 상속받은 설정 정보 외에 설정 정보를 추가하고 싶다면, 다음과 같이 @ContextConfiguration 어노테이션에 추가할 정보를 지정하면 된다.


	@ContextConfiguration("classpath:/springconf2.xml")
	public class ReuseParentConfTest extends AbstractCommonConfTest {
		
		@Autowired
		private ApplicationContext context;
		
		@Resource(name = "systemLogger")
		private SystemLogger logger;
		
		@Test
		public void logger() throws UnsupportedEncodingException {
			logger.log("test");
			assertThat(out.toString("utf-8").trim(), equalTo("test"));
		}
	
	
AbstractCommonConfTest가 사용하는 설정이 {"classpath:/springconf.xml", "classpath:/spring-mvc.xml"} 이었으므로, 위 코드가 스프링 컨테이너를 생성할 때
사용한 설정은 {"classpath:/springconf.xml", "classpath:/spring-mvc.xml", "classpath:/springconf2.xml"}이 된다.

상위 클래스의 설정 목록(@ContextConfiguration 어노테이션의 value/locations 속성이나 classes 속성)을 사용하지 않으려면 다음과 같이
inheritLocations 속성을 false로 지정한다.


	// 상위 클래스에서 지정한 설정 목록은 사용하지 않음
	// 즉, 설정 파일로 "spring2.xml" 만 사용
	@ContextConfiguration(value="classpath:/springconf2.xml", inheritLocations=false)
	public class OverrideParentConfTest extends AbstractCommonConfTest {
	
	
	2.3	프로필 선택
	
테스트에서 사용하는 설정이 여러 프로필 설정을 포함하고 있다면, 다음과 같이 @ActiveProfiles 어노테이션을 이용해서 테스트 코드에서 사용할 프로필을 선택할 수 있다.


	import org.springframework.test.context.ActiveProfiles;
	
	@RunWith(SpringJUnit4ClassRunner.class)
	@ContextConfiguration({"classpath:embded-db.xml", "classpath:datasource.xml"})
	@ActiveProfiles({"dev", "local"})
	public class ChangePasswordTest {
		...
	}
	
	
@ActiveProfiles 어노테이션도 @ContextConfiguration 어노테이션과 마찬가지로 상위 클래스의 설정을 상속받게 되며, 
하위 클래스에서 사용할 프로필을 추가할 수 있다.

상위 클래스에 지정한 @ActiveProfiles의 설정을 사용하고 싶지 않다면 inheritProfiles 속성을 false로 지정한다.


	2.4 컨텍스트 리로딩 처리
	
JUnit은 각 테스트 메소드를 실행할 때마다 테스트 클래스의 객체를 생성한다.
예를 들어, 다음과 같은 코드를 보자.


	public class SomeTest {
		@Test public void testA() {...}
		@Test public void testB() {...}
		@Test public void testC() {...}
	}
	
	
JUnit은 testA(), testB(), testC() 메소드를 실행할 때마다 매번 SomeTest 클래스의 객체를 생성해서 실행한다.
그렇다면 다음 테스트의 경우 스프링 컨텍스트는 몇 개 생성될까?


	@RunWith(SpringJUnit4ClassRunner.class)
	@ContextConfiguration("classpath:/springconf.xml")
	public class UseXmlConfTest {
		@Autowired
		private Calculator calculator;
	
		@Test
		public void sum() {
			assertThat(calculator.sum(1, 2), equalTo(3L));
		}
		
		@Test
		public void sum1() {
			assertThat(calculator.sum(3, 4), equalTo(7L));
		}
	
		@Test
		public void sum2() {
			assertThat(calculator.sum(5, 6), equalTo(11L));
		}
		
	}
	
	
sum(), sum1(), sum2() 메소드를 실행할 때마다 UseXmlConfTest 객체를 생성하므로 스프링 컨텍스트도 3개 생성될 거라 생각하기 쉽지만,
실제로 생성되는 스프링 컨텍스트의 개수는 한 개다. 통합 테스트를 진행하다 보면 스프링 컨텍스트를 초기화하는 시간이 길어지기 때문에, 테스트 메소드마다 스프링 컨텍스트를 생성하면 그 만큼 테스트 실행 시간이 증가하게 된다.
이런 이유로 SpringJUnit4ClassRunner는 스프링 컨텍스트를 한 번만 생성하고 각 테스트 메소드마다 스프링 컨텍스트를 재사용한다.

테스트 메소드 실행 후, 컨텍스트를 다시 로딩하도록 만들려면, @DirtiesContext 어노테이션을 사용한다.
예를 들어, 아래 코드에서 makeContextDirty() 테스트 메소드에 @DirtiesContext 어노테이션을 적용했는데,
이 경우 makeContextDirty() 테스트 메소드 실행 후 다른 테스트 메소드를 실행하기 전에 스프링 컨텍스트를 리로딩해서 초기 상태로 되돌린다.
따라서 makeContextDirty() 테스트 메소드 이후에 실행되는 테스트 메소드는 초기화된 컨텍스트를 이용하게 된다.


	import org.springframework.test.annotation.DirtiesContext;
	
	@RunWith(SpringJUnit4ClassRunner.class)
	@ContextConfiguration
	public class SomeTest {
		...
		
		@DirtiesContext	// 메소드 실행 후, 다음 테스트 실행 전에 컨텍스트 초기화
		@Test
		public void makeContextDirty() {
			...
		}
		
		...
		
		@Test	// 초기화된 컨텍스트를 이용해서 실행
		public void runWithNonDirtyContext() {
			...
		}
	}
	
	
특정 테스트 메소드가 아닌 각 테스트 메소드를 실행할 때마다 초기화를 하고 싶다면, 다음과 같이 클래스에 @DirtiesContext를 적용하면 된다. 


	import org.springframework.test.annotation.DirtiesContext;
	import org.springframework.test.annotation.DirtiesContext.ClassMode;
	
	@RunWith(SpringJUnit4ClassRunner.class)
	@ContextConfiguration("classpath:/springconf.xml")
	@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)
	public class UseXmlConfTest {
		...
	}
	
	
위 코드에서 classMode 속성의 값으로 AFTER_EACH_TEST_METHOD를 지정했는데,
이 경우 각 테스트 메소드 실행 후 다음 테스트 메소드를 실행하기 전에 컨텍스트를 초기화한다.

@DirtiesContext 어노테이션의 classMode 속성 기본 값은 AFTER_CLASS다.
이는 테스트 클래스의 모든 테스트 메소드 실행을 마친 후에 다음 테스트 클래스를 실행하기 전에 컨텍스트를 리로딩한다는 것을 의미한다.
그럼, 여기서 왜 클래스의 테스트 메소드를 다 실행한 뒤에 컨텍스트를 리로딩하는지 궁금할 것이다. 그 이유는 스프링 컨텍스트를 서로 다른 테스트 클래스를 실행할 때에도
공유하기 때문이다. 예를 들어, 다음 코드를 보자.


	@RunWith(SpringJUnit4ClassRunner.class)
	@ContextConfiguration(classes = SpringConf.class)
	public class ConfTest1 {
		...
	}
	
	@RunWith(SpringJUnit4ClassRunner.class)
	@ContextConfiguration(classes = SpringConf.class)
	public class ConfTest2 {
		...
	}
	
	
여기서 ConfTest1과 ConfTest2는 같은 설정을 사용하고 있다. 이때 이 두 테스트 클래스를 한 프로세스에서 실행하는데 ConfTest1를 먼더 테스트 하고
그 다음 ConfTest2를 테스트 한다고 해보자. 이 경우 ConfTest1을 테스트할 때 생성된 스프링 컨텍스트가 ConfTest2를 테스트할 때 그대로 사용된다.
즉, 스프링 컨텍스트가 메모리에 캐시되어 같은 설정을 사용하는 테스트 클래스 간에 공유되는 것이다. 이런 이유로 한 테스트를 완료하고 같은 설정을 사용하는
다른 테스트를 시작하기 전에 컨테이너를 초기화하고 싶다면, 클래스에 @DirtiesContext 어노테이션을 적용해주어야 한다.


	2.5 테스트 코드의 트랜잭션 처리 지정
	
DB 연동에 포함한 통합 테스트를 실행하면, 테스트 결과로 DB의 데이터 값이 변경될 수 있는데, 테스트 실행 후 DB 상태가 변경되면, 다음에 다시 테스트를 실행할 때
테스트가 실패할 수 있다. 예를 들어, 다음 코드를 보자. 이 코드는 특정 DAO에 대한 테스트를 실행한다.


	@RunWith(SpringJUnit4ClassRunner.class)
	@ContextConfiguration("classpath:/applicationContext.xml")
	public class MessageDaoIntTest {
	
		@Autowired
		private MessageDao messageDao;
	
		@Test
		public void counts() {
			assertThat(messageDao.counts(), equalTo(22));
		}
	
		@Transactional
		@Test
		public void insert() {
			Message message = new Message();
			message.setName("bkchoi");
			message.setMessage("message");
			message.setCreationTime(new Date());
			int newMesageId = messageDao.insert(message);
			assertThat(newMesageId, greaterThan(0));
		}
	
	}
	
	
먼저 작성한 테스트 메소드는 counts() 였고, 그 시점에 행의 개수가 22개 였기 때문에, 테스트를 통과시키기 위해 숫자 22를 사용해서 테스트를 검증했다.
그리고, 그 다음에 insert() 테스트 메소드를 작성해서 insert가 제대로 동작하는지 확인했다. 여기서 문제는 insert() 메소드를 실행하고 나면
행의 개수가 바뀌기 때문에 더 이상 counts() 테스트 메소드가 성공하지 않는다는 점이다. 그렇다고 counts() 테스트를 통과시키기 위해 매번
equalTo()의 값을 22, 23, 24 등으로 바꿀 수도 없는 노릇이다.

이럴 땐 스프링 테스트의 트랜잭션 롤백 기능을 사용하면 도움이 된다. 스프링 테스트 클래스에 @TransactionConfiguration 어노테이션과 @Transactional 어노테이션을
함께 적용하면 테스트 메소드를 트랜잭션 범위에서 실행한 뒤 트랜잭션을 롤백한다. 다음은 이 두 어노테이션을 함께 적용한 코드의 작성 예를 보여주고 있다.


	import org.springframework.test.context.transaction.TransactionConfiguration;
	import org.springframework.transaction.annotation.Transactional;
	
	@RunWith(SpringJUnit4ClassRunner.class)
	@ContextConfiguration("classpath:/applicationContext.xml")
	@TransactionConfiguration
	@Transactional
	public class MessageDaoIntTest {
	
		@Autowired
		private MessageDao messageDao;
	
		@Test
		public void counts() {
			assertThat(messageDao.counts(), equalTo(22));
		}
	
		@Transactional
		@Test
		public void insert() {
			Message message = new Message();
			message.setName("bkchoi");
			message.setMessage("message");
			message.setCreationTime(new Date());
			int newMesageId = messageDao.insert(message);
			assertThat(newMesageId, greaterThan(0));
		}
	
	}
	
	
이 테스트 코드를 실행하면 counts() 테스트 메소드와 insert() 테스트 메소드는 각각 트랜잭션 범위 내에서 실행되며, 각 테스트 메소드 실행이 끝나면 스프링 테스트는 트랜잭션을 롤백한다.
즉, insert() 테스트 메소드에서 DB 테이블에 한 개 행을 추가하더라도 롤백되기 때문에 결과적으로 행이 추가되지 않는다.
따라서, 매번 위 테스트를 실행해도 테이블의 행 개수가 변하지 않기 때문에, counts() 테스트 메소드는 실패하지 않는다.

[트랜잭션 관련 예제 프로젝트는 /mvnprj/spring4-chap18-t	에 위치해 있다.]

@TransactionConfiguration 어노테이션은 PlatformTransactionManager를 이용해서 트랜잭션을 처리한다.
따라서 최소한 한 개의 PlatformTransactionManager가 스프링 설정에 존재해야 한다. 스프링 설정에 두 개 이상의 PlatformTransactionManager가 존재할 경우,
이름이 "transactionManager"인 빈을 트랜잭션 관리자로 사용한다. 만약 트랜잭션 관리자가 두 개 이상인데 이름이 "transactionManager"인 빈이
존재하지 않는다면 다음처럼 transactionManager 속성을 이용해서 트랜잭션 관리자로 사용할 빈 이름을 지정해야 한다.


	@RunWith(SpringJUnit4ClassRunner.class)
	@ContextConfiguration("classpath:/applicationContext.xml")
	@TransactionConfiguration(transactionManager="txManager")
	@Transactional
	public class MessageDaoIntTest {
	
	
@TransactionConfiguration 어노테이션을 사용하면 기본적으로 테스트 메소드 실행 후 트랜잭션을 롤백한다.
만약 전체 테스트 메소드가 아닌 특정 테스트 메소드에 대해서만 트랜잭션을 롤백하고 싶다면 다음과 같이 defaultRollback 속성을 false로 지정하고,
트랜잭션을 롤백하고 싶은 테스트 메소드에 @Rollback(true)를 적용하면 된다.


	import org.springframework.transaction.annotation.Rollback;
	import org.springframework.test.context.transaction.TransactionConfiguration;
	
	@RunWith(SpringJUnit4ClassRunner.class)
	@ContextConfiguration("classpath:/applicationContext.xml")
	@TransactionConfiguration(defaultRollback=false)
	@Transactional
	public class MessageDaoIntTest {
	
		...
		
		@Rollback(true)
		@Test
		public void insert() {
			Message message = new Message();
			message.setName("bkchoi");
			message.setMessage("message");
			message.setCreationTime(new Date());
			int newMesageId = messageDao.insert(message);
			assertThat(newMesageId, greaterThan(0));
		}
	
	}
	
	
@Rollback 어노테이션의 값을 false로 지정하면 트랜잭션을 롤백하지 않고 커밋한다.

전체 테스트 메소드가 아닌 특정 메소드만 트랜잭션 범위 내에서 실행하고 싶다면, @Transactional 어노테이션을 해당 메소드에만 적용하면 된다.

참고로, JUnit의 @Before 및 @After가 적용된 메소드도 한 트랜잭션 범위 내에서 실행된다.

[필자는 테스트를 실행할 때 트랜잭션을 롤백하는 방법보다는 DBUnit과 같은 테스트 도구를 이용해서 DB 상태를 동일 상태로 유지하는 것을 더 선호한다.
또, DBUnit과 스프링 통합 테스트를 연동해서 사용할 수 있게 해주는 Spring Test DBUnit을 사용하면 스프링 테스트 환경에서 좀 더 쉽게 DBUnit을 사용할 수 있다.
Spring Test DBUnit에 대한 내용이 궁금하면	http://springtestdbunit.github.io/spring-test-dbunit/	사이트를 참고하기 바란다.]