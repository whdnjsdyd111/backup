구현한 컨트롤러가 지정한 경로로 제대로 리다이렉트시키는지, 또는 JSON 응답을 올바르게 응답하는지 확인해야 한다면, 스프링 테스트가 제공하는 MockMvc를 용해서
보다 빠르게 테스트를 수행할 수 있다. 컨트롤러의 실행 결과를 확인하기 위해 톰캣을 실행하고 웹 브라우저를 이용해서 눈으로 응답 내용을 검증할 순 있지만,
MockMvc를 이용해서 테스트 코드를 작성하면 보다 빠르고 효과적으로 응답 결과를 검증할 수 있다.

[스프링 MVC 테스트 코드 예제 프로젝트는 /mvnprj/spring4-chap18-m	에 위치해 있다.]


	3.1 스프링 테스트의 MockMvc 사용하기
	
우선 스프링 MVC를 위한 테스트 코드 예제부터 살펴보자. 예제 코드는 다음과 같다.


	spring4-chap18-m/src/test/java/net/madvirus/spring4/chap18/HelloController.Test.java		778쪽
	
	
주요 코드가 갖는 의미는 다음과 같다.

	- 라인 28 : 웹 어플리케이션을 위한 스프링 컨텍스트를 사용하도록 설정한다.
	- 라인 32 : MockMvc를 생성할 때 사용할 스프링 컨텍스트를 자동 주입 받는다.
	- 라인 38 : 스프링 컨텍스트를 이용해서 MockMvc를 생성한다.
	- 라인 43 : 스프링 MVC에 GET 방식의 "/hello" 요청을 전송한다. 이때 name 요청 파라미터의 값으로 bkchoi를 전달한다.
	- 라인 44 : 스프링 MVC의 응답 결과 상태가 200 (OK)인지 검사한다.
	- 라인 47 : 스프링 MVC의 응답 결과 모델에 이름이 greeting인 값이 존재하는지 검사한다.
	
라인 43의 perform() 메소드는 파라미터로 전달한 RequestBuilder를 이용해서 HttpServletRequest를 생성하고 DispatcherServlet을 실행한다. 
이 과정에서 테스트하려는 컨트롤러나 스프링 MVC 설정을 테스트할 수 있게 된다. 예를 들어, 라인 43의 경우 @RequestMapping 값이 "/hello"인 컨트롤러의 메소드를 실행하게 된다.

andExpect() 메소드는 컨트롤러가 생성한 응답을 확인한다. 라인 44와 47의 코드를 보면 메소드 이름을 통해 무엇을 검사하는지 쉽게 유추할 수 있을 것이다.
위 테스트 코드를 보면 어떤 컨트롤러가 "/hello" 경로를 처리하고, name 요청 파라미터를 사용하며, 그 결과를 모델에 greeting이라는 이름을 갖는 값을 설정해야 한다는 것을 알 수 있다.
실제 이 테스트를 위해 사용된 스프링 컨트롤러 코드인 HelloController.java와 스프링 설정은 각각 다음과 같다.


	spring4-chap18-m/src/main/java/net/madvirus/spring4/chap18/HelloController.java		780쪽
	spring4-chap18-m/src/main/resource/spring-mvc.xml		781쪽
	
	
HelloController의 코드를 보면 HelloControllerTest 코드에서 지정한 "/hello" 경로를 처리하고 있고, Model에 "greeting" 이름의 값을 추가하고 있다.
실제 이클립스에서 HelloControllerTest 코드를 실행해보면 테스트를 통과하는 것을 확인할 수 있다.


	3.2 MockMvc 생성 방법
	
스프링 MVC를 테스트하려면 가장 먼저 해야 할 작업이 o.s.test.web.servlet.MockMvc 객체를 생성하는 것이다. 이 객체는 다음의 두 가지 방식으로 생성할 수 있다.

	- WebApplicationContext를 이용해서 생성
	- 테스트 하려는 컨트롤러를 이용해서 생성
	
첫 번째 방법은 다음 코드처럼 WebApplicationContext를 이용해서 생성하는 것이다.


	import org.springframework.test.web.servlet.setup.MockMvcBuilders;
	import org.springframework.web.context.WebApplicationContext;
	
	@RunWith(SpringJUnit4ClassRunner.class)
	@ContextConfiguration("classpath:/spring-mvc.xml")
	@WebAppConfiguration
	public class HelloControllerTest {
	
		@Autowired
		private WebApplicationContext ctx;
	
		private MockMvc mockMvc;
	
		@Before
		public void setUp() {
			mockMvc = MockMvcBuilders.webAppContextSetup(ctx).build();
		}
		
		
MockMvcBuilders.webAppContextSetup() 메소드는 전달받은 WebApplicationContext를 이용해서 MockMvc를 생성하는데,
이 경우 완전한 스프링 MVC 환경을 이용해서 테스트를 실행할 수 있다. ViewResolver를 비롯해 스프링 MVC 환경에 필요한 설정은 @ContextConfiguration 어노테이션으로 지정한 설정에 포함된다.

MockMvc를 생성하는 두 번째 방법은 컨트롤러를 이용해서 MockMvc를 생성하는 것이다.


	import org.springframework.test.web.servlet.MockMvc;
	import org.springframework.test.web.servlet.setup.MockMvcBuilders;
	import org.springframework.web.servlet.view.InternalResourceViewResolver;
	
	public class HelloControllerTest2 {
	
		private MockMvc mockMvc;
	
		@Before
		public void setUp() {
			InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();
			viewResolver.setPrefix("/WEB-INF/view/");
			viewResolver.setSuffix(".jsp");
	
			mockMvc = MockMvcBuilders.standaloneSetup(new HelloController())
					.setViewResolvers(viewResolver)
					.build();
		}
		
		
MockMvcBuilders.standaloneSetup() 메소드는 컨트롤러 객체를 전달받아 MockMvc 객체를 생성하며, 테스트 메소드는 전달받은 컨트롤러 객체만을 테스트 대상으로 사용할 수 있다.

[위 코드는 setViewResolvers() 메소드를 이용해서 DispatcherServlet이 사용할 ViewResolver를 직접 설정했는데,
그 이유는 요청 경로인 "/hello"와 HelloController가 리턴하는 뷰 이름이 "hello"가 같기 때문이다.
ViewResolver를 지정하지 않을 경우 기본 사용되는 ViewResolver는 컨트롤러가 리턴하는 뷰 이름을 응답 결과를 보여줄 경로로 사용한다.
이 경우 뷰 이름이 "hello"면 요청 경로였던 "/hello"와 같아지기 때문에, MockMvc는 perform()을 수행하는 과정에서 익셉션을 발생한다.]

	(1) 필터 설정 하기
	
스프링 시큐리티처럼 DispatcherServlet을 실행하기 전에 특정 필터를 적용해야 한다면, MockMvcBuilders의 addFilter() 메소드를 사용하면 된다.
아래 코드는 addFilter() 메소드의 사용 예를 보여주고 있다.


	@Before
	public void init() {
		DelegatingFilterProxy securityFilter = new DelegatingFilterProxy();
		securityFilter.setTargetBeanName("springSecurityFilterChain");
		securityFilter.setServletContext(context.getServletContext());
		mockMvc = MockMvcBuilders
				.webAppContextSetup(context)
				.addFilter(securityFilter, "/*")
				.build();
	}
	
	
addFilter() 메소드는 첫 번째 파라미터를 적용할 필터 객체를, 두 번째 파라미터는 필터 매핑을 설정한다.
두 번째 파라미터는 가변 인자로서 한 개 이상의 URL 패턴을 지정할 수 있다.


	3.3 요청 구성
	
MockMvc 객체를 생성했다면 그 다음은 perform() 메소드를 이용해서 요청을 DispatcherServlet에 전송하는 것이다.
perform() 메소드는 RequestBuilder 타입의 인자를 받는데, 이 객체를 직접 생성하기 보다는 스프링 테스트가 제공하는 메소드를 이용해서 RequestBuilder 객체를 생성한다.

o.s.test.web.servlet.request.MockMvcRequestBuilders 클래스는 RequestBuilder를 생성하는데 필요한 다양한 정적 메소드를 제공하고 잇따.
이 클래스의 주요 정적 메소드는 다음과 같다. 각 메소드는 GET, POST, PUT, DELETE 요청 방식에 해당한다. (이 외에도 동일한 구성의 options(), patch() 메소드를 제공하고 있다.)

	- MockHttpServletRequestBuilder get(String urlTemplate, Object... urlVariables)
	- MockHttpServletRequestBuilder get(URI url)
	- MockHttpServletRequestBuilder post(String urlTemplate, Object... urlVariables)
	- MockHttpServletRequestBuilder post(URI url)
	- MockHttpServletRequestBuilder put(String urlTemplate, Object... urlVariables)
	- MockHttpServletRequestBuilder put(URI url)
	- MockHttpServletRequestBuilder delete(String urlTemplate, Object... urlVariables)
	- MockHttpServletRequestBuilder delete(URI url)
	
위 정적 메소드를 사용할 때에는 아래 코드처럼 정적 임포트를 사용해서 코드 가독성을 높인다.


	import org.springframework.test.web.servlet.setup.MockMvcBuilders.*;
	
	@RunWith(SpringJUnit4ClassRunner.class)
	@ContextConfiguration("classpath:/spring-mvc.xml")
	@WebAppConfiguration
	public class HelloControllerTest {
	
		... // MockMvc 객체 생성
	
		@Test
		public void testHello() throws Exception {
			mockMvc.perform(get("/hello").param("name", "bkchoi"))
					.andExpect(status().isOk())
					.andExpect(model().attributeExists("greeting"));
		}
		
		
get(), post() 등의 메소드는 MockHttpServletRequestBuilder 객체를 리턴하는데, 이 객체는 요청 파라미터 구성, 헤더 설정, 쿠키 설정 등을 할 수 있는 메소드를 제공하고 있다.
예를 들어, 위 코드의 param() 메소드는 이름이 name이고 값이 bkchoi인 요청 파라미터를 설정했다.
param() 메소드를 포함해 요청 정보를 생성하기 위해 MockHttpServletRequestBuilder 클래스가 제공하는 메소드 목록은 다음과 같다.


	메소드									설명
	
	param(String name, String... values)	파라미터 이름이 name이고 값이 values인 요청 파라미터를 추가한다.
		
	cookie(Cookie... cookies)				요청으로 보낼 쿠키를 지정한다.
	
	contentType(MediaType mediaType)		요청 컨텐트 타입을 지정한다.
	
	accept(MediaType... mediaTypes)			Accept 헤더의 값을 지정한다.
	
	accept(String... mediaTypes)			Accept 헤더의 값을 지정한다.
	
	locale(Locale locale)					요청 로케일을 지정한다.
	
	header(String name, Object... values)	이름이 name이고 값이 values인 요청 헤더를 추가한다.
	
	headers(HttpHeaders httpHeaders)		HttpHeaders를 이용해서 요청 헤더를 추가한다.
	
	content(byte[] content)					몸체 내용을 지정한다.
	
	content(String content)					몸체 내용을 지정한다. UTF-8을 이용해서 byte 배열로 변환한다.
	
	contentPath(String contentPath)			컨텍스트 경로를 지정한다.
	
	sessionAttr(String name, Object value)	세션의 속성과 값을 설정한다.
	
위의 모든 메소드는 MockHttpServletRequestBuilder를 다시 리턴한다. 따라서, 다음 코드처럼 메소드 체이닝 방식으로 요청 정보를 구성할 수 있다.


	@Test
	public void testHelloJson() throws Exception {
		mockMvc.perform(post("/hello.json")
				.contextPath("/spring4-chap18-m")
				.contentType(MediaType.APPLICATION_JSON)
				.content("{\"name\": \"최범균\"}")
				)
				.andExpect(status().isOk())
				.andExpect(jsonPath("$.greeting", equalTo("안녕하세요, 최범균")));
	}
	
	
contentType() 메소드나 accept() 메소드에 파라미터로 사용되는 o.s.http.MediaType 클래스는 컨텐트 타입을 위한 몇 가지 상수를 정의하고 있다.
위 코드에서는 JSON을 위한 상수를 사용했는데, 주요 상속 값은 다음과 같다.

	- APPLICATION_FORM_URLENCODED (application/x-www-form-urlencoded)
	- MULTIPART_FORM_DATA (multipart/form-data)
	- APPLICATION_OCTET_STREAM (application/octet-stream)
	- APPLICATION_JSON (application/json)
	- APPLICATION_XML (application/xml)
	- TEXT_XML (text/xml)
	- TEXT_HTML (text/html)
	- TEXT_PLAIN (text/plain)
	
각 상수 이름 뒤에 '_VALUES' 가 붙은 상수는 괄호 안에 표기한 String 타입의 컨텐트 타입 값을 갖는다.

	
	3.4 응답 검증
	
perform() 메소드를 이용해서 요청을 전송하면, 그 결과로 o.s.test.web.servlet.ResultActions을 리턴한다.
ResultActions은 결과를 검증할 수 있는 andExpect(ResultMatcher matcher) 메소드를 제공하고 있다. andExpect()가 요구하는 ResultMatcher는
MockMvcResultMatchers에 정의된 정적 메소드를 이용해서 생성할 수 있다. 앞서 클래스들과 마찬가지로 코드 가독성을 높이기 위해 정적 임포트를 이용한다.


	import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
	import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
	
	@RunWith(SpringJUnit4ClassRunner.class)
	@ContextConfiguration("classpath:/spring-mvc.xml")
	@WebAppConfiguration
	public class HelloControllerTest {
	
		...
		
		@Test
		public void testHello() throws Exception {
			mockMvc.perform(get("/hello").param("name", "bkchoi"))
					.andExpect(status().isOk())
					.andExpect(model().attributeExists("greeting"));
		}
	
		@Test
		public void testHelloJson() throws Exception {
			mockMvc.perform(post("/hello.json")
					.contentType(MediaType.APPLICATION_JSON)
					.content("{\"name\": \"최범균\"}")
					)
					.andExpect(status().isOk())
					.andExpect(jsonPath("$.greeting", equalTo("안녕하세요, 최범균")));
		}
	}
	
	
status(), jsonPath() 등을 비롯해 MockMvcResultMatchers가 제공하는 다양한 정적 메소드가 존재하는데, 이들 메소드 및 관련 클래스에 대해 차례대로 살펴보도록 하자.

	(1) 상태 코드 검증
	
응답 결과를 검증하기 위해 사용되는 정적 메소드는 status()이다. status() 메소드는 StatusResultMatchers 객체를 리턴하며,
이 클래스에 정의된 메소드를 이용해서 응답 상태 코드를 검사할 수 있다. 아래 코드는 응답 코드가 정상(200)인지 확인하기 위해 isOk()를 사용한 예를 보여주고 있다.


	import static
	mockMvc.perform(get("/hello").param("name", "bkchoi"))
		.andExpect(status().isOk());
		
		
isOk() 외에 응답 상태 코드 확인을 위해 StatusResultMatchers 클래스가 제공하는 메소드는 다음과 같다.


	메소드									설명
	
	isOk(), isCreated(), isAccepted()		각각 차례대로 200, 201, 202 응답 상태 코드인지 확인한다.
	
	isMovedPermanently(),					각각 차례대로 301, 302, 304 응답 상태 코드인지 확인한다.
	isFound(), isNotModified()
	
	isBadRequest(), isUnauthorized(),		각각 차례대로 40, 401, 403, 404, 405, 406, 415 응답 상태 코드인지 확인한다.
	isForbidden(), isNotFound(),
	isMethodNotAllowed(),
	isNotAcceptable(),
	isUnsupportedMediaType()
	
	isInternalServerError()					500 응답 상태 코드인지 확인한다.
	
	is2xxSuccessful(), is3xxRedirection(),	각각 응답 코드가 2xx 범위, 3xx 범위, 4xx 범위, 5xx 범위인지 확인한다.
	is4xxClientError(), is5xxServerError()
	
	is(int status)							응답 상태 코드가 status인지 확인한다.
	
	
	(2) 뷰/리다이렉트 이름 검증
	
뷰 이름을 검증할 때는 이름과 같이 MockMvcresultMatchers.view() 메소드를 이용한다.


	@Test
	public void testHello() throws Exception {
		mockMvc.perform(get("/hello").param("name", "bkchoi"))
				.andExpect(status().isOk())
				.andExpect(view().name("hello"))
				.andExpect(model().attributeExists("greeting"));
	}
	
	
name() 메소드는 컨트롤러 결과를 보여줄 뷰 이름이 파라미터로 지정한 이름과 같은지 검사한다.

요청 처리 결과가 리다이렉트 응답이라면 다음과 같이 redirectUrl() 메소드를 이용해서 검사할 수 있따.


	mockMvc.perform(get("/main"))
			.andExpect(status().isMovedTemporarily())
			.andExpect(redirectUrl("/main/home"));
			
			
rediectUrlPattern() 메소드를 이용하면 Ant 경로 패턴을 이용해서 리다이렉트 경로를 검사할 수 있다.

	(3) 모델 확인
	
컨트롤러에서 생성한 모델을 검사하고 싶다면, MockMvcresultMatchers.model() 메소드를 이용한다.


	mockMvc.perform(get("/hello").param("name", "bkchoi"))
			.andExpect(model().attributeExists("greeting"));
			
			
model() 메소드는 ModelResultMatchers 객체를 리턴하는데, 이 클래스는 모델 값을 검증하기 위해 다음의 메소드를 제공한다.


	메소드										설명
	
	attribute(String name, Object value)		모델 name 속성의 값이 value 인지 검사한다.
	
	attribute(String name, Matcher<T> matcher)	모델 name 속성의 값이 Hamcrest의 Matcher에 매칭되는지 검사한다.
	
	attributeExists(String... names)			지정한 이름의 모델 속성이 존재하는지 검사한다.
	
	attributeDoesNotExist(String... names)		지정한 이름의 모델 속성이 존재하지 않는지 검사한다.
	
	attributeErrorCount(String name,			지정한 속성에 대해 에러 개수가 지정한 숫자와 같은지 검사한다.
		int expectedCount)
	
	attributeHasErrors(final String... names)	지정한 속성이 에러를 가졌는지 검사한다.
	
	attributeHasNoErrors(String... names)		지정한 속성이 에러가 없는지 검사한다.
	
	attributeHasFieldErrors(String name,		지정한 속성의 특정 필드가 에러를 가졌는지 검사한다.
		String... fieldNames)
				
	errorCount(int expectedCount)				전체 에러 개수가 지정한 숫자와 같은지 검사한다.
	
	hasErrors()									에러를 가졌는지 검사한다.
	
	hasNoErrors()								에러가 없는지 검사한다.
	
	
여러 메소드를 사용해야 한다면 다음과 같이 andExpect() 메소드를 여러 번 호출해야 한다.


	mockMvc.perform(get("/hello").param("name", "bkchoi"))
			.andExpect(model().attributeExists("greeting"))
			.andExpect(model().hasNoErrors());
			
			
	(4) 헤더 검증
	
응답 헤더를 검사하고 싶다면, MockMvcresultMatchers.header() 메소드를 사용한다.


	mockMvc.perform(get("/hello").param("name", "bkchoi"))
			.andExpect(header().doesNotExist("UAC"));
			
			
header() 메소드는 HeaderResultMatchers 객체를 리턴하며, 이 클래스는 헤더 검사를 위해 다음의 메소드를 제공한다.


	메소드									설명
	
	doesNotExist(String name)				지정한 이름을 가진 헤더가 없는지 검사한다.
	
	string(String name, String value)		지정한 이름을 가진 헤더의 값이 value인지 검사한다.
	
	string(String name,						지정한 이름을 가진 헤더의 값이 Hamcrest Matcher에 매칭되는 확인한다.
		Matcher<? super String> matcher)	
		
	longValue(String name, long value)		지정한 이름을 가진 헤더의 값이 long 타입의 value인지 검사한다.
	
	
	(5) 쿠키 검증
	
응답 결과로 생성되는 쿠키를 확인하고 싶다면 MockMvcresultMatchers.cookie() 메소드를 사용한다.


	MockMvc.perform(post("/hello.json")
		.contentType(MediaType.APPLICATION_JSON).content("{\"name\" : \"최범균\"}"))
		.andExpect(status().isOk())
		.andExpect(cookie().doesNotExist("UAC"));
		
		
cookie() 메소드는 CookieResultMatchers 객체를 리턴하며, 이 클래스는 쿠키 관련 검사를 위해 다음의 메소드를 제공한다.


	메소드										설명
	
	doesNotExist(String name)					해당 이름을 갖는 쿠키가 응답에 포함되어 있지 않은지 검사한다.
	
	exists(String name)							해당 이름을 갖는 쿠키가 응답에 포함되어 있는지 검사한다.
	
	value(String name, String expectedValue)	이름이 name인 쿠키의 값이 지정한 값과 일치하는지 검사한다.
	value(String name,
		Matcher<? super String> matcher)
		
	maxAge(String name, int maxAge)				이름이 name인 쿠키의 유효 시간이 지정한 값과 일치하는지 검사한다.
	maxAge(String name,
		Matcher<? super String> matcher)
		
	path(String name, String path)				이름이 name인 쿠키의 경로 값이 지정한 값과 일치하는지 검사한다.
	path(String name,
		Matcher<? super String> matcher)
		
	domain(String name, String domain)			이름이 name인 쿠키의 도메인 값이 지정한 값과 일치하는지 검사한다.
	domain(String name,
		Matcher<? super String> matcher)
		
	secure(String name, boolean secure)			이름이 name인 쿠키가 보안 프로토콜로 전송되는지 여부를 검사한다.
	
	
	(6) JSON 응답 검증
	
컨트롤러가 JSON 응답을 리턴한다면, MockMvcresultMatchers.jsonPath() 메소드를 사용한다.
이 메소드를 사용하려면 먼저 JSON 응답에서 경로 값을 추출할 때 사용하는 json-path 모듈을 의존에 추가한다.


	<dependency>
		<groupId>com.jayway.jsonpath</groupId>
		<artifactId>json-path</artifactId>
		<version>0.9.0</version>
		<scope>test</scope>
	</dependency>
	
	
MockMvcresultMatchers.jsonPath() 메소드를 사용해서 JSON 응답을 검사하는 코드 예는 다음과 같다.


	mockMvc.perform(get("/books.json"))
		.andExpect(jsonPath("$.books[2].title", equalTo("제목3")));
		
		
위 코드는 응답이 다음과 같은 구조일 때 세 번째 title의 값을 검사한다.


	{"books": [
		{"title": "제목1", "price": 1000},
		{"title": "제목2", "price": 2000},
		{"title": "제목3", "price": 3000}
	]}
	
	
jsonPath() 메소드의 두 번째 인자는 JSON 경로에 해당하는 값을 비교할 때 사용할 Matcher를 지정한다.
org.hamcrest.Matchers.equalTo() 메소드처럼 Hamcrest가 제공하는 Matcher를 사용해서 값을 비교할 수 있다.

jsonPath()의 JSON 경로를 자바 문자열 포맷을 이용해서 설정할 수도 있다. 예를 들어, 다음 코드는 경로를 자바 문자열 포맷을 이용해서 값을 검증하는 몇 가지 예를 보여주고 있다.

	
	mockMvc.perform(get("/books.json"))
		.andExpect(jsonPath("$.books").value(hasSize(3)))
		.andExpect(jsonPath("$.books[0].title").value("제목1")
		.andExpect(jsonPath("$.books[%d].price", 0).value(equalTo(1000))
		.andExpect(jsonPath("$.books[1].%s", "price").value(2000));
		
		
위 코드에서 첫 번째와 두 번째 jsonPath() 메소드는 문자열 포맷에서 인자 값이 없는 문자열 포맷을 사용하고 있으며, 세 번째와 네 번째는 각각 %d와 %s를 포함한 문자열 포맷을 사용하고 있다.
문자열 포맷을 사용하는 jsonPath() 메소드는 JsonPathResultMatcher 객체를 리턴한다. 위 코드에서 주로 사용한 value() 메소드를 포함해서 JSON 경로의 값을 검증하기 위해
사용되는 JsonPathResultMatchers 클래스의 메소드는 다음과 같다.


	메소드								설명
	
	value(final Matcher<T> matcher)		JSON 경로가 지정한 값과 일치하는지 검사한다.
	value(final Object expextedValue)
	
	exists()							JSON 경로가 존재하는지 검사한다.
	
	doesNotExist()						JSON 경로가 존재하지 않는지 검사한다.
	
	isArray()							JSON 경로가 배열인지 검사한다.
	
	
[	JSON 경로 표현식

jsonPath() 메소드가 사용하는 JSON 경로 표현식은 http://goessner.net/articles/JsonPath/ 에 정의되어 있는 표현식을 따른다.]

	(7) XML 응답 검증
	
MockMvcresultMatchers.xpath() 메소드를 사용하면 XPath 경로를 이용해서 XML 응답을 검사할 수 있다.


	mockMvc.perform(get("/books.xml"))
		.andExpect(xpath("/book-list/book[3]/title").string("제목3"))
		.andExpect(xpath("/book-list/book[3]/%s", "price").number(3000.0));
		

xpath() 메소드는 XpathResultMatchers 객체를 리턴하며, 이 클래스는 값 검증을 위해 다음과 같은 메소드를 제공하고 있다.


	메소드									설명
	
	exists()								XPath에 해당하는 값이 존재하는지 검사한다.
	
	doesNotExists()							XPath에 해당하는 값이 존재하지 않는지 검사한다.
	
	nodeCount(int expectedCount)			XPath에 해당하는 노드 개수가 일치하는지 검사한다.
	nodeCount(Matcher<Integer> matcher)
	
	string(String expectedValue)			XPath에 해당하는 값이 지정한 값과 일치하는지 검사한다.
	string(Matcher<? super String matcher)
	
	number(Double expectedValue)			XPath에 해당하는 숫자 값이 지정한 값과 일치하는지 검사한다.
	number(Matcher<? super Double>
		matcher)
			
	booleanValue(Boolean value)				XPath에 해당하는 boolean 값이 지정한 값과 일치하는지 검사한다.
	
	node(Matcher<? super Node> matcher)		XPath에 해당하는 노드 값이 지정한 Matcher와 일치하는지 검사한다.
	
	
	(8) 요청/응답 내용 출력
	
MockMvc를 이용해서 테스트를 진행하다 보면 실제로 생성된 요청과 응답이 어떻게 구성됐는지 궁금할 때가 있다.
이런 경우에는 다음의 코드를 사용해서 MockMvc가 생성하는 요청과 응답 내용을 출력할 수 있다.


	import static org.springframework.test.web.sevlet.result.MockMvcResultHandlers.*;
	
	mockMvc.perform(get("/books.xml"))
		.andDo(print())
		.andExpect(status().isOk())
		.andExpect(xpath("/book-list/book[3]/title").string("제목3"))
		.andExpect(xpath("/book-list/book[3]/%s", "price").number(3000.0));
		
		
perform() 메소드가 리턴하는 ResultActions 클래스는 andDo(ResultHandlerhandler) 메소드를 제공하고 있는데, MockMvcResultHandlers.print() 메소드는
이 ResultHandler의 구현 클래스인 ConsolePrintingResultHandler 객체를 리턴한다. ConsolePrintingResultHandler 클래스는 다음과 비슷하게 요청 내용과
응답 결과 내용을 콘솔에 출력한다.


	MockHttpServletRequest:
	         HTTP Method = GET
	         Request URI = /books.xml
	          Parameters = {}
	             Headers = {}
	
	             Handler:
	                Type = net. ... .BookController
	              Method = public ... .BookList ... .BookController.booksXml()
	
	               Async:
	   Was async started = false
	        Async result = null
	
	  Resolved Exception:
	                Type = null
	
	        ModelAndView:
	           View name = null
	                View = null
	               Model = null
	
	            FlashMap:
	
	MockHttpServletResponse:
	              Status = 200
	       Error message = null
	             Headers = {Content-Type=[application/xml;charset=utf-8]}
	        Content type = application/xml;charset=utf-8
	                Body = <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
	                	<book-list><book><title>제목1</title><price>1000</price><isbn>000000</isbn></book>
	                	<book><title>제목2</title><price>2000</price><isbn>000001</isbn></book>
	                	<book><title>제목3</title><price>3000</price><isbn>000004</isbn></book></book-list>
	       Forwarded URL = null
	      Redirected URL = null
	             Cookies = []
	             
	             
따라서, 콘솔에 출력된 내용을  통해 테스트 코드나 컨트롤러 코드가 무엇이 문제인지 파악하는데 도움을 얻을 수 있다.


		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>4.0.4.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>4.0.4.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>
		
		
스프링 4.0.4 RELEASE 버전은 JCL(commons-logging) 1.1.3 모듈을 사용하고 있으며, JCL 1.1.3은 log4j 1.2.17 에 맞춰 개발되었다.
반드시 log4j 1.2.17 버전을 사용해야하는 것은 아니지만, 필자의 경우는 가능하면 각 모듈이 의존하는 버전도 맞추고 있다.

실제 스프링이 log4j 모듈을 이용해서 로그를 남기는지 확인해보기 위해 클래스패스 루트에 다음과 같이 log4j.xml 파일을 추가해보자.