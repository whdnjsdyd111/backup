package 챕터06_클래스;

public class ㄱ_Object_Oriented_Programming {
	
		// Object 객체
	
	
	// 객체란 자신의 속성을 가지고 다른 것과 식별리 가능한 것
	// 이러한 속성과 동작을 필드와 메소드라 한다
	// 현실 세계의 객체를 소프트웨어 객체로 설계하는 것을 객체 모델링 (Object Modeling) 이라 한다.
	
		//  Object's Interaction 객체의 상호작용
	
	// 객체들은 각각 독립적으로 존재하고, 다른 객체와 서로 싱호작용면서 동작한다.
	// 객체들 사이의 상호작용 수단은 메소드이다. 객체가 다른 객체의 기능을 이용하는 것이 메소드 호출이다.
	// 메소드 호출은 다음과 같다. 객체에 도트(.) 연산자를 붙이고 메소드 이름을 기술하면 된다. 도트 연산자는 객체의 필드와 세모드에 접근할 때 사용한다.
	
	// 리턴값 = 객체.메소드(매개값1, 매개값2, ...);
	
	// 매개값은 메소드를 실행하기 위해 필요한 데이터이다. 메소드에 값을 넣는 것을 매개값이라 한다. 리턴값은 메소드가 실행하고 나서 호출한 곳으로 돌려주는 값이다.
	
		// Encapsulation 캡슐화
	
	// 캡슐화란 객체의 필드, 메소드를 하나로 묶고 실제 구현 내용을 감추는 것이다.
	// 외부 객체는 객체의 내부의 구조를 알지 못하기 때문에 객체가 노출해서 제공하는 필드와 메소드만 이용할 수 있다.
	// 캡슐화하여 보호하는 이유는 외부의 잘못된 사용으로 인해 객체가 손상되지 않도록 하는데 있다.
	// 자바는 캡슐화된 멤버를 노출시킬 것인지, 숨길 것인지 결정하기 위해 접근 제한자(Access Modifier)를 사용한다.
	
	
		// Inheritance 상속
	
	
	// 객체 지향 프로그래밍에는 상위 객체와 하위 객체가 있다. 상위 객체가 가지고 있는 필드와 메소드를 하위 객체에게 물려주어 하위 객체가 사용할 수 있도록 하는 것을 상속이라 한다.
	// 상속은 상위 객체를 재사용하여 하위 객체를 쉽고 빨리 설계할 수 있도록 도와주고, 이미 잘 개발된 객체를 재사용해서 새로운 객체를 만들기 때문에 반복된 코드의 중복을 줄여준다.
	// 그리하여 상속은 상위 객체의 수정으로 모든 하위 객체들의 수정 효과를 가져오므로 유지 보수 시간을 최소화 시켜준다.
	
	
		// Polymorphism 다형성
	
	
	// 다형성은 같은 타입이지만 실행 결과가 다양한 객체를 이용할 수 있는 성질을 말한다. 하나의 타입에 여러 객체를 대입함으로써 다양한 기능을 이용할 수 있도록 해준다.
	// 자바는 다형성을 의해 부모 클래스 또는 인터페이스의 타입 변환을 허용한다. 부모 타입에는 모든 자식 객체가 대입될 수 있고, 인터페이스 타입에는 모든 구현 객체가 대입될 수 있다.
}
