package 챕터06_클래스;

public class ㅍ_AccessModifier {
	// main() 메소드를 가지지 않는 대부분의 클래스는 외부 클래스에서 이용할 목적으로 설계된 라이브러리 클래스이다.
	// 라이브러리 클래스를 설계할 때에는 외부 클래스에서 접근할 수 있는 멤버와 접근할 수 없는 멤버로 구분해서 필드, 생성자, 메소드를 설계하는 것이 바람직하다.
	// 객체 생성을 막기위해 생성자를 호출하지 못하게 하거나 객체의 특정 데이터를 보호하기 위해 해당 필드에 접근하지 못하도록 막아야 한다.
	// 그리고 특정 메소드를 호출할 수 없도록 제한할 필요가 있다. 자바는 이러한 기능을 구현하기 위해 접근 제한자를 제공하고 있다.
	
	// 접근 제한자는 public, protected, default, private와 같이 네 가지 종류가 있다.
	// public 접근 제한자는 단어의 뜻 그대로, 공개한다는 의미를 가지고 있다. 그래서 외부 클래스가 자유롭게 사용할 수 있는 공개 멤버를 만든다.
	// protected 접근 제한자는 같은 패키지 또는 자식 클래스에서 사용할 수 있는 멤버를 만든다.
	// private 접근 제한자는 단어의 뜻 그대로, 개인적인 것이라 외부에 노출되지 않는 멤버를 만든다.
	// 위 세가지 접근 제한자가 적용되지 않은 멤버는 default 접근 제한을 가진다.
	// default 접근 제한자는 같은 패키지에 소속된 클래스에서만 사용할 수 있는 멤버를 만든다.
	
	//	접근 제한자			적용 대상							접근할 수 없는 클래스
	//	public			클래스, 필드, 생성자, 메소드			없음
	//	protected		필드, 생성자, 메소드					자식 클래스가 아닌 다른 패키지에 소속된 클래스
	//	default			클래스, 필드, 생성자, 메소드			다른 패키지에 소속된 클래스
	//	private			필드, 생성자, 메소드					모든 외부 클래스
	
			// Access Modifier Of Class
	
	// 클래스를 선언할 때 고려해야 할 사항은 같은 패키지 내에서만 사용할 것인지, 아니면 다른 패키지에서도 사용할 수 있도록 할 것인지를 결정해야 한다.
	// 클래스에 적용할 수 있는 접근 제한은 public과 default 단 두 가지인데, 다음과 같은 형식으로 작성한다.
	
	// default 접근 제한
	//		class 클래스 { ... }
	
	// public 접근 제한
	//		public class 클래스 {...}
	
	//		Default Access Modification
	
	// 클래스를 선언할 때 public을 생략했다면 클래스는 default 접근 제한을 가진다.
	// 클래스가 default 접근 제한을 가지게 되면 같은 패키지에서는 아무런 제한 없이 사용할 수 있지만 다른 패키지에서 사용할 수 없도록 제한된다.
	
	//		Public Access Modification
	
	// 클래스를 선언할 때 public 접근 제한자를 붙였다면 클래스는 public 접근 제한을 가진다. 클래스가 public 접근 제한을 가지게 되면 같은 패키지 뿐만 아니라 다른 패키지에서도 아무련 제한 없이 사용할 수 있다.
	// 클래스를 다른 개발자가 사용할 수 있도록 라이브러리 클래스로 개발되어야 한다면, 반드시 public 접근 제한을 갖도록 해야 한다.
	// 인터넷으로 배포되는 라이브러리  클래스들도 모두 public 접근 제한을 가지고 있다.
	
	// 예제로  ㅍ1 패키지를 살펴보자.
	// B클래스는 A클래스와 같은 패키지 이므로 A클래스에 접근이 가능하다. 그래서 B클래스에서 A클래스를 이용하여 필드 선언 및 생성자/메소드 내부에서 변수 선언이 가능하다.
	// C클래스는 A클래스와 다른 패키지 이므로 default 접근이 제한된 A클래스에는 접근이 되지 않지만, public으로 공개된 B클래스는 접근이 가능하다. 
	// 그래서 C클래스에서 B클래스를 이용하여 필드 선언 및 생성자/메소드 내부에서 변수 선언이 가능하다.
	
			// Access Modification Of Constructor	생성자의 접근 제한
	
	// 객체를 생성하기 위해서는 new 연산자로 생성자를 호출해야 한다. 하지만 생성자를 어디에서나 호출할 수 있는 것은 아니다.
	// 생성자가 어떤 접근 제한을 갖느냐에 따라 호출 가능 여부가 결정된다. 생성자는 다음과 같이 public, protected, default, private 접근 제한을 가질 수 있다.
	
	//	public class 클래스 {
	//		// public 접근 제한
	//		public 클래스(...) {...}
	//
	//		// protected 접근 제한
	//		protected 클래스(...) {...}
	//
	//		// default 접근 제한
	//		클래스(...) {...}
	//
	//		// private 접근 제한
	//		private 클래스(...) {...}
	//	}
	
	// 클래스에 생성자를 선언하지 않으면 컴파일러에 의해 자동적으로 기본 생성자가 추가된다. 자동으로 생성되는 기본 생성자의 접근 제한은 클래스의 접근 제한과 동일하다.
	
	//	public
	// 클래스가 default 접근 제한을 가진다면 클래스 사용이 같은 패키지로 한정되므로, 비록 생성자가 public 접근 제한을 가지더라도 같은 패키지에서만 생성자를 호출할 수 있다.
	
	//	protected
	// default와 같이 같은 패키지에 속하는 클래스에서 생성자를 호출할 수 있다. 차이점은 다른 패키지에 속한 클래스가 해당 클래스의 자식 클래스라면 생성자를 호출할 수 있다.
	
	//	private
	// 동일 패키지건 다른 패키지건 생성자를 호출할 수 없다. 따라서 클래스 외부에서 new 연산자로 객체를 만들 수 없다. 오로지 클래스 내부에서만 사용 가능하다.
	
	//예제 ㅍ2 패키지를 살펴보자.
	
			// Access Modification of Field And Method
	
	// 필드와 메소드를 선언할 때 고려해야 할 사항은 클래스 내부에서만 사용할 것인지, 패키지 내에서만 사용할 것인지, 아니면 다른 패키지에서도 사용할 수 있도록 할 것인지 결정해야 한다.
	// 이것은 필드와 메소드가 어떤 접근 제한을 갖느냐에 따라 결정된다. 필드와 메소드는 다음과 같이 접근 제한을 가질 수 있다.
	
	// 필드 선언
	//	[ public | protected | private ] [ static ] 타입 필드;
	
	// 메소드 선언
	//	[ public | protected | private ] [ static ] 리턴 타입 메소드(...) {...}
	
	// 위 접근 제한자들은 생서자의 접근 제한 특성과 같다.
	// 예제 ㅍ3을 살펴보자.
	
}
