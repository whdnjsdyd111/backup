package 챕터07_상속;

public class ㄷ_ParentsClass_Invocation {
	// 현실에서 부모 없는 자식이 없듯이 자바에서도 자식 객체를 생성하면, 부모 객체가 먼저 생성되고 자식 객체가 그 다음에 생성된다.
	// 아래 코드인 DmbCellPhone 객체만 생성하는 것처럼 보이지만, 사실은 내부적으로 부모인 CellPhone 객체가 먼저 생성되고, DmbCellPhone 객체가 생성된다.
	
	//	DmbCellPhone dmbCellPhone = new DmbCellPhone();
	// 이를 표현하면 다음과 같다.
	
	//		스택(stack) 영역					힙(heap) 영역
	//
	//		dmbCellPhone					CellPhone 객체
	//			│								상속 ↑
	//			└─→							DmbCellPhone 객체
	
	// 모든 객체는 클래스의 생성자를 호출해야만 생성된다. 부모 객체도 예외는 아니다. 그렇다면 부모 객체를 생성하기 위해 부모 생성자를 어디서 호출한 것일끼?
	// 이것에 대한 비밀은 자식 생성자에 숨어 있다. 부모 생성자는 자식 생성자의 맨 첫 줄에서 호출된다. 
	// 예를 들어 DmbCellPhone의 생성자가 명시적으로 선언되지 않았다면 컴파일러는 다음과 같은 기본 생성자를 생성해 낸다.
	
	//	public DmbCellPhone() {
	//		super();
	//	}
	
	// 첫줄에 super();가 추가된 것을 볼 수 있다. super()는 부모의 기본 생성자를 호출한다. 즉 CellPhone 클래스의 다음 생성자를 호출한다.
	
	//	public CellPhone() {
	//	}
	
	// CellPhone.java 소스 코드에서도 CellPhone의 생성자가 선언되지 않았지만 컴파일러에 의해 기본 생성자가 만들어지므로 문제없이 실행된다.
	// 만약 우리가 직접 자식 생성자를 선언하고 명시적으로 부모 생성자를 호출하고 싶다면 다음과 같이 작성하면 된다.
	
	//	자식클래스( 매개변수선언, ... ) {
	//		super( 매개값, ... );
	//		...
	//	}
	
	// super(매개값, ...)는 매개값의 타입과 일치하는 부모 생성자를 호출한다. 만약 매개값의 타입과 일치하는 부모 생성자가 없을 경우 컴파일 오류가 발생한다.
	// super(매개값, ...)가 생략되면 컴파일러에 의해 super()가 자동적으로 추가되기 때문에 부모의 기본 생성자가 존재해야 한다.
	// 부모 클래스에 기본 생성자가 없고 매개 변수가 있는 생성자만 있다면 자식 생성자에서 반드시 부모 생성자 호출을 위해 super(매개값, ...)를 명시적으로 호출해야한다.
	// super(매개값, ...)는 반드시 자식 생성자 첫 줄에 위치해야 한다. 그렇지 않으면 컴파일 에러가 발생한다.
	// 다음 예제를 살펴보자.
}
