package 챕터07_상속;

public class ㄱ_Inheritance_Concept {
	// 현실에서의 상속(Inheritance)란 부모가 자식에게 물려주는 행위를 말한다. 객체 지향 프로그램에서도 부모 클래스의 멤버를 자식 클래스에게 물려줄 수 있다.
	// 프로그램에서는 부모 클래스를 상위 클래스라고 부르기도 하고, 자식 클래스를 하위 클래스, 또는 파생 클래스라고 부른다.
	
	//		부모 클래스		=		필드1 + 메소드1()
	//
	//								물려줌 ↓	
	//													하위 클래스에서 추가한 필드와 메소드
	//		자식 클래스		=		필드1 + 메소드1()		+		필드2	 + 메소드2()
	
	// 상속은 이미 잘 개발된 클래스를 재사용해서 새로운 클래스를 만들기 때문에 코드의 중복을 줄여준다.
	// field1, field2, method1(), methoed2()를 가지는 클래스를 작성한다고 생각할 때, 4개를 모두 처음부터 작성하는 것 보다는 field1과 method1()을 가지고 있는 클래스가 있다면,
	// 이것을 상속하고, field2와 method2()만 추가 작성하는 것이 보다 효율적이고 개발 시간을 절약시켜준다.
	
	//	public class A {
	//		int field1;
	//		void method1() {...}
	//	}
	
	//	public class B extends A {	// A를 상속
	//		String field2
	//		void method2() {...}
	//	}
	
	//	B b = new B();
	//	b.field1 = 10;
	//	b.method1();		// A로부터 물려받은 필드와 메소드
	//
	//	b.field2 = "홍길동";
	//	b.method2();		// B가 추가한 필드와 메소드
	
	// 실제로 B 클래스를 객체 생성해서 다음과 같이 사용할 때에는 마치 B가 field1과 method1()을 가지고 있는 것처럼 보인다.
	
	// 상속을 해도 부모 클래스의 모든 필드와 메소드들을 물려받는 것은 아니다. 부모 클래스에서 private 접근 제한을 작는 필드와 메소드는 상속 대상에서 제외된다.
	// 그리고 부모 클래스와 자식 클래스가 다른 패키지에 존재한다면 default 접근 제한을 갖는 필드와 메소드도 상속 대상에서 제외된다.
	// 그 이외의 경우는 모두 상속의 대상이 된다.
	
	// 상속을 이용하면 클래스의 수정을 최소화시킬 수 있다. 부모 클래스의 수정으로 모든 자식 클래스들의 수정 효과를 가져오기 때문에 유지 보수 시간을 최소화시켜준다.
	// 예를 들어 클래스 B, C, D가 A를 상속할 경우 A의 필드와 메소드를 수정함으로써 B, C, D를 수정하지 않아도 수정된 A의 필드와 메소드를 이용할 수 있다.
}
