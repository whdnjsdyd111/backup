package 챕터17_JavaFX;

public class ㄹ_JavaFX_Container {
	// 레이아웃을 작성할 때 컨트롤들을 쉽게 배치할 수 있도록 도와주는 클래스가 컨테이너이다. Javafx.scene.layout 패키지에는 다양한 컨테이너 클래스들이 존재한다.
	// 접미사가 Pane으로 끝나는 클래스는 모두 컨테이너이고, 그 이외에 HBox, VBox가 있다.
	
	//	컨테이너			설명
	//
	//	AnchorPane		컨트롤 좌표를 배치하는 레이아웃
	//	BorderPane		위, 아래, 오른쪽, 왼쪽, 중앙에 컨트롤을 배치하는 레이아웃
	//	FlowPane		행으로 배치하되 공간이 부족하면 새로운 행에 배치하는 레이아웃
	//	GridPane		그리드로 배치하되 셀의 크기가 고정적이지 않는 레이아웃
	//	StackPane		컨트롤을 겹쳐서 배치하는 레이아웃
	//	TilePane		그리드로 배치하되 고정된 셀의 크기를 갖는 레이아웃
	//	HBox			수평으로 배치하는 레이아웃
	//	VBox			수직으로 배치하는 레이아웃
	
			//	AnchorPane Container
	
	// AnchorPane 컨테이너는 좌표를 이용해서 AnchorPane의 좌상단 (0, 0)을 기준으로 컨트롤을 배치한다. 컨트롤 좌표는 좌상단(layoutX, layoutY) 값을 말하는데 (0, 0)에서 떨어진 거리이다.
	
	//			┌───────────────────────────────────────────────┐
	//			│	  30↑(layoutY)					AnchorPane	│
	//			│50		↓										│
	//			│←──────→ ┌─────────────────┐					│
	//			│(layoutX)│	(50,30)			│					│
	//			│		  │			컨트롤	│					│
	//			│		  └─────────────────┘					│
	//			└───────────────────────────────────────────────┘
	
	// AnchorPane에서 사용할 수 있는 주요 설정은 다음과 같다.
	
	//	태그 및 속성			설명				적용
	//
	//	prefWidth		폭을 설정			AnchorPane
	//	prefHeight		높이를 설정			AnchorPane
	//	layoutX			컨트롤의 X 좌표		컨트롤
	//	layoutY			컨트롤의 Y 좌표		컨트롤
	//	<children>		컨트롤을 포함		AnchorPane
	
	// AnchorPane 컨테이너는 JavaFX Scene Builder를 사용해서 디자인하는 것이 좋다. 눈으로 거리를 확인해서 컨트롤을 드롭시킬 수 있기 때문이다.
	// 다음은 AnchorPane 루트 컨테이너를 사용해서 로그인 레이아웃을 정의한 것이다.
	
	// AnchorPane에 포함될 컨트롤은 <children> 태그의 자식 태그로 선언되는데, <children>은 AnchorPane에 setChildren() 메소드를 호출하는 것이 아니라, 
	// getChildren() 메소드가 리턴하는 ObservableList 컬렉션에 <children>의 자식 태그로 정의된 컨트롤을 추가하는 역할을 한다.
	// AnchorPane에서만 <children> 태그를 사용하는 것이 아니라, 거의 모든 컨테이너에서 사용하기 때문에 잘 이해할 필요가 있다.
	
	// AnchorPane을 사용해서 컨트롤을 좌표로 배치하면 윈도우 창이 줄거나 늘어날 경우 컨트롤의 재배치가 일어나지 않는다.
	// 따라서 AnchorPane으로 배치할 경우에는 윈도우 창의 크기를 변경할 수 없도록 Stage의 setResizable(false); 메소드를 호출하는 것이 좋다.
	
			//	HBox And VBox Container
	
	//	HBox와 VBox는 수평과 수직으로 컨트롤을 배치하는 컨테이너이다.				┌───────────────────────────────────────────────┐
	//	HBox와 VBox는 자식 컨트롤의 크기를 조정하는데, 						│VBox	│	ImageView ──────────────────────┐	│
	//	HBox는 컨트롤의 높으를 확장하고, 컨트롤의 폭은 유지한다.					│		│	└───────────────────────────────┘	│
	//	VBox는 컨트롤의 폭을 확장하고 컨트롤의 높이는 유지한다. 단,				│		│	HBox ───────────────────────────┐	│
	//	크기 조정이 가능한 컨트롤만 자동 확장된다. Button의 경우는 크기 조정이 되지 않는데	│		│	│		──────────────→			│	│
	//	그 이유는 maxWidth와 maxHeight가 -1.0을 가지기 때문이다.				│		│	│		Button		Button		│	│
	//	크기 조정이 가능하도록 하려면 다음과 같이 								│		↓	└───────────────────────────────┘	│
	//	maxWidth와 maxWidth를 변경하면 된다							└───────────────────────────────────────────────┘

	//	<Button text="button">
	//		<maxWidth><Double fx:constant="MAX_VALUE"/></maxWidth>
	//		<maxHeight><Double fx:constant="MAX_VALUE"/></maxHeight>
	//	</Button>
	
	// HBox에서 컨트롤의 높이를 확장하고 싶지 않다면 fillHeight 속성을 false로 설정하면 되고, VBox에서 컨트롤의 폭을 확장하고 싶지 않다면 fillWidth 속성을 false로 설정하면 된다.
	// HBox와 VBox에서 사용할 수 있는 주요 설정은 다음과 같다.
	
	//	태그 및 속성									설명						적용
	//		
	//	prefWidth								폭을 설정					HBox, VBox
	//	prefHeight								높이를 설정					HBox, VBox
	//	alignment								컨트롤의 정렬을 설정			HBox, VBox
	//	spacing									컨트롤의 간격을 설정			HBox, VBox
	//	fillWidth								컨트롤의 폭 확장 여부 설정		VBox
	//	fillHeight								컨트롤의 높이 확장 여부 설정		HBox
	//	<children>								컨트롤을 포함				HBox, VBox
	//
	//	<HBox.hgrow>
	//		<Priority fx:constant="ALWAYS"/>	HBox의 남은 폭을 채움			컨트롤
	//	</HBox.hgrow>
	//
	//	<VBox.hgrow>
	//		<Priority fx:constant="ALWAYS"/>	VBox의 남은 폭을 채움			컨트롤
	//	</VBox.hgrow>
	
	// 다음 예제는 VBox로 ImageView 컨트롤과 HBox 컨테이너를 수직으로 배치하고, HBox 안에는 두 개의 버튼을 수평으로 배치했다.
	// [다음] 버튼은 HBox의 남은 폭을 채우도록 HBox의 hgrow 속성을 설정했다.
	
			//	BorderPane Container
	
	// BorderPane은 top, bottom, left, right, center 셀에 컨트롤을 배치하는 컨테이너이다. 컨트롤만 배치하는 것이 아니라 다른 컨테이너도 배치할 수 있기 때문에 다양한 레이아웃을 만들어 낼 수 있다.
	// 주의할 점은 각 셀에는 하나의 컨트롤 또는 컨테이너만 배치할 수 있다.
	
	//			┌───────────────────────────────────────────────┐
	//			│					top							│
	//			│───────────────────────────────────────────────│
	//			│left	│			center			│	right	│
	//			│		│							│			│
	//			│───────────────────────────────────────────────│
	//			│					bottom						│
	//			└───────────────────────────────────────────────┘

	// 다음은 BorderPane에서 사용할 수 있는 대그 및 속성들이다.
	
	//	태그 및 속성			설명						적용
	//
	//	prefWidth		폭을 설정					BorderPane
	//	prefHeight		높이를 설정					BorderPane
	//	<top>			top에 배치될 컨트롤을 포함		BorderPane
	//	<bottom>		bottom에 배치될 컨트롤을 포함	BorderPane
	//	<right>			right에 배치될 컨트롤을 포함		BorderPane
	//	<left>			left에 배치될 컨트롤을 포함		BorderPane
	//	<center>		center에 배치될 컨트롤을 포함	BorderPane
	
	// BorderPane의 특징은 top, bottom, left, right에 컨트롤을 배치하지 않으면 center에 배치된 컨트롤이 top, bottom, left, right까지 확장된다.
	// 다음은 BorderPane의 top에는 ToolBar을 배치하고, center에는 TextArea를, bottom에는 다시 BorderPane을 배치했다.
	
			//	FlowPane Container
	
	// FlowPane은 생으로 컨트롤을 배치하되 공간이 부족하면 새로운 행에 배치하는 컨테이너이다.
	
	//			┌───────────────────────────────────────────────┐
	//			│FlowPane										│
	//			│												│
	//			│	컨트롤1 	→		컨트롤2	→		컨트롤3	→	│
	//			│												│
	//			│	컨트롤4										│
	//			│												│
	//			└───────────────────────────────────────────────┘

	// 다음은 FlowPane에서 사용할 수 있는 태그와 속성들이다.
	
	//	태그 및 속성			설명					적용
	//
	//	prefWidth		폭을 설정				FlowPane
	//	prefHeight		높이를 설정				FlowPane
	//	hgap			컨트롤의 수평 간격을 설정	FlowPane
	//	vgap			컨트롤의 수직 간격을 설정	FlowPane
	//	<children>		컨트롤을 포함			FlowPane
	
	// 다음은 FlowPane 컨테이너에 다섯 개의 Button을 배치한 것인데, 버튼 간의 수평 간격과 수직 간격을 주기 위해 hgap과 vgap을 10으로 설정하였다.
	
	// FlowPane을 잘 이해하려면 윈도우 창을 늘렸다 줄여보면 되는데, 오른쪽에 배치될 공간이 부족할 경우에는 새로운 행에 컨트롤이 배치되는 것을 볼 수 있다.
	
			//	TilePane Container
	
	// TilePane은 그리드로 컨트롤을 배치하되 고정된 셀(타일) 크기를 갖는 컨테이너이다. FlowPane과 마찬가지로 오른쪽에 컨트롤을 배치할 공간이 부족하면 새로운 행에 컨트롤을 배치한다.
	
	//			┌───────────────────────────────────────────────┐
	//			│TilePane										│
	//			│┌──────────┐	┌───────────┐	┌───────────┐	│
	//			││			│	│			│	│			│	│
	//			││	컨트롤	│	│	컨트롤	│	│	컨트롤	│	│
	//			││			│	│			│	│			│	│
	//			│└──────────┘	└───────────┘	└───────────┘	│
	//			└───────────────────────────────────────────────┘

	// 다음은 TilePane에서 사용할 수 있는 태그와 속성들이다.
	
	//	태그 및 속성				설명				적용
	//
	//	prefWidth			폭을 설정			TilePane
	//	prefHeight			높이를 설정			TilePane
	//	prefTileWidrg		타일의 폭을 설정		TilePane
	//	prefTileHeight		타일의 높이를 설정		TilePane
	//	<children>			컨트롤을 포함		TilePane
	
	// 다음은 여러 개의 ImageView를 TilePane에 배치하였다. 셀의 크기를 100 x 100으로 지정하기 위해 prefTileHeight="100" prefTileWidth="100"으로 지정했다.
	
			//	GridPane Container
	
	// GridPane은 그리드로 컨트롤을 배치하되 셀의 크기가 고정적이지 않고 유동적인 컨테이너이다. 셀 병합이 가능하기 때문에 다양한 입력 폼 화면을 만들 때 매우 유용하게 사용할 수 있다.
	// 각 컨트롤은 자신이 배치될 행 인덱스와 컬럼 인덱스를 속성으로 가지며, 몇 개의 셀을 병합할 것인지도 지정할 수 있다.
	
	//			 ┌──────┐┌──────────────────────────────────────┐			┌───────────────────────────────┐
	//			 │	0	││					1					│			│ - ■ GridPane (2 x 3)			│
	//			┌───────────────────────────────────────────────┐			│		□ Label (0, 0) 아이디		│
	//		┌───│┌──────┐┌─────────────────────────────────────┐│───┐		│		□ TextField (1, 0)		│
	//		│ 0	││ 아이디	││									   ││ 0 │		│		□ Label (0, 1) 패스워드	│
	//		└───│└──────┘└─────────────────────────────────────┘│───┘		│		□ TextField (1, 1)		│
	//		┌───│┌──────┐┌─────────────────────────────────────┐│───┐		│ 								│
	//		│ 1	││패스워드	││									   ││ 1 │		│ - ■ HBox (0, 2)				│
	//		└───│└──────┘└─────────────────────────────────────┘│───┘		│		□ Button 로그인			│
	//		┌───│┌──────┐┌─────────────────────────────────────┐│───┐		│		□ Button 취소				│
	//		│ 2	││		││		로그인		취소				   ││ 2 │		└───────────────────────────────┘
	//		└───│└──────┘└─────────────────────────────────────┘│───┘
	//			└───────────────────────────────────────────────┘
	//			 │	0	││					1					│
	//			 └──────┘└──────────────────────────────────────┘

	// 다음은 GridPane에 적용 가능한 속성들이다.
	
	//	태그 및 속성					설명							적용
	//
	//	prefWidth				폭을 설정						GridPane
	//	prefHeiht				높이를 설정						GridPane
	//	hgap					수평 컨트롤 간격을 설정				GridPane
	//	vgap					수직 컨트롤 간격을 설정				GridPane
	//	<children>				컨트롤을 포함					GridPane
	//	GridPane.rowlndex		컨트롤이 위치하는 행 인덱스를 설정		컨트롤
	//	GridPane.columnIndex	컨트롤이 위치하는 컬럼 인덱스를 설정		컨트롤
	//	GridPane.rowSpan		행 병합 수를 설정					컨트롤
	//	GridPane.columnSpan		컬럼 병합 수를 설정				컨트롤
	//	GridPane.hgrow			수평 빈 공간 채우기를 설정			컨트롤
	//	GridPane.vgrow			수직 빈 공간 채우기를 설정			컨트롤
	//	GridPane.halignment		컨트롤의 수평 정렬을 설정			컨트롤
	//	GridPane.valignment		컨트롤의 수직 정렬을 설정			컨트롤
	
	// 다음은 로그인 화면을 GridPane으로 배치한 것이다.
	
			//	StackPane Container
	
	// StackPane은 컨트롤을 겹쳐 배치하는 컨테이너이다. 흔히 카드 레이아웃이라고 하는데, 카드가 겹쳐 있는것 처럼 컨트롤도 켭쳐질 수 있다.
	// 만약 위에 있는 컨트롤이 투명이라면 밑에 있는 컨트롤이 겹쳐 보이게 된다. StackPane은 화면 이동을 하기 위해 사용되기도 하는데, 자세한 설명은 17.12 화면 이동과 애니메이션을 참조하길 바란다.
	// 다음 두 개의 ImageView를 StackPane에 겹치도록 배치했다. 하단 이미지는 설경이고 상단 이미지는 투명한 배경을 가지고 있는 듀크이다. 실행해보면 듀크와 설경이 하나의 이미지처럼 보이지만, 상하로 겹쳐있다.
	
	//			┌───────────────────────────────────────────────┐		┌───────────────────────────────────────────────┐
	//			│StackPane										│		│	┌───────────────────────────────────────┐	│
	//			│	 		/──────────────────────────/		│		│	│이미지									│	│	
	//			│		   /		컨트롤 또는 컨테이너	  /			│		│	│										│	│
	//			│		  /──────────────────────────/──/		│		│	│			┌───────────────┐			│	│
	//			│			/						   /		│		│	│			│이미지			│			│	│
	//			│		   /──────────────────────────/──/		│		│	│			│				│			│	│
	//			│		  	 /							/		│		│	│			└───────────────┘			│	│
	//			│			/──────────────────────────/		│		│	└───────────────────────────────────────┘	│
	//			└───────────────────────────────────────────────┘		└───────────────────────────────────────────────┘
	
	
	
	
	
	//			┌───────────────────────────────────────────────┐
	//			│												│
	//			│	 											│
	//			│												│
	//			│												│
	//			│												│
	//			│												│
	//			└───────────────────────────────────────────────┘
}
