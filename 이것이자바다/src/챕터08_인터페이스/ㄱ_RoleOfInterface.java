package 챕터08_인터페이스;

public class ㄱ_RoleOfInterface {
	// 자바에서 인터페이스(interface)는 객체의 사용 방법을 정의한 타입이다. 인터페이스는 객체의 교환성을 높여주기 때문에 다형성을 구현하는 매우 중요한 역할을 한다.
	// 특히 자바 8에서 인터페이스의 중요성은 더욱 커졌다. 자바 8의 람다식은 함수적 인터페이스의 구현 객체를 생성하기 때문이다.
	// 인터페이스는 개발 코드와 객체가 서로 통신하는 접점 역할을 한다. 개발 코드가 인터페이스의 메소드를 호출하면 인터페이스는 객체의 메소드를 호출시킨다.
	// 그렇기 때문에 개발 코드는 객체의 내부 구조를 알 필요가 없고 인터페이스의 메소드만 알고 있으면 된다.
	
	//			메소드 호출				메소드 호출
	//		개발		→		인터페이스	 →		객체
	//		코드		←				 ←
	//			리턴 값				리턴값
	
	// 개발 코드가 직접 객체의 메소드를 호출하면 간단한데, 왜 중간에 인터페이스를 두는지 의문점이 생긴다.
	// 그 이유는 개발 코드를 수정하지 않고, 사용하는 객체를 변경할 수 있도록 하기 위해서이다. 인터페이스는 하나의 객체가 아니라 여러 객체들과 사용이 가능하므로 어떤 객체를 사용하느냐에 따라서 실행 내용과 리턴값이 다를 수 있다.
	// 따라서 개발 코드 측면에서는 코드 변경 없이 실행 내용과 리턴값을 다양화할 수 있다는 장점을 가지게 된다.
	
	//		
	//
	//								메소드 호출
	//									→		객
	//			메소드 호출		인			←		체
	//		개발		→		터		리턴값1
	//		코드		←		페					↕ 교환(대체)
	//			리턴값1 또는	이		메소드 호출
	//			리턴값2		스			→		객
	//									←		체
	//								리턴값2
	
}
