package 챕터13_제네릭;

public class ㄹ_GenericMethod {
	// 제네릭 메소드는 매개 타입과 리턴 타입으로 타입 파라미터를 갖는 메소드를 말한다.
	// 제네릭 메소드를 선언하는 방법은 리턴 타입 앞에 <> 기호를 추가하고 타입 파라미터를 기술한 다음, 리턴 타입과 매개 타입으로 타입 파라미터를 사용하면 된다.
	
	//	public <타입파라미터, ...> 리턴타입 메소드명(매개변수, ...) { ... }
	
	// 다음 boxing() 제네릭 메소드는 <> 기호 안에 타입 파라미터를 T를 기술한 뒤, 매개 변수 타입으로 T를 사용했고, 리턴 타입으로 제네릭 타입 Box<T>를 사용했다.
	
	//	public <T> Box<T> boxing(T t) { ... }
	
	// 제네릭 메소드는 두 가지 방식으로 호출할 수 있다. 코드에서 타입 파라미터의 구체적인 타입을 명시적으로 지정해도 되도, 컴파일러가 매개값의 타입을 보고 구체적인 타입을 추정하도록 할 수도 있다.
	
	//	리턴타입 변수 = <구체적인타입> 메소드명(매개값);	// 명시적으로 구체적 타입을 지정
	//	리턴타입 변수 = 메소드명(매개값);				// 매개값을 보고 구체적 타입을 추정
	
	// 다음 코드는 boxing() 메소드를 호출하는 코드이다.
	
	//	Box<Integer> box = <Integer>boxing(100);
	//	Box<Integer> box = boxing(100);
	
	// 다음은 예제는 Unit 클래스에 정적 제네릭 메소드로 boxing()을 정의하고 BoxingMethodExample 클래스에 호출했다.
	
	// 그 다음 예제는 Unit 클래스에 정적 메소드로 compare()를 정의하고 CompareMethodExample 클래스에서 호출했다.
	// 타입 파라미터는 K와 V로 선언되었는데, 제네릭 타입 Pair가 K와 V를 가지고 있기 때문이다. compare() 메소드는 두 개의 Pair를 매개값으로 받아 K와 V 값이 동일한지 검사하고 boolean 값을 리턴한다.
	
}
