package 챕터14_람다식;

public class ㄱ_LambdaExpressions {
	// 자바는 함수적 프로그래밍을 위해 자바 8부터 람다식(Lambda Expressions)을 지원하면서 기존의 코드 패턴이 많이 달라졌다.
	// 람다식은 수학자 알론조 처치가 발표한 람다 계산법에서 사용된 식으로, 이를 제자 존 매카시가 프로그래밍 언어에 도입했다.
	// 람다식은 익명 함수(anonymous function)를 생성하기 위한 식으로 객체 지향 언어보다는 함수 지향 언어에 가깝다.
	// 객체 지향 프로그래밍에서 익숙한 개발자들은 다소 혼란스러울 수 있지만, 자바에서 람다식을 수용한 이유는 자바 코드가 매우 간결해지고, 컬렉션의 요소를 필터링하거나 매핑해서 원하는 결과를 쉽게 집계할 수 있기 때문이다.
	// 람다식의 형태는 매개 변수를 가진 코드 블록이지만, 런타임 시에는 익명 구현 객체를 생성한다.
	
	//	람다식 -> 매개 변수를 가진 코드 블록 -> 익명 구현 객체
	
	// 예를 들어 Runnable 인터페이스의 익명 구현 객체를 생성하는 전형적인 코드는 다음과 같다.
	
	//	Runnable runnable = new Runnable() {
	//		public void run() {...}
	//	};										// 익명 구현 객체
	
	// 위 코드에서 익명 구현 객체를 람다식으로 표현하면 다음과 같다.
	
	//	Runnable runnable = () -> {...};		// 람다식
	
	// 람다식은 "(매개변수) -> { 실행코드 }" 형태로 작성되는데, 마치 함수 정의 형태를 띠고 있지만 런타임 시에 인터페이스의 익명 구현 객체로 생성된다.
	// 어떤 인터페이스를 구현할 것인가는 대입되는 인터페이스가 무엇이냐에 달려있다. 위 코드는 Runnable 변수에 대입되므로 람다식은 Runnable의 익명 구현 객체를 생성하게 된다.
}
