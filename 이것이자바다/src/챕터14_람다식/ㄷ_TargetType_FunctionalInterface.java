package 챕터14_람다식;

public class ㄷ_TargetType_FunctionalInterface {
	// 람다식의 형태는 매개 변수를 가진 코드 블록이기 때문에 마치 자바의 메소드를 선언하는 것처럼 보여진다.
	// 자바는 메소드를 단독으로 선언할 수 없고 항상 클래스의 구성 멤버로 선언하기 때문에 람다식은 단순히 메소드를 선언하는 것이 아니라 이 메소드를 가지고 있는 객체를 생성해 낸다.
	// 그럼 어떤 타입의 객체를 생성하는 것일까? 다음 코드를 보자.
	
	//	인터페이스 변수 = 람다식;
	
	// 람다식은 인터페이스 변수에 대입된다. 이 말은 람다식은 인터페이스의 익명 구현 객체를 생성한다는 뜻이 된다.
	// 인터페이스는 직접 객체화할 수 없기 때문에 구현 클래스가 필요한데, 람다식은 익명 구현 클래스를 생성하고 객체화한다.
	// 람다식은 대입될 인터페이스의 종류에 따라 작성 방법이 달라지기 때문에 람다식이 대입될 인터페이스를 람다식의 타겟 타입(target type)이라고 한다.
	
			//	Functional Interface ( @FunctionalInterface )		함수적 인터페이스 ( @FunctionalInterface )
	
	// 모든 인터페이스를 담다식의 타겟 타입으로 사용할 수는 없다. 람다식이 하나의 메소드를 정의하기 때문에 두 개 이상의 추상 메소드가 선언된 인터페이스는 람다식을 이용해서 구현 객체를 생성할 수 없다.
	// 하나의 추상 메소드가 선언된 인터페이스만이 람다식의 타겟 타입이 될 수 있는데, 이러한 인터페이스를 함수적 인터페이스(functional interface)라고 한다.
	// 함수적 인터페이스를 작성할 때 두 개 이상의 추상 메소드가 선언되지 않도록 컴파일러가 체킹해주는 기능이 있는데, 인터페이스 선언 시 @FunctionalInterface 어노테이션을 붙이면 된다.
	// 이 어노테이션은 두 개 이상의 추상 메소드가 선언되면 컴파일 오류를 발생시킨다.
	
	//	@FunctionalInterface
	//	public interface MyFunctionalInterface {
	//		public void method();
	//		public void otherMethod();	// 컴파일 오류
	//	}
	
	// @FunctionalInterface 어노테이션은 선택사항이다. 이 어노테이션이 없더라도 하나의 추상 메소드만 있다면 모두 함수적 인터페이스이다.
	// 그러나 실수로 두 개 이상의 추상 메소드를 선언하는 것을 방지하고 싶다면 붙여주는 것이 좋다. 
	// 람다식은 타켓 타입인 함수적 인터페이스가 가지고 있는 추상 메소드의 선언 형태에 따라서 작성 방법이 달라지는데, 이것에 대해서 자세히 알아보기로 하자.
	
			//	Lambda Expressions Without Parameter And Return Value		매개 변수와 리턴값이 없는 람다식
	
	// 다음 예제와 같이 매개 변수와 리턴값이 없는 추상 메소드를 가진 함수적 인터페이스가 있다고 가정해보자.
	// 이 인터페이스를 타겟 타입으로 갖는 람다식은 다음과 같은 형태로 작성해야 한다. 람다식에서 매개 변수가 없는 이유는 method()가 매개 변수를 가지지 않기 때문이다.
	
	//	MyFunctionalInterface fi = () -> { ... }
	
	// 람다식이 대입된 인터페이스의 참조 변수는 다음과 같이 method()를 호출할 수 있다. method() 호출은 람다식의 중괄호 {}를 실행시킨다.
	
	//	fi.method();
	
			//	Lambda Expressions With Parameter		매개 변수가 있는 람다식
	
	// 다음 예제와 같이 매개 변수가 있고 리턴값이 없는 추상 메소드를 가진 함수적 인터페이스가 있다고 가정해보자.
	// 이 인터페이스를 타겟 타입으로 갖는 람다식은 다음과 같은 형태로 작성해야 한다. 람다식에서 매개 변수가 한 개인 이유는 method()가 매개 변수를 하나만 가지기 때문이다.
	
	//	MyFunctionalInterface fi = (x) -> {...} 또는 x -> {...}
	
	// 람다식이 대입된 인터페이스 참조 변수는 다음과 같이 method()를 호출할 수 있다. 매개값으로 5를 주면 람다식의 x 변수에 5가 대입되고 x는 중괄호 {}에서 사용된다.
	
	//	fi.method(5);
	
			//	Lambda Expressions With Return Value
	
	// 다음 예제와 같이 매개 변수가 있고 리턴값이 있는 추상 메소드를 가진 함수적 인터페이스가 있다고 보자.
	// 이 인터페이스를 타겟 타입으로 갖는 람다식은 다음과 같은 형태로 작성해야 한다. 람다식에서 매개 변수가 두 개인 이유는 method()가 매개 변수를 두 개 가지기 때문이다.
	// 그리고 method()가 리턴 타입이 있기 때문에 중괄호 {}에는 return문이 있어야 한다.
	
	//	MyFunctionalInterface fi = (x, y) -> { return x + y; }		|	MyFunctionalInterface fi = (x, y) -> x + y;
	//	MyFunctionalInterface fi = (x, y) -> { return sum(x, y); }	|	MyFunctionalInterface fi = (x, y) -> sum(x, y);
	
	// 람다식이 대입된 인터페이스 참조 변수는 다음과 같이 method()를 호출할 수 있다. 매개값으로 2와 5를 주면 람다식의 x 변수에 2, y 변수에 5가 대입되고 x와 y는 중괄호 {}에서 사용된다.
	
	// int result = fi.method(2, 5);
	
	
}
