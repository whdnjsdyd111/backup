package 챕터09_중첩클래스_중첩인터페이스;

public class ㄴ_NestedClass {
	// 중첩 클래스는 클래스 내부에 선언되는 위치에 따라서 두 가지로 분류된다. 클래스의 멤버로서 선언되는 중첩 클래스를 멤버 클래스라고 하고, 메소드 내부에서 선언되는 중첩 클래스를 로컬 클래스라고 한다.
	// 멤버 클래스는 클래스나 객체가 사용 중이라면 언제든지 재사용이 가능하지만, 로컬 클래스는 메소드 실행 시에만 사용되고, 메소드가 시행 종료되면 없어진다.
	
	//		선언 위치에 따른 분류			선언 위치						설명
	//				인스턴스			class A {
	//				멤버 클래스				class B {...}			A 객체를 생성해야만 사용할 수 있는 B 중첩 클래스
	//		멤버						}
	//		클래스	정적				class A {
	//				멤버 클래스				static class B {...}	A 클래스로 바로 접근할 수 있는 B 중첩 클래스
	//								}
	//
	//								class A {
	//									void method() {
	//		로컬 클래스							class B {...}		method()가 실행할 때만 사용할 수 있는 B 중첩 클래스
	//									}
	//								}
	
	// 멤버 클래스도 하나의 클래스이기 때문에 컴파일하면 바이트 코드 파일(.class)이 별도로 생성된다. 바이트 코드파일의 이름은 다음과 같이 결정된다.
	
	//		A	$	B	.class
	//	바깥 클래스		멤버 클래스
	
	// 로컬 클래스일 경우 다음과 같이 $1이 포함된 바이트 코드 파일이 생성된다.
	
	//		A	$1	B	.class
	//	바깥 클래스		로컬 클래스
	
			//	Instance Member Class	인스턴스 멤버 클래스
	
	// 인스턴스 멤버 클래스는 static 키워드 없이 선언된 클래스를 말한다. 인스턴스 멤버 클래스는 인스턴스 필드와 메소드만 선언이 가능하고 정적 필드와 메소드는 선언할 수 없다.
	
	//	class A {
	//		/* 인스턴스 멤버 클래스 */
	//		class B {
	//			
	//			int field1;			// 인스턴스 필드
	//			B() { }				// 생성자		
	//			void method1() {}	// 메소드
	//			// 가능
	//			
	//			// static int field2;		// 정적 필드
	//			// static void method2()	// 정적 메소드
	//			// 불가능
	
	// A 클래스 외부에서 인스턴스 멤버 클래스 B의 객체를 생성하려면 먼저 A 객체를 생성하고 B 객체를 생성해야한다.
	
	//	A a = new A();
	//	A.B b = a.new B();
	//	b.field1 = 3;
	//	b.method1();
	
			//	Static Member Class		정적 멤버 클래스
	
	// 정적 멤버 클래스는 static 키워드로 선언된 클래스를 말한다. 정적 멤버 클래스는 모든 종류의 필드와 메소드를 선언할 수 있다.
	
	//	class A {
	//		/* 정적 멤버 클래스 */
	//		static class C {
	//			int field1			// 인스턴스 필드
	//			C() {}				// 생성자
	//			void method1() {}	// 인스턴스 메소드
	//
	//			static int field			// 정적 필드
	//			static void method2() {}	// 정적 멤소드
	//		}
	//	}
	
	// A 클래스 외부에서 정적 멤버 클래스 C의 객체를 생성하기 위해서는 A 객체를 생성할 필요가 없고, 다음과 같이 C 객체를 생성하면 된다.
	
	//	A.C c = new A.C();
	//	c.field1 = 3;
	//	c.method1();			// 인스턴스 멤버 사용
	//	
	//	A.C.field = 3;
	//	A.C.method2();			// 정적 멤버 사용
	
			// Local Class		로컬 클래스
	
	// 중첩 클래스는 메소드 내에서도 선언할 수 있다. 이것을 로컬(local) 클래스라고 한다. 로컬 클래스는 접근 제한자(public, private) 및 static을 붙일 수 없다.
	// 로컬 클래스는 메소드 내부에서만 사용되므로 접근을 제한할 필요가 없기 때문이다. 로컬 클래스 내부에는 인스턴스 필드와 메소드만 선언이 가능하고 정적 필드와 메소드는 선언할 수 없다.
	
	//	void method() {
	//		/* 로컬 클래스 */
	//		class D {
	//			D() { }
	//			int field1;
	//			D() {};
	//			void method1() {}	// 인스턴스 멤버 사용 가능
	//
	//			// static int field2;
	//			// static void method1() {}	// 정적 멤버 사용 불가능
	//		}
	//		D d = new D();
	//		d.field1 = 3;
	//		d.method1();
	//	}
	
	// 로컬 클래스는 메소드가 실행될 때 메소드 내에서 객체를 생성하고 사용해야 한다. 주로 다음과 같이 비동기 처리를 위해 스레드 객체를 만들 때 사용하는데, 스레드는 나중에 학습하게 된다.
	
	//	void method() {
	//		class DownloadThread extends Thread { ... }
	//		DownloadThread thread = new DownloadThread();
	//		thread.start();
	//	}
	
	// 다음 예제를 살펴보자.
}
