package 챕터10_예외처리;

public class ㄷ_ExceptionHandlingCode {
	// 프로그램에서 예외가 발생했을 경우 프로그램의 갑작스러운 종료를 막고, 정상 실행을 유지할 수 있도록 처리하는 코드를 예외 처리 코드라고 한다.
	// 자바 컴파일러는 소스 파일을 컴파일할 때 일반 예외가 발생할 가능성이 있는 코드를 발견하면 컴파일 오류를 발생시켜 개발자로 하여금 강제적으로 예외 처리 코드를 작성하도록 요구한다.
	// 그러나 실행 예외는 컴파일러가 체크해주지 않기 때문에 예외 처리 코드를 개발자의 경험을 바탕으로 작성해야한다. 예외 처리 코드는 try - catch - finally 블록을 이용한다. 
	// try - catch - finally 블록은 생성자 내부와 메소드 내부에서 작성되어 일반 예외와 실행 예외가 발생할 경우 예외 처리를 할 수 있도록 해준다. try - catch - finally 블록 작성 방법은 다음과 같다.
	
	//	정상 실행 되었을 경우							|		예외가 발생되었을 경우
	//											|	
	//	try {	│								|		try {	│
	//			└───────────────┐				|				└───────────────┐
	//		예외 발생 가능 코드	→	│				|			예외 발생	→			│
	//							│				|								│
	//	} catch( 예외클래스 e) {	│				|		} catch( 예외클래스 e) {	│
	//							│				|								│
	//		예외 처리				│				|			예외 처리		←───────┘
	//							│				|						│
	//	} finally {				│				|		} finally {		│
	//							│				|						│
	//		항상 실행;		┌───────┘				|			항상 실행;		│
	//					│						|						│
	//	}				↓						|		}				↓
	
	// try 블록에는 예외 발생 가능 코드가 위치한다. try 블록의 코드가 예외 발생 없이 정상 실행되면 catch 블록의 코드는 실행되지않고 finally 블록의 코드를 실행한다.
	// 만약 try 블록의 코드에서 예외가 발생하면 즉시 실행을 멈추고 catch 블록으로 이동하여 예외 처리 코드를 실행한다. 그리고 finally 블록의 코드를 실행한다.
	// finally 블록은 옵션으로 생략 가능하다. 예외 발생 여부와 상관없이 항상 실행할 내용이 있을 경우에만 finally 블록을 작성해주면 된다. 
	// try 블록과 catch 블록에서 return문을 사용하더라도 finally 블록은 항상 실행된다.
	// 이클립스는 일반 예외가 발생할 가능성이 있는 코드를 작성하면 빨간 밑줄을 그어 예외 처리 코드의 필요성을 알려준다. 빨간 밑줄에 마우스를 가져다 놓으면 다음과 같이
	// Unhandled exception(처리되지 않은 예외) 정보를 알 수 있다.
	// Class.forName() 메소드는 매개값으로 주어진 클래스가 존재하면 Class 객체를 리턴하지만, 존재하지 않으면 ClassNotFoundException 예외를 발생시킨다.
	// ClassNotFoundException 예외는 일반 예외이므로 컴파일러는 개발자로 하여금 예외 처리코드를 다음과 같이 작성하도록 요구한다. 다음 예제를 보자.
	
	// 이 예제를 실행시키면 6라인에서 ClassNotFoundException이 발생하는데, 이것은 java.lang.String2 클래스가 존재하지 않기 때문이다.
	// 6라인에서 예외가 발생하면 7라인을 실행해서 예외 처리를 하게 된다. ArrayIndexOutOfBoundsException이나, NumberFormatException과 같은 실행 예외는 컴파일러가
	// 예외 처리 코드를 체크하지 않기 떄문에 이클립스에서도 빨간 밑줄이 생기지 않는다. 오로지 개발자의 경험에 의해 예외 처리를 다음과 같이 작성해주어야 한다.
	
	
	
	
}
