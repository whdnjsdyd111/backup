11장에서 배운 JdbcTemplate 클래스를 사용하는 코드를 보면 SQLException이 발생하지 않음을 알 수 있다.


	// JdbcTemplate은 SQLException을 발생하지 않음
	public int counts() {
		return jdbcTemplate.queryForObject(
				"select count(*) from guestmessage",
				Integer.class);
	}
	
	
JdbcTemplate 클래스는 내부적으로 JDBC API를 이용해서 데이터베이스 연동을 처리하는데, 이 과정에서 SQLException이 발생하면 
SQLException을 스프링의 DataAccessException으로 변환해서 발생시킨다.

이와 비슷하게 o.s.stereotype.Repository 어노테이션을 이용하면 하이버네이트와 JPA API가 발생시키는 익셉션을 스프링의 DataAccessException으로 변환할 수 있다.
예를 들어, 하이버네이트 API를 사용하는 과정에서 하이버네이트의 ObjectNotFoundException이 발생하면 동일한 의미를 갖는 스프링의
ObjectRetrievalFailureException으로 변환해서 발생시킨다. 다음 코드는 @Repository 어노테이션의 적용 예이다.


	@Repository
	public class HibernateItemRepository implements ItemRepository {
	
		private SessionFactory sessionFactory;
		
		public void setSessionFactory(SessionFactory sessionFactory) {
			this.sessionFactory = sessionFactory;
		}
	
		@Override
		public Item findById(Integer itemId) {
			Item item = (Item_) sessionFactory.getCurrentSession().get(Item.class, itemId);
			return item;
		}
	}


@Repository 어노테이션이 적용된 클래스의 메소드가 발생시킨 익셉션을 스프링의 DataAccessException으로 변환하려면,
PersistenceExceptionTranslationPostProcessor를 빈 객체로 등록해주어야 한다.


	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
	
	<bean id="itemRepository"
		class="net.madvirus.spring4.chap13.store.persistence.HibernateItemRepository">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	
PersistenceExceptionTranslationPostProcessor 클래스는 @Repository 어노테이션이 적용된 빈 객체의 프록시 객체를 생성한다.
PersistenceExceptionTranslationPostProcessor는 기본적으로 인터페이스를 이용해서 프록시 객체를 생성하므로, 클래스 기반의 프록시를 생성하길 원한다면
다음과 같이 proxyTargetClass 속성의 값을 true로 설정해주어야 한다.


	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	
	
[	PersistenceExceptionTranslationPostProcessor의 동작 방식

PersistenceExceptionTranslationPostProcessor는 @Repository가 적용된 빈 객체의 프록시를 생성한다고 했다.
예를 들어, 다음과 같은 설정이 있고, HibernateItemRepository 클래스에 @Repository 어노테이션이 적용되어 있다고 해보자.


	<bean class="...dao.annotation.PersistenceExceptionTranslationPostProcessor" />
	
	<bean id="itemRepository"
		class="net.madvirus.spring4.chap13.store.persistence.HibernateItemRepository">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	
이 경우, PersistenceExceptionTranslationPostProcessor에 의해 HibernateItemRepository에 대한 프록시 객체가 생성된다.
이때, 생성된 프록시 객체는 원본 대상 객체에서 익셉션이 발생하면 직접 익셉션 변환 처리를 하지 않고, 다음 그림과 같이
PersistenceExceptionTranslationPostProcessor 구현 객체에 변환을 위임한다.


					PersistenceExceptionTranslationPostProcessor에 의해 생성
									ㅣ
			1: findById() →			ㅣ					2: findById →
	클라이언트	──────────────	itemRepository 빈 : Proxy		───────────────────	HibernateItemRepository
		   ← 6: 스프링 익셉션 발생			│			  ←	3: HibernateException 발생
									│
					5: 변환된 스프링의 ↑	│ 4: 스프링 익셉션으로 변환 처리
			DataAccessException 리턴	│ ↓
						PersistenceExceptionTranslator
	
	
그러면, PersistenceExceptionTranslationPostProcessor는 어떻게 설정할까?
스프링은 등록된 빈 객체 중에서 PersistenceExceptionTranslationPostProcessor 타입을 검색해서 사용한다.
이는, PersistenceExceptionTranslationPostProcessor 타입의 빈을 추가로 등록해주어야 한다는 것을 뜻한다.

하지만 실제로 PersistenceExceptionTranslator 타입의 빈을 추가로 설정할 필요는 없다. 스프링이 제공하는 연동 모율은 자체적으로
PersistenceExceptionTranslator을 구현하고 있다. 예를 들어, 하이버네이트 연동에 사용되는 LocalSessionFactoryBean는 이미
PersistenceExceptionTranslator 인터페이스를 구현하고 있기 때문에, 다음과 같이 스프링 연동 설정을 하는 과정에서 하이버네이트 용 PersistenceExceptionTranslator 구현이 등록된다.


	<!-- LocalSessionFactoryBean이 이미
		PersistenceExceptionTranslator를 구현하고 있다. -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		...
	</bean>
	
	
JAP와 MyBatis 연동에 사용되는 클래스들 역시 PersistenceExceptionTranslator를 구현하고 있으므로,
추가로 PersistenceExceptionTranslator 타입의 빈을 등록할 필요가 없다.]