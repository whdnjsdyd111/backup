지금까지 JSP를 이용해서 응답 결과를 생성하는 방법을 살펴보았다. 하지만, 웹 어플리케이션은 파일 다운로드 기능을 제공하기도 하며,
동적으로 엑셀이나 PDF 파일을 생성해야 하는 경우도 있다. 이 절에서는 파일 다운로드를 구현하기 위해 커스텀 View 클래스를 구현하는 방법과 
AbstractExcelView 클래스와 AbstractPdfView 클래스를 이용해서 엑셀과 PDF를 동적으로 생성하는 방법에 대해 살펴보도록 하겠다.


	4.1	파일 다운로드 구현을 위한 커스텀 View
	
파일 다운로드를 구현하는 경우, 컨트롤러 클래스는 다운로드 받을 파일과 관려된 정보를 생성해서 뷰에 전달할 것이다.
예를 들어, 아래 코드는 File 객체를 "download" 뷰에 전달하는 컨트롤러이다.


	@Controller
	public class DownloadController implements ApplicationContextAware {
	
		private WebApplicationContext context = null;
	
		@RequestMapping("/file/{fileId}")
		public ModelAndView download(@PathVariable String fileId, 
				HttpServletResponse response) throws IOException {
			File downloadFile = getFile(fileId);
			if (downloadFile == null) {
				response.sendError(HttpServletResponse.SC_NOT_FOUND);
				return null;
			}
			return new ModelAndView("download", "downloadFile", downloadFile);
		}
	
		private File getFile(String fileId) {
			String baseDir = context.getServletContext().getRealPath(
					"/WEB-INF/files");
			if (fileId.equals("1"))
				return new File(baseDir, "객체지향JCO14회.zip");
			return null;
		}
	
		@Override
		public void setApplicationContext(ApplicationContext applicationContext)
				throws BeansException {
			this.context = (WebApplicationContext) applicationContext;
		}
	}
	
	
위 코드는 단순히 fileId 값이 "1"이면 /WEB-INF/files 디렉토리에 있는 "객체지향JCO14회.zip" 파일을 "downloadFile" 이라는 모델 이름으로 뷰에 전달한다.
사용하는 뷰 이름 "download"이다. JSP는 파일 다운로드와 같은 기능을 구현하기 보다는 HTML 같은 결과를 보여주기에 적합한 뷰 구현 기술이다.
보통, HTML 응답이 아닌 경우에는 그에 알맞은 전용 뷰 클래스를 구현한다. 또한, BeanNameViewResolver를 이용해서 커스텀 뷰 클래스를 사용할 수 있도록 알맞게
설정해주어야 한다. 아래 코드는 설정 예이다.


	<bean class="org.springframework.web.servlet.view.BeanNameViewResolver" />
	
	<bean id="download"
		class="net.madvirus.spring4.chap08.file.DownloadView" />
		
		
파일 다운로드를 구현하려면 컨텐트 타입을 "application/octet-stream" 과 같이 다운로드를 위한 타입으로 설정해주어야 하며, 
다운로드 받는 파일 이름을 알맞게 설정하려면 Content-Disposition 헤더의 값을 알맞게 설정해주어야 한다.
다음은 파일 다운로드를 위한 뷰 클래스의 구현 예이다.


	file/DownloadView.java		411쪽
	
	
	4.2 AbstractExcelView 클래스를 이용한 엑셀 다운로드 구현
	
월별로 페이지 뷰 통제 정보나 급여 명세서와 같은 정보를 엑셀로 제공해야 하는 경우가 있는데, 스프링은 엑셀 형식으로 뷰 데이터를 생성할 수 있도록 다음으
두 View 클래스를 제공하고 있다.

	- AbstractExcelView : POI API를 이용하여 엑셀 응답을 생성한다.
	- AbstractJExcelView : JExcel API를 이용하여 엑셀 응답을 생성한다.
	
이 절에서는 POI API를 이용하여 엑셀 응답 결과를 생성하는 AbstractExclView 클래스의 사용 방법을 살펴볼 것이다. 
POI를 이용하려면 관련 의존 설정을 메이븐 pom.xml 파일에 추가해주어야 한다. 다음은 추가 예이다.


	<dependency>
		<groupId>org.apache.poi</groupId>
		<artifacId>poi</artifacId>
		<version>3.9</version>
	</dependency>
	
	
AbstractExcelView 클래스는 엑셀 응답 결과를 생성하기 위한 기본 기능을 제공하고 있으며, 이 클래스를 상속받은 뒤 다음의 메소드만 알맞게 재정의하면 된다.


	protected abstract void buildExcelDocument(
			Map<String, Object> model, HSSFWorkbook workbook,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception;
			
			
HSSFWorkbook은 POI API가 제공하는 엑셀 관련 클래스다. 하위 클래스는 이 클래스를 상속받아 엑셀 문서를 생성하면 된다.
다음은 AbstractExcelView 클래스를 상속받아 엑셀 문서를 생성하는 클래스의 작성 예를 보여 주고 있다.


	stat/PageRankView.java		414쪽
	 
	 
buildExcelDocument() 메소드는 엑셀 파일을 생성하는 데 필요한 HSSFWorkbook 객체를 파라미터로 전달받는데, 이 객체를 이용해서 알맞게 엑셀 데이터를 생성하면 된다.
라인 22에서는 웹 브라우저가 엑셀 파일을 다운로드할 때 사용할 이름을 설정한다. PageRankView 클래스는 HSSFWorkbook, HSSFWorkbook 등 POI 가 제공하는 기능을
이용해서 엑셀 데이터를 생성한다. buildExcelDocument() 메소드에서 엑셀 생성을 마무리 지으면, AbstractExcelView 클래스에서 실제로 엑셀 데이터를 웹 브라우저에 전송하게 된다.

[POI를 이용한 엑셀 생성에 대한 내용은	http://poi.apache.org/spreadsheet/	사이트를 참고하기 바란다.]

PageRankView를 만들었으므로, 컨트롤러에서 사용할 수 있도록 다음과 같이 "pageRank" 라는 이름으로 PageRankView를 빈으로 설정하자.


	<bean id="pageRank" class="net.madvirus.spring4.chap08.stat.PageRankView">
	</bean>
	
	<bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<property name="order" value="1" />
	</bean>
	
	
컨트롤러 클래스는 다음과 같이 PageRankView에서 필요로 하는 데이터를 모델에 담고 사용할 뷰 이름으로 "pageRank"를 리턴함으로써, 
PageRankView를 뷰로 사용할 수 있게 된다.


	@Controller
	public class PageRankStatController {
	
		@RequestMapping("/pagestat/rank")
		public String pageRank(Model model) {
			List<PageRank> pageRanks = ...
			model.addAttribute("pageRankList", pageRanks);
			return "pageRank";
		}
		
		
실제 컨트롤러를 통해서 PageRankView를 사용하게 되면, 엑셀 파일 다운로드를 받게 된다.
(http://localhost:8080/spring4-chap08/pagestat/rank		URL을 실행하면 rank.xls 파일을 다운로드 받게 된다.)


	4.3	AbstractPdfView 클래스를 이용한 PDF 다운로드 구현
	
스프링은 iText API를 이용해서 PDF를 생성할 수 있는 AbstractPdfView 클래스를 제공하고 있다.
iText를 사용하려면 다음과 같은 의존 설정을 메이븐 pom.xml에 추가해야 한다. (참고로, 아래 설정에서 <exclustions> 부분은 iText를 사용하기 위해 추가로 필요한 모듈 중에서
사용하지 않을 모듈을 지정한 것으로서 암호화 관련된 기능을 제외시켰다.)


	<dependency>
			<groupId>com.lowagie</groupId>
			<artifactId>itext</artifactId>
			<version>2.1.7</version>
			<exclusions>
				<exclusion>
					<groupId>bouncycastle</groupId>
					<artifactId>bcmail-jdk14</artifactId>
				</exclusion>
				<exclusion>
					<groupId>bouncycastle</groupId>
					<artifactId>bcprov-jdk14</artifactId>
				</exclusion>
				<exclusion>
					<groupId>bouncycastle</groupId>
					<artifactId>bctsp-jdk14</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>

	
AbstractPdfView 클래스를 상속받은 클래스는 다음의 메소드를 알맞게 재정의해서 PDF를 생성하면 된다.


	protected abstract void buildPdfDocument(Map<String, Object> model,
			Document document, PdfWriter writer,
			HttpServletRequest request, HttpServletResponse response) throws Exception
			
			
com.lowagie.text.Document 클래스는 iText를 제공하는 클래스로서, Document 객체에 PDF 문서를 생성하는 데 필요한 데이터를 추가함으로써 PDF 문서를 생성할 수 있다.
다음은 AbstractPdfView 클래스를 상속받아 PDF 문서를 생성하는 뷰 클래스의 구현 예를 보여주고 있다.


	view/PageReportView.java	418쪽
	
	
PageReportView를 스프링 빈으로 등록하고, 컨트롤러에서 해당 뷰를 사용하도록 구현하자.
(책의 예제 소스 중 PageRankStatController 클래스를 컨트롤러로 설정했다면	
http://localhost:8001/spring4-chap08/pagestat/rankreport	URL로 PDF 파일을 다운로드할 수 있다.)

[iText와 관련된 자세한 내용은 http://www.lowagie.com/iText/	사이트를 참고하기 바란다.]