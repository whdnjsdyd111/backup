JSP를 뷰로 사용하려면 앞서 살펴봤듯이 InternalResourceViewResolver를 사용한다.
아래 코드처럼 suffix 프로퍼티의 값을 .jsp로 지정함으로써 논리적 뷰 이름을 특정 JSP에 매핑할 수 있다.


	<bean id="viewResolver"
			class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	
[위 설정을 보면 /WEB-INF 디렉토리의 하위 디렉토리에 JSP 파일을 위치시키고 있다. 이렇게 /WEB-INF 디렉토리에 JSP를 위치시키는 이유는
클라이언트가 뷰를 위한 JSP에 접근하는 것을 막기 위함이다. /WEB-INF 디렉토리는 특수한 디렉토리로서 웹 컨테이너는 클라이언트가 
/WEB-INF 경로에 직접 접근하는 것을 제한하고 있다.]

스프링은 JSP에서 사용할 수 있는 커스텀 태그를 제공하고 있다. 이 절에서는 메시지 국제화를 위한 <spring:message> 커스텀 태그, 커맨드 객체와 HTML <form> 태그 사이의
연동을 위한 커스텀 태그, 그리고 에러 메시지 출력을 위한 커스텀 태그에 대해서 살펴보도록 하자.


	3.1	메시지 출력을 위한 설정
	
스프링이 제공하는 커스텀 태그를 이용해서 메시지를 출력하려면 먼저 MessageSource를 등록해야 한다.(MessageSource에 대한 내용은 4장을 참고)
이 장에서 사용할 MessageSource 설정은 다음과 같다.

	<bean id="messageSource"
			class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>message.label</value>
				<value>message.error</value>
			</list>
		</property>
		<property name="defaultEncoding" value="UTF-8" />
	</bean>
	
	
위 설정은 message 패키지에 위치한 label_[언어].properties 파일과 error_[언어].properties 파일로부터 메시지를 읽어오도록 설정했다.
메이븐 프로젝트의 경우에는 src/main/resources 폴더에 위치한 message 폴더에 해당 properties 파일이 위치한다.


	3.2 메시지 출력을 위한 <spring:message> 커스텀 태그
	
스프링은 MessageSource로부터 메시지를 가져와 출력해주는 <spring:message> 커스텀 태그를 제공하고 있다.
<spring:message> 커스텀 태그는 다음과 같이 code 속성을 이용하여 읽어 올 메시지의 코드를 지정한다.


	<%@ page contentType="text/html; charset=utf-8" %>
	<%@ taglib prefix="spring" uri="http://www.springframework.org/tags" %>
	<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
	<!DOCTYPE html>
	<html>
	<head><title><spring:message code="login.form.title"/></title></head>
	<body>
	
		<form:form commandName="loginCommand">
			<form:errors element="div" />
			<p>
				<label for="email"><spring:message code="email" /></label>: 
				<input type="text" name="email" id="email" value="${loginCommand.email}">
				<form:errors path="email"/>
			</p>
			<p>
				<label for="password"><spring:message code="password" /></label>: 
				<input type="password" name="password" id="password">
				<form:errors path="password"/>
			</p>
			<input type="submit" value="<spring:message code="login.form.login" />">
		</form:form>
	
		<ul>
			<li><spring:message code="login.form.help" /></li>
		</ul>
	</body>
	</html>
	
	
위 코드에서 사용되는 메시지를 읽어올 때 사용되는 리소스 파일은 다음과 같이 각 코드 값에 메시지를 설정하고 있을 것이다.
(참고로, 아래 코드는 spring4-chap08/src/main/resources/message/label.properties 파일에 포함되어 있다.


	email=이메일
	password=암호
	
	login.form.title=로그인 폼
	login.form.login=로그인
	login.form.help=이메일/암호로 yuna@yuna.com/yuna 입력 테스트
	
	
메시지 리소스 파일은 {숫자} 형식을 이용하여 변하는 부분을 명시할 수 있다. 다음은 메시지 프로퍼티 파일에 {숫자} 형식을 사용한 예를 보여주고 있다.


	greeting = {0} 회원님, {1}
	
	
{0}과 {1}은 플레이스홀더(place holder)로서 <mvc:message> 커스텀 태그는 arguments 속성을 통해 플레이스홀더에 들어갈 값을 설정할 수 있다.
이때, 각 값은 콤마를 이용하여 구분한다. 아래 코드는 arguments 속성의 사용 예를 보여주고 있다.


	<%@ taglib prefix="spring" uri="http://www.springframework.org/tags" %>
	...
	<spring:message code="greeting" arguments="${me}, ${greeting}" />
	
	
<spring:message> 태그는 주어진 코드에 해당하는 메시지가 존재하지 않으면 익셉션을 발생시킨다. 코드에 해당하는 메시지가 없을 때 익셉션을 발생시키는 대신
지정한 메시지를 출력하고 싶다면 text 속성에 기본 메시지를 입력하면 된다.


	<spring:message code="no_code" text="코드가 없습니다." />
	
	
출력되는 메시지에 '<'나 '&'와 같이 HTML에서 특수하게 처리되는 문자가 포함되어 있을 경우, 알맞게 처리해주어야 할 것이다.
이런 경우에는 htmlEscape 속성의 값을 true로 지정해주면 된다. 그러면, '<', '&'와 같은 특수한 문자는 '&lt;', '&amp;'와 같이 변경되어 출력된다.
htmlEscape 속성값을 지정하지 않으면, defaultHtmlEscape 컨텍스트 파라미터에서 지정한 값을 사용한다.

자바 스크립트에서 <spring:message> 태그가 생성한 문자열을 변수 값으로 사용하고 싶다면 javaScriptEscape 속성의 값을 true로 지정한다.
javaScriptEscape 속성 값이 true인 경우, 작은 따옴표나 큰 따옴표와 같은 문자를 \' 또는 \"와 자바 스크립트 특수 문자로 치환해준다.


	<script type="text/javascript">
		var value = '<spring:message code="title" javaScriptEscape="true" />'
	</script>
	...
	<input type="submit"
			value="<spring:message code='login.form.submit' htmlEscape='false'" />
			
			
<spring:message> 태그가 생성한 메시지를 출력하지 않고 request나 session과 같은 기본 객체의 속성에 저장할 수도 있다.
아래는 사용 예이다.


	<spring:message code="login.form.password" var="label" scope="request" />
	${label}: <input type= ... />
	
	
var 속성은 <spring:message> 태그가 생성한 메시지를 저장할 변수 이름을 지정한다.
이 변수 이름은 JSP의 page, request, session 기본 객체 등에 값을 저장할 때 사용되는 속성 이름으로 사용된다.
scope 속성은 메시지를 저장할 범위를 지정한다. 지정 가능한 범위는 page, request, session, application이며, 기본 값 page이다.


	3.3 스프링이 제공하는 폼 관련 커스텀 태그
	
스프링의 장점 중 하나는 입력 폼 값을 커맨드 객체에 저장하는 기능을 제공한다는 것이다.
또한 반대로 커맨드 객체의 값을 입력 폼에 출력해주는 JSP 커스텀 태그를 제공하고 있어, 좀 더 쉽게 폼 관련 태그를 생성할 수 있도록 도와 준다.
이들 태그를 사용하려면 먼저 다음과 같이 커스텀 태그를 설정해주어야 한다.


	<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
	
	
스프링은 <form:form> 태그부터 <form:textarea> 태그에 이르기까지 커맨드 객체를 손쉽게 연동할 수 있도록 도와주는  커스텀 태그를 제공하고 있는데,
이들 태그에 대해서 차례대로 살펴보자.

	(1) <form> 태그를 위한 커스텀 태그 <form:form>
	
<form:form> 커스텀 태그는 <form> 태그를 생성할 때 사용된다. <form:form> 커스텀 태그를 사용하는 가장 간단한 방법은 다음과 같다.


	<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
	...
	<form:form>
		...
	</form:form>
	
	
<form:form> 태그의 method 속성과 action 속성을 지정하지 않으면 method 속성의 값은 "post"로 설정되고 action 속성의 값은 현재 요청 URL의 값이 설정된다.
예를 들어, 현재 요청 URI가 "/spring4-chap08/auth/login" 이라면, 위 <form:form> 태그는 다음의 <form> 태그를 생성한다.


	<form id="command" action="/spring4-chap08/auth/login" method="post">
		...
	</form>
	
	
생성된 <form> 태그의 id 속성은 입력 폼의 값을 저장하는 커맨드 객체의 이름이 할당된다.
만약, 커맨드 객체의 이름이 기본값인 "command"가 아니라면 다음과 같이 commandName 속성에 커맨드 객체의 이름을 명시해주어야 한다.


	<form:form commandName="loginCommand">
		...
	</form:form>
	
	
<form:form> 커스텀 태그는 <form> 태그와 관련하여 다음의 속성들을 추가적으로 제공하고 있다.

	- action : 폼 데이터를 전송할 URL을 입력 (HTML <form> 태그 속성)
	- enctype : 전송될 데이터의 인코딩 타입. HTML <form> 태그 속성과 동일
	- method : 전송 방식, HTML <form> 태그 속성과 동일
	
<form:form> 태그의 몸체에는 <input> 태그나 <select> 태그와 같이 입력 폼을 출력하는 데 필요한 HTML 태그를 입력할 수 있다.
이때, 입력한 값이 잘못되어 다시 값을 입력해야 하는 경우에는 다음과 같이 커맨드 객체의 값을 사용해서 이전에 입력한 값을 출력할 수 있을 것이다.

	
	<form:form commandName="loginCommand" >
		...
		<input type="text" name="id" value="${loginCommand}" />
		...
	</form:form>
	
	
이렇게 커맨드 객체의 값을 다시 입력 폼에 출력해주어야 하는 경우에는 <form:input>이나 <form:checkbox>와 같이 스프링이 제공하는 커스텀 태그를 사용하면 좀 더 쉽게
커맨드 객체의 값을 입력 폼에 설정할 수 있다. 스프링은 입력 폼을 위한 다양한 커스텀 태그를 제공하고 있는데, 이들 커스텀 태그에 대해서 차례대로 살펴보자.

	(2) <input> 태그를 위한 커스텀 태그 : <form:input>, <form:password>, <form:hidden>
	
스프링은 <input> 태그를 위해 다음과 같은 커스텀 태그를 제공하고 있다.


	커스텀 태그				설명
	
	<form:input>		text 타입의 <input> 태그
	
	<form:password>		password 타입의 <input> 태그
	
	<form:hidden>		hidden 타입의 <input> 태그
	
	
<form:input> 커스텀 태그는 다음과 같이 path 속성을 이용해서 바인딩 될 커맨드 객체의 프로퍼티를 지정한다.

	
	<form:input commandName="memberInfo">
		<p>
			<form:label path="userId">회원 ID</form:label>
			<form:input path="userId" />
			<form:errors path="userId" />
		</p>
		
		
위 코드가 생성하는 HTML <input> 태그는 아래와 같다. 이때 id 속성과 name 속성의 값은 프로퍼티의 이름으로 설정하고,
value 속성에는 <form:input> 커스텀 태그의 path 속성에서 지정한 커맨드 객체의 프로퍼티 값이 출력된다.


	<form id="memberInfo" action="/spring4-chap08/member/regist" method="post">
		<p>
			<label for="email">이메일</label>:
			<input id="email" name="email" type="text" value="" />
		</p>
		
		
<form:password> 커스텀 태그는 password 타입의 <input> 태그를 생성하고, <form:hidden> 커스텀 태그는 hidden 타입의 <input> 태그를 생성한다.
두 태그 모두 path 속성을 사용하여 바인딩 할 커맨드 객체의 프로퍼티를 지정한다.


	<form:form commandName="loginCommand">
		<form:hidden path="defaultSecurityLevel" />
		...
		<form:password path="password" />
	</form:form>
	
	
	(3) <select> 태그를 위한 커스터 태그 : <form:select>, <form:options>, <form:option>
	
<select> 태그와 관련된 커스텀 태그는 다음과 같이 세 가지가 존재한다.


	커스텀 태그				설명
	
	<form:select>		<select> 태그를 생성한다. <option> 태그를 생성하는데 필요한 콜렉션을 전달받을 수 있다.
	
	<form:options>		지정한 콜렉션 객체를 이용하여 <option> 태그를 생성한다.
	
	<form:option>		한 개의 <option> 태그를 생성한다.
	
	
<select> 태그는 선택 옵션을 제공할 때 주로 사용된다. 예를 들어, <select> 태그를 이용해서 직업 선택을 위한 옵션을 제공한다고 하자.
이런 옵션 정보는 컨트롤러에서 생성해서 뷰에서 전달하는 경우가 많다. 보통 @ModelAttribute 어노테이션을 이용해서 <select> 태그에서 사용될 옵션 목록을 전달한다.


	@ModelAttribute("loginTypes")
	protected List<String> referenceData() throws Exception {
		List<String> loginTypes = new ArrayList<String>();
		loginTypes.add("일반회원");
		loginTypes.add("기업회원");
		loginTypes.add("헤드헌터회원");
		return loginTypes;
	}
	
	
이 경우 <form:select> 태그를 사용하면 뷰에 전달한 객체를 이용하여 간단하게 <select>와 <option> 태그를 생성할 수 있다.
다음 코드는 <form:select> 커스텀 태그를 이용하여 <select> 태그를 생성하는 예를 보여주고 있다.
이때 path 속성은 바인딩 될  커맨드 객체의 프로퍼티 이름을 입력하며, items 속성에는 <option> 태그를 생성할 때 사용될 콜렉션 객체를 지정한다.


	<form:form commandName="login">
		<form:errors />
		<p>
			<label for="loginType"><spring:message code="login.form.type" /></label>
			<form:select path="loginType" items="${loginTypes}" />
		</p>
		...
	</form:form>
	
	
위의 <form:select> 커스텀 태그는 다음과 같은 HTML 태그를 생성한다. (실제로는 한 줄로 생성된다.)


	<select id="loginType" name="loginType">
		<option value="일반회원">일반회원</option>
		<option value="기업회원">기업회원</option>
		<option value="헤드헌터회원">헤드헌터회원</option>
	</select>
	
	
생성된 코드를 보면 콜렉션 객체의 값을 갖고서 <option> 태그의 value 속성과 텍스트를 설정한 것을 알 수 있다.

<form:option> 태그를 사용해도 동일한 작업을 수행할 수 있다. <form:options> 커스텀 태그를 사용할 경우, 다음과 같이 <form:select> 커스텀 태그에
<form:options> 커스텀 태그를 중첩하며, <form:options> 커스텀 태그에서 items 속성을 설정한다.


	<form:select path="loginType">
		<option value="">--- 선택하세요 ---</option>
		<form:options items="${loginType}" />
	</form:select>
	
	
<form:options> 커스텀 태그는 주로 위 코드의 <option> 태그처럼 콜렉션에 포함되지 않은 값을 갖는 <option> 태그를 함께 추가할 때 사용된다.

<form:option> 커스텀 태그는 <option> 태그를 직접 지정할 때 사용된다.
다음 코드는 <form:option> 커스텀 태그의 사용 예이다.


	<form:select path="loginType">
		<form:option value="일반회원" />
		<form:option value="기업회원">기업</form:option>
		<form:option value="헤드헌터회원" label="헤드헌터">
	</form:select>
	
	
<form:option> 커스텀 태그의 value 속성은 <option> 태그의 value 속성 값을 지정한다.
<form:option> 커스텀 태그의 몸체 내용을 입력하지 않으면 value 속성에 지정한 값이 텍스트로 사용되고, 몸체 내용을 입력하면 몸체 내용이 텍스트로 사용된다.
label 속성을 사용할 경우에는 label 속성에 명시한 값이 텍스트로 사용된다. 위 코드가 생성한 HTML 코드는 다음과 같다.


	<select id="loginType" name="loginType">
		<option value="일반회원">일반회원</option>
		<option value="기업회원">기업회원</option>
		<option value="헤드헌터회원">헤드헌터회원</option>
	</select>
	
	
<option> 태그를 생성하는데 사용되는 콜렉션 객체가 String이 아닐 수도 있다. 예를 들어, <option>을 생성하는 데 사용되는 콜렉션에 다음과 같은 Code 클래스의 객체가 저장된다고 하자.


	public Class Code {
	
		private String code;
		private String label;
		
		... // get & set 메소드
	}
	
	
이 경우, Code 객체의 code 프로퍼티와 label 프로퍼티를 각각 <option> 태그의 value 속성과 테스트로 사용하고 싶을 것이다.
이렇게 콜렉션에 저장된 객체 자체가 아닌 객체의 특정 프로퍼티를 사용해야 하는 경우에는 다음과 같이 itemValue 속성과 itemLabel 속성을 사용해서 <option> 태그를 생성하는데
사용될 객체의 프로퍼티를 지정할 수 있다.


	<form:select path="jobCode">
		<option value="">--- 선택하세요 ---</option>
		<form:options items="${jobCodes}" itemLabel="label" itemValue="code" />
	</form:select>
	
	
위 코드는 jobCodes 콜렉션에 저장된 객체를 이용해서 <option> 태그를 생성한다. 이때 객체의 code 프로퍼티 값을 <option> 태그의 value 속성 값으로 사용하고,
객체의 label 프로퍼티의 값을 <option> 태그의 텍스트로 사용한다. <form:select> 커스텀 태그도 <form:options> 커스텀 태그와 마찬가지로
itemLabel 속성과 itemValue 속성을 사용할 수 있다.

스프링이 제공하는 <form:select>, <form:options>, <form:option> 커스텀 태그의 장점은 커맨드 객체의 프로퍼티 값과 일치하는 값을 갖는 <option>을
자동으로 선택해준다는 점이다. 예를 들어, 커맨드 객체의 loginType 프로퍼티의 값이 "기업회원"인 경우 다음과 같이 일치하는 <option> 태그에 selected 속성이 추가된다.


	<select id="loginType" name="loginType">
		<option value="일반회원">일반회원</option>
		<option value="기업회원 selected="selected">기업회원</option>
		<option value="헤드헌터회원">헤드헌터회원</option>
	</select>
	
	
	(4) checkbox 타입 <input> 태그를 위한 커스텀 태그 : <form:checkboxes>, <form:checkbox>
	
한 개 이상의 값을 커맨드 객체의 특정 프로퍼티에 저장하고 싶을 경우, 배열이나 List와 같은 타입을 사용해서 값을 저장한다.


	public class MemberRegistRequest {
		
		private String[] favoriteOs;
		
		public String[] getFavoriteOs() {
			return favoriteOs;
		}
		
		public void setFavoriteOs(String[] favoriteOs) {
			this.favoriteOs = favoriteOs;
		}
		
		...
		
		
HTML 입력 폼에서는 다음과 같이 checkbox 타입의 <input> 태그를 이용해서 한 개 이상의 값을 선택할 수 있도록 한다.


	<input type="checkbox" name="favoriteOs" value="윈도우XP">윈도우XP</input>
	<input type="checkbox" name="favoriteOs" value="윈도우7">윈도우7</input>
	
	
스프링은 checkbox 타입의 <input> 태그와 관련하여 다음과 같은 커스텀 태그를 제공하고 있다.


	커스텀 태그				설명
	
	<form:checkboxes>	커맨드 객체의 특정 프로퍼티와 관련된 checkbox 타입의 <input> 태그 목록을 생성한다.
	
	<form:checkbox>		커맨드 객체의 특정 프로퍼티와 관련된 한 개의 checkbox 타입 <input> 태그를 생성한다.
	
	
<form:checkboxes> 커스텀 태그는 items 속성을 이용하여 값으로 사용할 콜렉션을 전달받고, path 속성을 이용하여 값을 바인딩 할 커맨드 객체의 프로퍼티를 지정한다.
아래 코드는 <form:checkboxes> 커스탬 태그의 사용 예이다.


	<p>
		<form:label path="favoriteOs">선호 OS</form:label>
		<form:checkboxes items="${favoriteOsName}" path="favoriteOs" />
		<form:errors path="favoriteOs" />
	</p>
	

favoriteOsNames 모델의 값이 {"윈도우XP", "윈도우7"}일 경우, 위 코드의 <form:checkboxes> 커스텀 태그는 다음과 같이 HTML 코드를 생성한다.
(아래 코드는 실제로 공백 없이 모두 한 줄로 생성된다.)


	<span>
		<input id="favoriteOs1" name="favoriteOs" type="checkbox" value="윈도우XP" />
		<label for="favoriteOs1">윈도우XP</label>
	<span>
	<span>
		<input id="favoriteOs2" name="favoriteOs" type="checkbox" value="윈도우7" />
		<label for="favoriteOs2">윈도우7</label>	
	</span>
	<input type="hidden" name="_favoriteOs" value="on" />
	
	
각 <input> 태그의 value 속성에 사용된 값이 체크박스를 위한 텍스트로 사용되고 있다.
앞서 <option> 태그에서와 마찬가지로 콜렉션에 저장된 객체가 String이 아니라면, itemValue 속성과 itemLabel 속성을 이용해서 값과 텍스트를 설정할 때 사용될
객체의 프로퍼티를 설정할 수 있다.


	<p>
		<form:label path="favoriteOs">선호 OS</form:label>
		<form:checkboxes items="${favoriteOsName}" path="favoriteOs"
			itemValue="code" itemLabel="label" />
		<form:errors path="favoriteOs" />
	</p>
	
	
<form:checkbox> 커스텀 태그는 <form:option> 커스텀 태그와 같이 한 개의 checkbox 타입의 <input> 태그를 생성할 때 사용된다.
<form:checkbox> 커스텀 태그는 value 속성과 label 속성을 사용해서 값과 텍스트를 설정한다.


	<form:checkbox path="favoriteOs" value="WIN2000" label="윈도우즈2000" />
	<form:checkbox path="favoriteOs" value="WINXP" label="윈도우즈XP" />
	

<form:checkbox> 커스텀 태그는 바인딩되는 값의 타입에 따라서 처리 방식이 달라진다.
첫 번째 바인딩되는 값의 타입이 boolean 기본 데이터 타입이나 Boolean 래퍼 타입이라고 하자.


	public class MemberRegistRequest {
		
		private boolean allowNoti;
		
		public boolean isAllowNoti() {
			return allowNoti;
		}
		
		public void setAllowNoti(boolean allowNoti) {
			this.allowNoti = allowNoti;
		}
		...
		
		
이 경우 <form:checkbox>는 바인딩되는 값이 true인 경우 "checked" 속성을 설정하며, false인 경우 "checked" 속성을 설정하지 않는다.
또한 생성되는 <input> 태그의 value 속성의 값은 "true"가 된다. 아래 코드는 사용예이다.


	<form:checkbox path="allowNoti" label="이메일을 수신합니다" />
	

allowNoti의 값이 false와 true인 경우 각각 생성되는 HTML 코드는 다음과 같다. (실제로는 두 경우 모두 한 줄로 생성된다.)


	<!-- allowNoti가 false인 경우 -->
	<input id="allowNoti1" name="allowNoti" type="checkbox" value="true" />
	<input for="allowNoti1">이메일을 수신합니다.</label>
	<input type="hidden" name="_allowNoti" value="on" />
	
	<!-- allowNoti가 true인 경우 -->
	<input id="allowNoti1" name="allowNoti" type="checkbox"
		value="true" checked="checked" />
	<label for="allowNoti1">이메일을 수신합니다.</label>
	<input type="hidden" name="_allowNoti" value="on" />
	
	
<form:checkbox> 태그의 두 번째 처리 방식은 바인딩되는 값의 타입이 배열이나 Collection인 경우이다.
값의 타입이나 Collection인 경우, 해당 콜렉션에 값이 포함되어 있는 경우에 "checked" 속성을 설정한다.
예를 들어, 아래와 같은 타입의 프로퍼티가 있다고 해보자.


	public class MemberRegistRequest {
		
		private String[] favoriteOs;
		
		public String[] getFavoriteOs() {
			return favorite;
		}
		
		public void setFavoriteOs(String[] favoriteOs) {
			this.favoriteOs = favoriteOs;
		}
		...
		
		
<form:checkbox> 커스텀 태그를 사용하면 다음과 같이 favoriteOs 프로퍼티에 대한 폼을 처리할 수 있다.


	<form:checkbox path="favoriteOs" value="윈도우XP" label="윈도우XP" />
	<form:checkbox path="favoriteOs" value="윈도우7" label="윈도우7" />
	<form:checkbox path="favoriteOs" value="윈도우8" label="윈도우8" />
	
	
<form:checkbox> 태그의 세 번째 처리 방식은 임의 타입의 프로퍼티와 바인딩되는 경우이다.
이 경우, <form:checkbox> 태그는 value 속성의 값과 프로퍼티의 값이 일치하는 경우 "checked" 속성의 값을 설정한다.

	(5) radio 타입 <input> 태그를 위한 커스텀 태그 : <form:radiobuttons>, <form:radiobutton>
	
여러 가지 옵션 중에서 한 가지를 선택해야 하는 경우, radio 타입의 <input> 태그를 사용한다.
스프링은 radio 타입의 <input> 태그와 관련하여 다음과 같은 커스텀 태그를 제공하고 있다.

	
	커스텀 태그					설명
	
	<form:radiobuttons>		커맨드 객체의 특정 프로퍼티와 관련된 radio 타입의 <input> 태그 목록을 생성한다.
	
	<form:radiobutton>		커맨드 객체의 특정 프로퍼티와 관련된 한 개의 radio 타입 <input> 태그를 생성한다.
	
	
<form:radiobuttons> 커스텀 태그는 다음과 같이 items 속성을 이용하여 값으로 사용할 콜렉션을 전달받고,
path 속성을 이용하여 값을 바인딩 할 커맨드 객체의 프로퍼티를 지정한다.


	<p>
		<form:label path="tool">주로 사용하는 개발툴</form:label>
		<form:radiobuttons items="${tools}" path="tool" />
	</p>
	
	
<form:radiobuttons> 커스텀 태그는 다음과 같은 HTML 태그를 생성한다.


	<span><input id="tool1" name="tool" type="radio" value="Eclipse" />
		<label for="tool1">Eclipse</label></span>
	<span><input id="tool2" name="tool" type="radio" value="IntelliJ" />
		<label for="tool2">IntelliJ</label></span>
	<span><input id="tool3" name="tool" type="radio" value="NetBeans" />
		<label for="tool3">NetBeans</label></span>
		
		
<form:radiobuttons> 커스텀 태그는 1개의 radio 타입 <input> 태그를 생성할 때 사용되며, value 속성과 label 속성을 이용하여 값과 텍스트를 설정한다.
사용방법은 <form:checkbox> 태그와 동일하다.

	(6) <textarea> 태그를 위한 커스텀 태그 : <form:textarea>
	
게시글 내용과 같이 여러 줄을 입력 받아야 하는 경우 <textarea> 태그를 사용한다. 스프링은 <form:textarea> 커스텀 태그를 제공하고 있으며,
이 태그를 이용하면 커맨드 객체와 관련된 <textarea> 태그를 생성할 수 있다. 다음 코드는 사용 예이다.


	<p>
		<form:label path="etc">기타</form:label>
		<form:textarea path="etc" cols="20" rows="3" />
	<p>
	
	
<form:textarea> 커스텀 태그가 생성하는 HTML 태그는 다음과 같다.


	<p>
		<label for="etc">기타</label>
		<textarea id="etc" name="etc" rows="3" cols="20"></textarea>
	</p>
	
	
	(7) CSS 및 HTML 태그와 관련된 공통 속성
	
<form:input>, <form:select> 등 입력 폼과 관련해서 제공하는 스프링 커스텀 태그는 HTML의 CSS 및 이벤트 관련 속성을 제공하고 있다.
먼저 CSS와 관련된 속성은 다음과 같다.

	- cssClass : HTML의 class 속성 값
	- cssErrorClass : 폼 검증 에러가 발생했을 때 사용할 HTML의 class 속성 값
	- cssStyle : HTML의 style 속성 값
	
HTML 태그가 사용하는 속성 중 다음의 속성들도 사용 가능하다.

	- id, title, dir
	- disabled, tabindex
	- onfocus, onblur, onchange
	- onclick, ondbclick
	- onkeydown, onkeypress, onkeyup
	- onmousedown, onmousemove, onmouseup
	- onmouseout, onmouseover
	
또한, 각 커스텀 태그는 htmlEscape 속성을 사용해서 커맨드 객체의 값에 포함된 HTML 특수 문자를 엔티티 레퍼런스로 변환할 지의 여부를 결정할 수 있다.
htmlEscape 속성을 지정하지 않을 경우 defaultHtmlEscape 컨텍스트 파라미터에서 설정한 값을 사용한다.


	3.4 값 포맷팅 처리
	
<form:input>을 포함한 스프링의 폼 관련 커스텀 태그는 스프링 MVC를 위해 등록한 PropertyEditor나 ConversionService를 이용해서 값을 변환한다.
예를 들어, 컨트롤러 클래스에서 다음과 같이 Date 타입을 위한 PropertyEditor로 CustomDateEditor를 등록했다고 하자.


	@Controller
	@RequestMapping("/member/regist")
	public class RegistrationController {

		@RequestMapping(method = RequestMethod.POST)
		public String regist(
				@ModelAttribute("memberInfo") MemberRegistRequest memRegReq,
				BindingResult bindingResult) {
			new MemberRegistValidator().validate(memRegReq, bindingResult);
			if (bindingResult.hasErrors()) {
				return MEMBER_REGISTRATION_FORM;
			}
			memberService.registNewMember(memRegReq);
			return "member/registered";
		}
		
		@InitBinder
		protected void initBinder(WebDataBinder binder) {
			CustomDateEditor dateEditor = 
				new CustomDateEditor(new SimpleDateFormat("yyyyMMdd"), true);
			binder.registerCustomEditor(Date.class, dateEditor);
		}
		
		
WebDataBinder에 등록한 PropertyEditor는 요청 파라미터의 값을 Date 타입으로 변환하는 데 사용될 뿐만 아니라, 
스프링 커스텀 태그에서 커맨드 객체의 Date 타입 프로퍼티 값을 문자열로 변환하는데 사용된다. memberInfo 커맨드 객체의 birthday 프로퍼티가 Date 타입이라고 할 경우,
아래 <form:input> 태그는 CustomDateFormat을 이용해서 birthday 프로퍼티를 String 타입으로 변환해서 출력한다.


	<form:form commandName="memberInfo">
		...
		<p>
			<label for="birthday">생일</label>: 형식: YYYYMMDD, 예: 20200815
			<form:input path="birthday" />
			<form:errors path="birthday" /><br/>
		</p>
		...
	</form:form>

	
다음은 Date 타입의 birthday 프로퍼티 값이 '19980626'과 같이 지정한형식으로 변환된 결과 화면이다.


	http://localhost:8001/spring4-chap08/member/regist
	
	
<mvc:annotation-driven>이나 @EnableWebMvc를 이용해서 설정하면, 스프링 MVC는 ConversionService로 DefaultFormattingConversionService를 사용한다.
따라서, (DefaultFormattingConversionService이 지원하는) @DateTimeFormat 어노테이션을 사용하면,
별도의 PropertyEditor를 등록하지 않아도 @DateTimeFormat에서 지정한 형식으로 값을 출력할 수 있다.


	public class MemberRegistRequest {
		// 스프링 커스텀 태그에서 타입 변환할 때 사용
		@DateTimeFormat(pattern = "yyyyMMdd")
		private Date birthday;
		
		
	(1) 커스텀 포맷터 등록하기
	
WebDataBinder/@InitBinder를 이용해서 타입 변환을 위한 PropertyEditor를 등록하는 방법은 단일 컨트롤러에만 적용된다.
경우에 따라 스프링 MVC의 뷰로 사용되는 모든 JSP에 대해 동일한 변환 방식을 적용하고 싶을 때가 있을 것이다. 이런 경우 ConversionService를 직접 생성해서
Formatter를 등록하는 방법을 사용한다. ConversionService를 설정할 때에는 스프링 MVC가 기본으로 사용하는 FormattingConversionServiceFactoryBean를 사용하면 된다.
다음은 설정 예이다.


	<mvc:annotation-driven conversion-service="formattingConversionService" />
	
	<bean id="formattingConversionService"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="formatters">
			<set>
				<bean class="net.madvirus.spring4.chap08.MoneyFormatter" />
			</set>
		</property>
	</bean>
	
	
FormattingConversionServiceFactoryBean을 이용해서 Formatter를 등록하는 방법은 5장을 참고하자.


	3.5	스프링이 제공하는 에러 관련 커스텀 태그
	
7장에서 Validator를 이용해서 커맨드 객체의 값을 검사하는 방법을 살펴봤다.
Validator는 다음 코드처럼 Errors를 이용하여 에러 정보를 저장했었다.


	public class MemberRegistValidator implements Validator {
		
		@Override
		public boolean supports(Class<?> clazz) {
			return MemberRegistRequest.class.isAssignableFrom(claszz);
		}
		
		@Override
		public void validate(Object target, Errors errors) {
			MemberRegistRequest regReq = (MemberRegistRequest) target;
			if(regReq.getEmail() == null || regReq.getEmail().trim().isEmpty())
				error.rejectValue("email", "required");
				
			ValidationUtils.rejectIfEmptyOrWhitespace(errors, "name", "required");
			ValidationUtils.rejectIfEmptyOrWhitespace(errors, "password", "required");
			...
		}
	}
	
	
Errors나 BindingResult를 이용해서 에러 정보를 추가한 경우, <form:errors> 커스텀 태그를 이용해서 에러 메시지를 출력할 수 있다.
<form:errors> 커스텀 태그는 path 속성을 이용해서 커맨드 객체의 특정 프로퍼티와 관련된 에러 메시지를 출력할 수 있다.


	<form:form commandName="memberInfo">
		<p>
			<label for="email">이메일</label>
			<form:input path="email" />
			<form:errors path="email" />
		</p>
		...
		
		
위 코드의 경우 "email" 프로퍼티와 관련된 모든 에러 메시지를 출력한다. 에러 메시지는 앞서 7장에서 살펴봤듯이 에러 코드와 필드 이름, 그리고 커맨드 클래스 이름을 통해서 결정된다.
에러 코드와 메시지 코드 사이의 매핑에 대한 정보는 7장의 '에러 코드와 메시지' 절을 참고하기 바란다.

실제로 <form:errors> 커스텀 태그가 생성한 에러 메시지는 다음과 같은 형식으로 출력된다.


	http://localhost:8001/spring4-chap08/member/regist		[<form:errors> 커스텀 태그가 생성한 에러 메시지들 출력]
	
	
<form:errors> 커스텀 태그는 지정한 프로퍼티와 관련된 한 개 이상의 에러 메시지를 출력하게 된다.
각 에러 메시지를 생성할 때 다음과 같은 두 개의 속성이 사용된다.

	- element : 각 에러 메시지를 출력할 때 사용될 HTML 태그. 기본 값은 span이다.
	- delimiter : 각 에러 메시지를 구분할 때 사용될 HTML 태그. 기본 값은 <br/> 이다.
	
다음 코드는 위 두 속성의 사용 예를 보여주고 있다.

	
	<form:errors path="userId" element="div" delimiter="" />
	
	
	3.6 <spring:htmlEscape> 커스텀 태그와 htmlEscape 속성
	
defaultHtmlEscape 컨텍스트 파라미터를 사용해서 웹 어플리케이션 전반에 걸쳐서 HTML의 특수 문자를 엔티티 레퍼런스로 치환할 지의 여부를 결정하는데,
만약, 각 JSP 페이지별로 특수 문자 치환 여부를 설정해주고 싶다면 다음과 같이 <spring:htmlEscape> 커스텀 태그를 사용하면 된다.

	
	<%-- JSP 페이지의 앞 부분에서 설정 -->
	<spring:htmlEscape defaultHtmlEscape="true" />
	...
	<spring:message .../>
	<form:input .../>
	
	
<spring:htmlEscape> 커스텀 태그를 설정하면, 이후로 실행되는 <spring:message> 커스텀 태그나 <form:input> 커스텀 태그와 같이 스프링이 제공하는
커스텀 태그는 <spring:htmlEscape> 커스텀 태그의 defaultHtmlEscape 속성에서 지정한 값을 기본 값으로 사용한다.


	3.7 <form:form>의 RESTful 지원
	
스프링 MVC는 HTTP의 GET, POST, PUT, DELETE 방식을 지원하고 있으며, 다음과 같이 컨트롤러 메소드에서 어떤 HTTP 방식을 지원할지 선택할 수 있다.


	@Controller
	public class ArticleController {
	
		@RequestMapping(value="/article/{id}", method=RequestMapping.GET)
		public String read(@PathVariable("id") Integer id, Model model) {
			...
			return "article/read";
		}
		
		@RequestMapping(value="/article/{id}", method=RequestMethod.DELETE)
		public String delete(@PathVariable("id") Integer id, Model model) {
			...
			return "article/delete";
		}
		
		@RequestMapping(value="/article/{id}", method=RequestMethod.PUT)
		public String modify(@PathVariable("id") Integer id, Model model) {
			...
			return "article/modify";
		}
		
		@RequestMapping(value="/article/{id}", method=RequestMethod.POST)
		public String write(Model model) {
			...
			return "article/write";
		}
	}
	
	
그런데, 웹 브라우저는 GET 방식과 POST 방식만을 지원하고 있어서 DELETE 방식이나 PUT 방식의 요청을 전송할 수 없기 때문에, 
웹 브라우저를 이용할 경우 GET 방식과 POST 방식으로만 처리해야 했다.

스프링은 PUT과 DELETE 방식을 이용해서 컨트롤러를 구현하면서, 웹 브라우저에서도 그대로 해당 컨트롤러를 사용할 수 있도록 지원하고 있다.
이 기능을 이용하려면 다음의 두 가지 작업만 해주면 된다.

	- web.xml 파일에 HiddenHttpMethodFilter 적용
	- <form:form> 태그의 method 속성에 put 또는 delete 이용
	
먼저, web.xml 파일에 HiddenHttpMethodFilter를 설정한다. HiddenHttpMethodFilter의 필터 매핑 대상으로는 아래 코드와 같이 DispatcherServlet을 지정한다.


	<web-app>
		...
		<filter>
			<filter-name>httpMethodFilter</filter-name>
			<filter-class>
				org.springframework.web.filter.HiddenHttpMethodFilter
			</filter-class>
		</filter>
		
		<filter-mapping>
			<filter-name>httpMethodFilter</filter-name>
			<servlet-name>dispatcher</servlet-name>
		</filter-mapping>
		...
	</web-app>
	
	
이제 <form:form> 태그의 method 속성 값으로 delete 또는 put을 지정한다.


	<form:form method="delete">
		...
	</form:form>
	
	
<form:form> 태그의 method 값이 delete나 put인 경우 <form:form> 태그는 다음과 같이 hidden 타입의 <input> 태그를 추가로 생성한다.


	<form id="article" action="/chap08/article/1" methid="post">
		<input type="hidden" name="_method" value="delete" />
		...
		<input type="submit" value="삭제">
	</form>
	
	
HiddenHttpMethodFilter는 요청 파라미터에 _method 파라미터가 존재할 경우, _method 파라미터의 값을 요청 방식으로 사용하도록 스프링 MVC의 관련 정보를 설정한다.
DispatcherServlet은 이 정보를 이용해서 컨트롤러의 알맞은 메소드를 찾기 때문에, 웹 브라우저를 이용하더라도 RESTful 방식으로 구현된 컨트롤러를 사용할 수 있게 된다.