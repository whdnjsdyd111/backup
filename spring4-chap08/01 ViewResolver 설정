스프링 컨트롤러는 뷰에 의존적이지 않다.
컨트롤러는 아래 코드와 같이 결과를 생성할 뷰 이름만 지정할 뿐이다.

	
	@Controller
	public class HelloController {
	
		@RequestMapping("/hello.do")
		public String hello() {
			// 처리 결과를 뷰 이름 지정
			return "hello";
		}
	}
	
	
컨트롤러가 지정한 뷰 이름으로부터 응답 결과 화면을 생성하는 View 객체를 구할 때 사용되는 것이 ViewResolver이다.
스프링은 몇가지 ViewResolver 구현 클래스를 제공하고 있는데, 주요 ViewResolver 구현 클래스는 다음과 같다.


	ViewResolver 구현 클래스			설명
	
	InternalResourceViewResolver	뷰 이름으로부터 JSP나 Tiles 연동을 위한 View 객체를 리턴한다.
	
	VelocityViewResolver			뷰 이름으로부터 Velocity 연동을 위한 View 객체를 리턴한다.
	
	VelocityLayoutViewResolver		VelocityViewResolver와 동일한 기능을 제공하며, 추가로 Velocity의 레이아웃 기능을 제공한다.
	
	BeanNameViewResolver			뷰 이름과 동일한 이름을 갖는 빈 객체를 View 객체로 사용한다.
	
	
	1.1	ViewResolver 인터페이스
	
ViewResolver 인터페이스는 다음과 같이 정의되어 있다.


	package org.springframework.web.servlet;
	
	import java.util.Locale;
	
	public interface ViewResolver {
		View resolveViewName(String viewName, Locale locale) throws Exception;
	}
	
	
ViewResolver는 뷰 이름과 지역화를 위한 Locale을 파라미터로 전달받으며, 매핑되는 View 객체를 리턴한다.
만약 매핑되는 View 객체가 존재하지 않으면 null을 리턴한다.

	
	1.2 View 객체
	
ViewResolver가 리턴하는 뷰 객체는 응답 결과를 생성하는 역할을 한다. 모든 뷰 클래스는 View 인터페이스를 구현하고 있는데,
View 인터페이스는 다음과 같이 정의되어 있다.


	package org.springframework.web.servlet;
	
	import java.util.Map;
	
	import javax.servlet.http.HttpServletRequest;
	import javax.servlet.http.HttpServletResponse;
	
	public interface View {
	
		String RESPONSE_STATUS_ATTRIBUTE = View.class.getName() + ".responseStatus";
		String PATH_VARIABLES = View.class.getName() + ".pathVariables";
		String SELECTED_CONTENT_TYPE = View.class.getName() + ".selectedContentType";
		
		String getContentType();
		void render(Map<String, ?> model, HttpServletRequest request,
				HttpServletResponse response) throws Exception;
	}
	
	
getContentType() 메소드는 "text/html"과 가은 응답 결과의 컨텐트 타입을 리턴한다.
render() 메소드는 실제로 응답 결과를 생성한다. render() 메소드의 첫 번째 파라미터인 model에는 컨트롤러가 생성한 모델 데이터가 전달된다.
각각의 View 객체는 이 모델 데이터로부터 응답 결과를 생성하는데 필요한 정보를 구한다.


	1.3	InternalResourceViewResolver 설정
	
InternalResourceViewResolver 클래스는 InternalResourceView 타입의 뷰 객체를 리턴하는데, 이 뷰는 JSP나 HTML 파일과 같이 웹 어플리케이션의 내부 자원을 이용해서
응답 결과를 생성한다. JSTL이 존재할 경우 InternalResourceView의 하위 타입은 JstlView 객체를 리턴한다. (JstlView 클래스는 스프링의 지역화 관련 설정이 JSTL 커스텀 태그에 적용되도록 해준다.)

InternalResourceViewResolver 클래스의 설정 방법은 다음과 같다.


	<bean id="viewResolver"
			class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	
InternalResourceViewResolver는 컨트롤러가 지정한 뷰 이름으로부터 실제로 사용될 뷰를 선택하며, 이때 컨트롤러가 지정한 뷰 이름 앞뒤로
prefix 프로퍼티와 suffix 프로퍼티를 추가한 값이 실제로 사용될 자원의 경로가 된다.

예를 들어, 컨트롤러에서 다음과 같이 뷰 이름을 "hello"로 지정했다고 하자.


	ModelAndView mav = new ModelAndView("hello");
	return mav;
	
	
이 경우 InternalResourceViewResolver가 사용하는 자원의 경로는 다음과 같이 결정 된다.

			컨트롤러가 지정한 논리적 뷰 이름
					↓
	/WEB-INF/view/hello.jsp
	└────────────┘		└─┘
		prefix			suffix
		
		
	1.4	BeanNameViewResolver 설정
	
BeanNameViewResolver 클래스는 뷰 이름과 동일한 이름을 갖는 빈을 뷰로 사용한다.
BeanNameViewResolver는 주로 커스텀 View 클래스를 뷰로 사용해야 할 때 이용된다. 예를 들어, 파일 다운로드를  위한 정보를 읽어 와 뷰에 전달하는 컨트롤러는
다운로드 관련 정보를 뷰에 전달할 것이다.


	@Controller
	public class DownloadController {
	
		@RequestMapping("/download.do")
		public ModelAndView download(HttpServletRequest requesst,
				HttpServletResponse response) {
			File downloadFile = getFile(request);
			return new ModelAndView("download", "downloadFile", downloadFile);		
		}
		...
	}
	
	
위 결과를 보여 줄 View 클래스가 DownloadView 클래스라고 하자. 이 경우 DownloadView 클래스를 "download" 이름으로 빈에 등록하고
ViewResolver로 BeanNameViewResolver 클래스를 사용하면 된다.


	<bean id="viewResolver"
			class="org.springframework.web.servlet.view.BeanNameViewResolver" />
			
	<bean id="download"
			class="net.madvirus.spring4.chap08.view.DownloadView" />
			
			
위 코드와 같이 설정하면 BeanNameViewResolver는 이름이 "download"인 DownloadView 객체를 뷰로 검색하며, 
DispatcherServlet은 DownloadView를 이용해서 DownloadController의 처리 결과를 출력하게 된다.


	1.5 다수의 ViewResolver 설정하기
	
하나의 DispatcherServlet은 두 개 이상의 ViewResolver를 가질 수 있다. 다수의 ViewResolver 중에서 어느 ViewResolver를 사용할 지 여부는 순서값을 이용해서 결정하며,
적용 순서 값은 다음의 두 가지 중 한 방법으로 설정할 수 있다.

	- ViewResolver 구현 클래스가 o.s.core.Ordered 인터페이스를 구현했다면,  order 프로퍼티에 우선순위 값을 설정
	- ViewResolver 구현 클래스에 @Order 어노테이션이 있다면, @Order 어노테이션의 값을 우선순위 값으로 사용
	
우선순위 값이 작을수록 우선순위가 높으며, 우선순위를 지정하지 않을 경우 가장 낮은 우선순위에 해당하는 Integer.MAX_VALUE를 우선순위 값으로 갖는다.
ViewResolver 구현 클래스가 o.s.core.Ordered 인터페이스를 구현하지 않았거나 @Order 어노테이션으로 순서를 정하지 않은 경우에도 가장 낮은 우선순위를 갖게 된다.

참고로, 스프링이 제공하는 모든 ViewResolver는 Ordered 인터페이스를 상속받고 있기 때문에 order 프로퍼티를 이용해서 우선순위를 지정할 수 있다.

DispatcherServlet은 우선순위가 높은(즉, order 값이 작은) ViewResolver에게 뷰 이름에 해당하는 View 객체를 요청한다.
만약, 우선순위가 높은 ViewResolver가 null을 리턴하면, 그 다음 우선순위를 갖는 ViewResolver에 View를 요청한다.
최종적으로 ViewResolver를 통해서 View 객체를 구하면, 해당 View 객체를 이용하여 응답 결과를 생성한다.

아래 코드는 order 프로퍼티를 이용해서 우선순위를 지정한 설정의 예를 보여주고 있다.


	<bean
		class="org.springframework.web.servlet.BeanNameViewResolver"
		p:order="0" />
	
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:prefix="/WEB-INF/viewjsp/" p:suffix=".jsp"
		p:order="1" />
		
		
우선순위를 결정할 때 주의할 점은 InternalResourceViewResolver는 마지막 우선순위를 갖도록 지정해야 한다는 점이다.
그 이유는 InternalResourceViewResolver는 항상 뷰 이름에 매핑되는 View 객체를 리턴하기 때문이다.
InternalResourceViewResolver는 null을 리턴하지 않기 때문에, InternalResourceViewResolver의 우선순위가 높을 경우 우선순위가 낮은 ViewResolver는 사용하지 않게 된다.