JSP 페이지가 내부적으로 어떠한 처리 방식에 의해 동작되는지 살펴본다.
웹 브라우저에서 웹 서버로 JSP 페이지를 요청하면, 웹 서버는 이 요청을 웹 컨테이너로 넘긴다. 이런 요청을 받은 웹 컨테이너는 해당 JSP 페이지를 찾아서 서블릿인 .java 파일로 변환하는 파싱(parsing) 과정을 거친 후 컴파일된다.
컴파일된 서블릿(.class)은 최종적으로 웹 브라우저에 응답되어 사용자는 그 결과를 보게 된다. 이러한 과정은 해당 JSP 페이지가 최초로 요청되었을 때 단 한번만 실행된다.
이후 같은 페이지에 대한 요청이 있으면 변환된 서블릿 파일이 서비스된다.


										3 JSP 페이지를 servelt으로 변환
			1 a.jsp 요청	┌───────────────┐ ┌───────>	a_jsp.java
┌───────────┐───────>	│	웹서버 <───┐	│ │				│
│  웹 브라우저	│			│	^ 2		6	│ │				v 4 컴파일
└───────────┘<───────	│	└──────	웹 컨테이너	<──────	a_jsp.class
			7 응답		└───────────────┘		5
			

1 	사용자의 웹 브라우저에서 "http://서버주소./a.jsp"와 같은 형태로 JSP 페이지를 요청한다.

2 	웹 서버는 요청한 해당 페이지를 처리하기 위해 JSP 컨테이너에 처리를 넘긴다.

3 	해당 JSP 파일이 처음 요청된 것인지 판단하여 맞다면 JSP 파일을 서블릿으로 파싱(변환)한다. 즉, 그림에서와 같이 페이지를 요청한다면 a_jsp.java와 같은 서블릿 파일이 생성된다.
	만일 이전에 요청되었던 페이지라면 다시 파싱할 필요가 없으므로 바로 6 단계로 넘어간다.
	JSP 페이지는 실행을 위해서 서블릿으로 파싱되고 클래스 파일로 컴파일되는데, 이러한 과정은 JSP 페이지가 처음으로 호출되었을 때에만 거치게 된다.
	만일 이전에 어떤 JSP 파일이 호출된 적이 있었다면 이후로 들어오는 해당 JSP 파일의 요청에 대해서는 4와 5의 과정을 거치지 않는다. 그러나 이미 요청되었던 JSP 페이지의 내용이
	변경된 경우에는 서블릿으로 변환 및 컴파일되는 과정을 다시 거쳐서 웹 브라우저의 요청에 응답한다.
	
4 	서블릿 파일은 자바에서 실행 가능한 상태인 클래스 파일로 컴파일된다. a_jsp 페이지의 요청에 의해 생성된 a_jsp.java 서블릿 파일은
	a_jsp.class 파일로 컴파일된다.
	
5	클래스 파일은 메모리에 로딩되어 실행된다.

6	이 실행 결과는 다시 웹 서버에게 넘겨진다.

7	웹 서버는 웹 브라우저가 인식할 수 있는 HTML 형태로 결과를 웹 브라우저에게 응답한다.
	웹 서버로부터 응답 받은 결과물인 HTML 페이지를 웹 브라우저에게 실행시켜서, 해당 웹 페이지가 웹 브라우저에 표시된다.
	

웹 브라우저는 HTML 태그로 구성된 페이지를 실행시켜 주는 프로그램이다. 즉, 웹 서버에서 HTML 페이지가 실행되는 것이 아니라, 웹 브라우저에서 HTML 태그들이 실행되어서
비로소 화면에 보이게 되는 것이다. JSP 파일의 서비스 동작 방식과 순서를 한마디로 요약하면 "JSP 페이지는 서블릿으로 변환되어, 웹 브라우저의 요청에 대한 응답을 HTML 페이지로 생성한다" 라고 할 수 있다.
JSP 페이지가 서블릿으로 변환되어지더라도 처리 속도가 떨어지지 않는 것은 이러한 처리가 처음에 한 번만 수행되기 때문이다.

