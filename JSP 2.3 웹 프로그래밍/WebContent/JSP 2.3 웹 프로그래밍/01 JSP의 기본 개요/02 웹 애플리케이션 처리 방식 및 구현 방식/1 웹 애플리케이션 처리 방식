웹 애플리케이션을 처리하는 데는 CGI 방식과 웹 애플리케이션 서버 방식이 있다. 이 두 방식의 기본적인 처리 구조는 같으나 웹 서버가 웹 애플리케이션 프로그램을 사용하는 방식이 다르다.
예를 들어 5명의 사용자가 abc라는 페이지를 요청했고, 거기에는 ABC라는 프로그램이 사용되었다고 하자. 이러한 요청에 대해 CGI 방식과 웹 애플리케이션 서버 방식이 각각 어떤 식으로 처리하는지 알아보자.

(1) CGI ( Common Gatway Interface ) 방식

CGI 방식은 웹 서버가 애플리케이션 프로그램을 직접 호출하는 구조이다. 이때 애플리케이션 프로그램은 프로세스를 생성하여 처리하게 되는데, 1개의 요청에 대해 1개의 프로세스가 생성되어 그 요청을 처리한 뒤 종료한다.
위의 그 예에서 5명의 사용자가 모두 같은 abc 페이지를 요청하면, abc 페이지에서 ABC 프로그램을 사용하는 부분은 각각 프로세스가 생성된다.
즉, 아래의 그림과 같이 요청한 개수 3개에 해당하는 3개의 프로세스가 생성되는 것이다.


abc 페이지 요청
		->				↗	ABC 프로그램
		->		웹 서버	->	ABC 프로그램
		->				↘	ABC 프로그램
		

이러한 프로세스 기반의 CGI 프로그램은, 많은 사용자가 몰리는 웹 사이트에 요청되는 수많은 요청에 대해서 하나의 요청마다 새로운 프로세스가 생성되고, 처리하고, 종료하는 식의 운영 방식을 갖는다.
즉, 1000명의 사용자가 요청하면 1000개의 프로세스가 생성되어 처리된다. 이것은 시스템에 많은 부하를 가져오기 때문에 중대한 단점이 된다.
이런 문제 때문에 현재 일부의 UNIX 플랫폼을 제외하고는 CGI 방식을 사용하지 않는다.

(2) 웹 애플리케이션 서버 ( Web Application Server ) 방식

웹 애플리케이션 서버 방식은 웹 서버가 애플리케이션 프로그램을 직접 처리하지 않고, 웹 애플리케이션 서버가 처리하도록 넘기는 방식이다. 애플리케이션 서버 방식은 여러 명의 사용자가 동일한 페이지를 요청하여
같은 애플리케이션 프로그램을 처리할 때 오직 한 개의 프로세스만을 할당하고, 사용자의 요청을 쓰레드(Thread) 방식으로 처리한다.
앞의 예에서 3명의 사용자가 모두 같은 abc 페이지를 요청하면, abc 페이지에서 ABC 프로그램을 사용하는 부분은 한 번만 프로세스가 생성된다. 즉, 아래의 그림과 같이 5개를 요청하였어도
1개의 프로세스만 생성되고, 사용자의 요청은 쓰레드로 처리된다.


abc 페이지 요청
		->				->						↘
		->		웹 서버	->		웹 애플리케이션		->	ABC 프로그램
		->				->			서버			↗
		
이렇듯 여러 개의 요청에 대해 오직 1개의 프로세스만을 할당하고 사용자의 요청을 쓰레드로 처리하는 방식은 메모리를 절약할 수 있게 해준다. 따라서 CGI 방식에 비해
동시에 더 많은 사용자에게 서비스를 제공할 수 있을 뿐만 아니라 전체적으로 성능도 향상되어 보다 안정적인 웹 서비스를 제공할 수 있다.
이런 이유로 대기업의 웹 사이트나 포털 사이트들은 웹 애플리케이션 서버 방식을 채택하고 있다. 현재 가장 많이 사용되고 있는 웹 프로그래밍 언어인 JSP와 
ASP(우리나라를 제외하고는 비교적 많이 사용됨)는 모두 웹 애플리케이션 서버 방식을 취하고 있다.