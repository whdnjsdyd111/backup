JSP는 Java Server Pages의 약자로, 썬마이크로시스템즈 사의 자바 서블릿(Servlet) 기술을 확장시킨 웹 환경상에서 100% 순수한 자바만으로 서버 사이드 모듈을 개발하기 위한 기술이다.
JSP도 서블릿과 마찬가지로 서버 사이드에서 DBMS와 같은 백 엔드 서버(Back-end Server)와 연동하여 이들 백 엔드 서버의 데이터를 가공하여 화면에 표시할 수 있고,
여러 조건에 따라 표시할 수 있는 내용들을 동적으로 처리할 수 있는 기능을 제공하고 있다.
JSP는 웹 프로그래밍 언어 중의 하나로, 자바라는 언어를 기반으로 만들어졌다. 그래서 자바 언어가 갖는 다음과 같은 특징들을 그대로 이어 받고 있다.

- 객체 지향적		- 플랫폼에 독립적
- 네트워크 지향적		- 보안성이 뛰어남
- 멀티 스레드 지원	- 코드가 친근

자바는 J2SE(Standard Edition), J2EE(Enterprise Edition), J2ME(Micro Edition)으로 나누어져 개발되는데 JSP는 J2EE 구성하는 기술 중 하나이다.

(1) J2EE를 구성하는 기술의 개요

J2EE는 컨테이너(container)가 관리하는 컴포넌트(container-managed component) 그룹과 서비스 API(Service API) 그룹으로 나누어진다.
컨테이너는 여러 가지 컴포넌트를 가지고 있고, 컴포넌트들이 제공하는 각종 서비스를 관리하는 런타임(runtime) 환경을 제공한다. 이에 반해 서비스 API(Application Interface)는
실제로 사용하는 각종 서비스 환경을 제공한다. 이렇게 컨테이너 측면과 서비스 API 측면을 구별하는 이유는, 이미 개발되어 제공되는 서비스들 및 컨테이너를 연계하여 집중적인 튜닝을 통해 성능을 향상할 수 있기 때문이다.
즉, 커넥션 풀링(connection pooling)과 같이 전반적으로 사용되는 컴포넌트나 서비스는 그쪽 전문가에게 맡기고, 일선 개발자들은 비즈니스 로직 개발에 집중할 수 있다.

(2) 컨테이너 ( container )

프로그래밍에서 가장 중요한 요소는 재사용 가능한 비즈니스 로직을 작성할 수 있게 도와주는 컴포넌트이다. J2EE에서는 비즈니스 로직을 위해 웹 컨테이너(web container)와 
EJB 컨테이너(EJB container)를 제공한다. 웹 컨테이너(web container)는 서블릿과 JSP에 대한 실행 환경을 제공하고, EJB 컨테이너(EJB container)는 Enterprise JavaBean에 대한
실행 환경을 제공한다.

	컨테이너를 구성하는 3가지 기술
	
1 Servlet : 서버 쪽에서 실행되는 프로그램
2 JSP(Java Server Page) : 컴포넌트를 웹 페이지에 내장시켜 통합시킬 수 있다.
	JSP는 HTML, Java 코드, JavaBean 컴포넌트 등을 하나의 웹 페이지 내에 모두 포함한다.
	서블릿을 한 차원 더 확장시킨 버전이다.
3 EJB(Enterprise Java Bean) : EJB 스펙은 확장 가능하고(scalable), 다중 사용자 처리에 안전하며, 트랜잭션 기능을 인식하는
	분산된 비즈니스 애플리케이션 컴포넌트를 개발하기 위해 필요한 표준화된 모델을 제공한다. EJB는 비즈니스 로직을 구현한 각종 컴포넌트들을 서버에 분산시켜놓고,
	지속성 있는 데이터를 객체 지향적인 방식으로 표현할 수 있다.
	
(3) 서비스 API ( Service API )

	JDBC
	
J2EE의 구성 요소로 포함된 JDBC 2.0 API는 DataSource나 분산 트랜잭션 지원과 같은 향상된 기능을 제공한다.
DataSource 객체는 데이터베이스 리소스 풀링을 처리하고, 분산 트랜잭션 지원 기능은 몇몇 분산된 비즈니스 컴포넌트들이 하나의 단일 트랜잭션을 이룰 수 있게 한다.

	XML ( eXtensible Markup Language )
	
J2EE에서는 디폴로이먼트 디스크립터(deployment descriptors)를 작성하는 포맷으로 XML을 사용한다.
디플로이먼트 디스크립터는 J2EE 애플리케이션의 환경을 설정(배치)할 때 사용하는 것으로, Chapter 02에서 톰캣을 설치하면 직접 확인할 수 있다.
톰캣에서는 wrb.xml, server.xml 등이 해당된다.

	JavaMail
	
대규모 애플리케이션들은 일반적으로 이메일 메시지를 보내고, 읽을 수 있는 능력을 요구하는데, J2EE에서는 JavaMail API를 제공한다.

	JTA ( Java Transaction API )
	
J2EE에서는 EJB 등과 같은 컴포넌트 들에 대한 트랜잭션 관리를 자동화할 수 있는 스펙을 정의한다.
JTA는 컨테이너 내에 상주하면서, 다중 컴포넌트들과 다중 데이터 원본들에 대해서까지도 트랜잭션을 적용할 수 있도록 확장된 트랜잭션의 범위를 제공한다.

	JMS ( Java Massaging System )
	
JMS는 컴포넌트 간에 비동기적이며, 에러가 발생해도 잘 견딜 수 있는 (fault-tolerant : 무정지 네트워크의 구현) 애플리케이션 메시지를 주고받을 수 있게 해주는
표준적 API를 제공한다. JMS는 메시지 큐(message queue)라 불리는 소프트웨어를 통해 구현되는 경우가 많다.
메시지 큐는 컴포넌트들 간의 메시지 통신을 위한 일종의 허브(hub) 역할로, 메시지를 받아서 전달해주는 매개 역할을 책임진다. 메시지 큐를 사용해 메시지를 전달하면,
비록 실시간으로 메시지 통신이 일어나지 않더라도 메시지 통신에 일관성이 지켜진다.
JMS는 IBM사의 IQSeries나 Sonic사의 SonicMQ 등과 같은 기존의 메시지 소프트웨어들과 잘 어울려서 서비스한다.

	JNDI ( Java Naming and Directory Interface )
	
JNDI는 기업형의 네이밍과 디렉토리 서비스(naming and directory service)에 접근할 수 있게 하는 API로, 분산 환경에 있는 서버들 간에
객체를 공유하는 방법을 제공한다. DNS(Domain Name System)는 일종의 네이밍 서버로 시스템에서 이용되는 어떤 이름들의 영역(scope of name)을 관리하는데 쓰이며, 
각종 시스템들 사이에 이름을 번역해주는 일을 수행한다.