웹 애플리케이션이란 웹을 기반으로 실행되는 프로그램을 의미하며, 웹 프로그래밍을 통해 구현한다. 웹 애플리케이션은 다음과 같은 구조를 통해 사용자의 요청을 체계적으로 처리한다.

			http://www.naver.com
				요청 1					2						3
웹 브라우저			->		웹 서버			->		웹 애플리케이션		->		데이터베이스
Web Browser		<-		Web Server		<-			서버			<-
				응답 5					4
				
클라이언트					서버

웹 애플리케이션의 처리 순서는 1 웹 브라우저가 웹 서버에 어떠한 페이지를 요청하게 되면 2 해당 웹 서버는 웹 브라우저의 요청을 받아서 요청된 페이지의 로직 및 데이터베이스와의 연동을 위해
웹 애플리케이션 서버에 이들의 처리를 요청한다. 3 이때 웹 애플리케이션 서버는 데이터베이스와의 연동이 필요한 경우 이를 수행한다. 4 로직 및 데이터베이스 작업의 처리 결과를 웹 서버에 돌려보낸다.
5 그러면 웹 서버는 웹 브라우저에 결과를 응답하게 된다.

여기서 우리는 웹 애플리케이션이 웹 브라우저, 웹 서버, 웹 애플리케이션 서버, 데이터베이스로 구성되었다는 것을 알 수 있다. 이들의 각각의 기능은 다음과 같다.


웹 애플리케이션 구성 요소		기능

웹 브라우저				웹에서 클라이언트이며, 사용자의 작업창이라 할 수 있다.	
					예) IE, Chrome, Safari, FireFox 등
					
웹 서버				웹 브라우저의 요청을 받아들이는 곳으로 작업의 결과도 웹 브라우저에게 응답을 하는 곳이다.
					요청된 페이지의 로직 및 데이터베이스와의 연동을 위해 애플리케이션 서버에 이들의 처리를 요청하는 작업을 수행한다.
					예) 아파지(Apache), IIS(Internet Information Server)

웹 애플리케이션 서버(WAS)	요청된 페이지의 로직 및 데이터베이스와의 연동을 처리하는 부분이다. 영어권에서는 그냥 애플리케이션 서버라고 부른다.
					예) BEA사의 웹 로직(WebLogic), IBM의 웹스피어(WebSphere), 티맥스의 제우스(jeus), Caucho의 레진(Resin), Oracle의 글래스피시, 아파치 톰캣

데이터베이스			데이터의 저장소로 웹에서 발생한 데이터는 모두 이곳에 저장된다. 게시판의 글들, 회원의 정보 등을 예로 들 수 있다.
					사용자의 입장에서 가장 안쪽에 있기 때문에 데이터베이스 서버를 Back-end Server라고도 부른다.
					예) Oracle, Sybase, informix, Mssql, MySQL
					
					
JSP 웹 프로그래밍을 하려면 웹 서버, 웹 애플리케이션 서버, 웹 컨테이너가 필요하다. 이 책에서는 자카르타 프로젝트(Jakarta Project)에서 무료로 제공하는 웹 컨테이너인 톰캣을 사용해서
JSP 프로그래밍을 학습할 것이다. 톰캣은 웹 애플리케이션 서버의 기능을 가지고 있지만, 웹 애플리케이션 서버라기보다는 JSP와 서블릿을 서비스해주는 웹 컨테이너 역할로 주로 사용하기 때문에
보통 웹 컨테이너로 불린다. 톰캣은 무료이기 때문에 유료 프로그램에 비해 처리해야 하는 자잘한 작업들이 많다는 점이 귀찮고 불편할 수 있으나, 오히려 제공하는 기능이 단순하기 때문에
기본을 이해하고 익혀야 하는 초보자들이 사용하기에는 적합하다. 작업 환경을 설정하는 방법은 Chapter 02에서 살펴본다.