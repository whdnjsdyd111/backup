(1) 모델 1 (Model 1) 구조

지금까지 우리가 작성한 JSP 웹 애플리케이션은 모두 모델 1의 형태로 만들어진 것이다. 모델 1 구조에서는 웹 브라우저의 요청(request)을 받아들이고, 
웹 브라우저에 응답(response)하는 것을 JSP 페이지가 단독으로 처리한다.

				요청 ->
	Web Browser			View (JSP page)	<--->	Model(JavaBean)	<--->	DB
				<- 응답
				
				
MVC 구조를 적용하면 뷰와 컨트롤러가 같은 JSP 페이지 안에서 실행된다. 즉, JSP 페이지가 뷰와 컨트롤러의 역할을 같이 해서 모든 사용자 요청의 진입점이 JSP 페이지가 된다.
모델 1 구조는 간단한 웹 애플리케이션을 구착할 때 적당하다. 중대형 프로젝트에서는 비즈니스 로직(business logic)과 뷰 사이의 구분이 없어져서 개발자와 디자이너의 작업의 분리가
어려운 문제가 발생할 수 있다.

	- 장점
	
		~ 페이지 흐름이 단순하여 개발 기간이 단축된다.
		~ MVC 구조에 대한 추가적인 교육이 필요 없고 개발팀의 팀원의 수준이 높지 않아도 된다.
		~ 중소형 프로젝트에 적합하다.
		
	- 단점
	
		~ 웹 애플리케이션이 복잡해질수록 유지보수가 힘들다.
		~ 디자이너와 개발자 간의 원할한 의사 소통이 필요하다.
		
		
(2) 모델 2 (Model 2) 구조

모델 2 구조에서는 요청(request) 처리, 데이터 접근(data access), 비즈니스 로직(business logic)을 포함하고 있는 컨트롤러와 뷰가 엄격히 구분되어 있다.
뷰는 어떠한 처리 로직도 포함하고 있지 않다.


					요청		Controller	<--->	Model	<--->	DB
					 →		(Servlet)			(JavaBean)
		Web Browser				│
								V
					응답			View
					 ←		(JSP page)
					 
					 
컨트롤러는 사용자 요청을 받고, 요청에 대한 로직 처리를 모델로 보낸다. 또한 모델로부터 받은 결과를 뷰로 보내서 사용자에게 응답한다. 즉, 전체적인 프로그램 흐름을 컨트롤러가 통제하는 구조이다.
이런 구조는 개발자와 디자이너의 역할과 책임을 명확하게 구분해줄 수가 있어서, 복잡한 중대형 규모의 프로젝트에 적합하다.

	- 장점
	
		~ 비즈니스 로직과 뷰가 분리되어 애플리케이션이 명료해지며 유지보수와 확장이 쉽다.
		~ 개발자와 디자이너와의 작업이 분리되어 있어 역할과 책임이 명확히 구분된다.
		
	- 단점
		
		~ 개발 초기에 구조 설계를 위한 시간이 많이 소요되므로 개발 기간이 길어진다.
		~ MVC 구조에 대한 개발자들의 이해가 필요해서 개발팀의 팀원의 높은 수준이 요구된다.
		
웹 애플리케이션을 개발할 때 모델 1 구조와 모델 2 구조 중 어떤 것을 선택해야 하는가의 문제는 개발하려는 애플리케이션의 복잡도(규모), 유지 보수의 빈도, 애플리케이션 컴포넌트의 재사용성 그리고
팀원의 수와 수준에 따라 결정해야 한다. 개발하려는 웹 애플리케이션의 복잡도(규모)가 적고 유지 보수가 빈번하지 않다면 모딜 1의 구조로 개발하는 것이 적합하며,
반대로 웹 애플리케이션의 복잡도(규모)가 크고 유지보수가 빈번하게 발생한다면 모델 2 구조를 사용하는 것이 적합할 것이다. 반드시 무엇이 정답이라고 할 수 없다.
상황에 따라 맞는 것을 선택하는 것이 가장 좋은 방법이다.