JDBC를 사용한 JSP와 데이터베이스를 연동하려면 JDBC 프로그램 순서와 각 단계에서 사용되는 클래스에 대해 알아야 한다.

(1) JDBC 프로그램의 작성 단계

JDBC 프로그램은 JDBC 드라이버 로드, Connection 객체 생성, 쿼리 실행 객체 생성, 쿼리 수행의 필수 4단계를 포함하여 다음과 같은 단계에 의해서 프로그래밍된다.

		
		JDBC 라이브러리 Import
		
		JDBC 드라이버 Load			1
		
		Connection 객체 생성		2
		
		쿼리 실행 객체 생성			3
		
		쿼리 수행					4
		
		Result 객체에서 데이터 추출
		
		Result 객체 Close
		
		쿼리 실행 객체 Close
		
		Connection 객체 Close
		
		
선수 단계인 JDBC 라이브러리는 'java.sql' 패키지를 import 받아 사용하며, 필수 4단계와 쿼리문의 종류에 따라 사용하는 5단계인 ResultSet 객체 처리에 대한 설명은 다음과 같다.

1) 1단계 (JDBC 드라이버 Load)

인터페이스 드라이버(interface driver)를 구현(implements)하는 작업으로, Class 클래스의 forName() 메소드를 사용해서 드라이버를 로드한다.
forName(String className) 메소드는 문자열로 주어진 클래스나 인터페이스 이름을 객체로 리턴한다.

// MySQL 드라이버 로딩
Class.forName("com.mysql.jdbc.Driver");

// Oracle 11g 또는 12c thin 드라이버 로딩
Class.forName("oracle.jdbc.driver.OracleDriver");

Class.forName("oracle.jdbc.driver.OracleDriver") 메소드는 드라이버들이 읽히기만 하면 자동으로 객체가 생성되고 DriverManager에 등록된다.
드라이버 로딩은 프로그램 수행 시 단 한 번만 필요하다.

2) 2단계 (Connection 객체 생성)

Connection 객체를 연결하는 것으로 Driver Manager에 등록된 각 드라이버들을 getConnection(String url) 메소드를 사용해서 식별한다.
이때 url 식별자와 동일한 것을 찾아서 매핑(mapping)한다. 찾지 못하면 no suitable error가 발생한다.

// MySQL 사용 시 Connection 객체 생성
Connection conn = 
	DriverManage.getConnection("jdbc:mysql://localhost:3306/jsptest", "jspid", "jsppass");
	
// Oracle 사용 시 Connection 객체 생성
Connection conn = 
	DriverManage.getConnection("jdbc:oracle:thin:@localhost:1521:orcl", "scott", "tiger");
	
3) 3단계(Statement/PreparedStatement/CallableStatement 객체 생성)

sql 쿼리를 생성하며 반환된 결과를 가져오게 할 작업 영역을 제공한다. Statement 객체는 Connection 객체의 createStatement() 메소드를 사용하여 생성하고,
PreparedStatement 객체는 prepareSatement() 메소드를, CallableStatement 객체는 prepareCall() 메소드를 사용한다.

// 여기 3단계부터는 JDBC 드라이버에 구애받지 않는다.
Statement stmt = conn.createStatement();
PreparedStatement pstmt = prepareStatement(sql);
CallableStatement cstmt = prepareCall();

2) 4단계(Query 수행)

Statement/PreparedStatement/CallableStatement 객체가 생성되면 객체의 excuteQuery() 메소드나 excuteUpdate() 메소드를 사용해서 쿼리를 수행한다.

	stmt.executeQuery() : recordSet 반환 -> Select문에서 사용
	
ResultSet rs = stmt.executeQuery("select * from 소속기관");

	stmt.executeUpdate() : 성공한 row 수 반환 -> Insert 문, Update문, Delete문에서 사용
	
String sql = "update member set passwd = '3579' where id = 'abc'";
stmt.excuteUpdate();

5) 5단계(ResultSet 처리)

executeQuery() 메소드는 수행 결과로 ResultSet을 반환한다. 5단계는 이 ResultSet 객체로부터 원하는 데이터를 추출하는 과정이다. 데이터를 추출하는 방법은 ResultSet 객체에서 한 행씩 이동하면서
getXxx()를 이용해서 원하는 필드 값을 추출하는데 이때 문자열 데이터를 갖는 필드는 re.getString("name") 혹은 rs.getString(1)로 사용한다.
여기에서 한 가지 주의할 사항은 자바 계열에서 ResultSet의 첫 번째 필드는 1부터 시작한다는 것이다. 이들 중 rs.getString("name")과 같이 필드명을 사용하는 것이 권장 형태이다.
한 행이 처리되고 다음 행으로 이동 시 next() 메소드를 사용한다.

while(rs.next()) {
	out.println(rs.getString("id"));
	out.println(rs.getString("passwd"));
}

(2) JDBC 프로그래밍에 사용되는 객체

JDBC 프로그래밍에서 사용되는 주요 클래스와 인터페이스에는 DriverManager 클래스, Connection 인터페이스, Statement 인터페이스, PreparedStatement 인터페이스,
CallableStatement 인터페이스, ResultSet 인터페이스가 있다.

1) DriverManager 클래스

DriverManager 클래스는 데이터 원본에 JDBC 드라이버를 통하여 JSP에서 사용할 수 있는 커넥션을 만드는 역할을 한다. DriverManager는 Class.forName() 메소드를 사용해서 생성되며,
이 메소드는 인터페이스 드라이버(interface driver)를 구현하는 작업을 수행한다.
Class.forName("com.mysql.jdbc.Driver") 메소드의 매개 변수로 "com.mysql.jdbc.Driver"과 같은 특정 드라이버 클래스를 지정하면 자동으로 로딩되어 객체가 생성되고
DriverManager에 등록된다. 드라이버 클래스를 찾지 못하면 forName() 메소드는 ClassNotFoundException 예외를 발생시키므로 반드시 예외 처리를 해야 한다.

// 예외 처리하는 방법 - ClassNotFoundException 사용
try {
	Class.forName("com.mysql.jdbc.Driver");
} catch(ClassNotFoundException e) {}

// 또는 Exception 사용
try {
	Class.forName("com.mysql.jdbc.Driver");
} catch(Exception e) {}

일반적으로 드라이버 클래스들은 로드될 때 객체를 생성하고, 자동적으로 DriverManager 클래스의 메소드를 호출하여 그 객체를 등록한다.
DriverManager 클래스의 모든 메소드는 static이기 때문에 반드시 객체를 생성할 필요가 없다. DriverManager 클래스는 Connection 인터페이스를 구현하는 객체를 생성할 때
getConnection() 메소드를 사용한다. getConnection() 메소드 사용 시 SQLException 예외를 발생시키므로 반드시 예외 처리를 해야 한다.

try {
	Connection conn = Driver.getConnection(url, user, pass);
} catch(SQLException e) {}

getConnection(url, user, pass) 메소드는 수행 결과로 데이터베이스와 JSP가 연동할 Connection 객체를 리턴한다. 이 메소드의 첫 번째 매개 변수 url은 jdbc: subprotocol:subname 과 같은 형태를
갖는 데이터베이스 URL을 기술한다. user는 데이터베이스에 접근할 수 있는 계정명이고 pass는 계정의 패스워드이다.
MySQL의 경우 getConnection("jdbc:mysql://localhost:3306/jsptest", "jspid", "jspass"); 과 같은 형태이고, 
오라클은 DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:orcl", "scott", "tiger");와 같은 형태를 갖는다.
프로그램 작성 시 Class.forName() 메소드는 다음에 DriverManager.getConnection() 메소드를 기술한다. 그런데 이들 메소드가 발생시키는 예외가 다르기 때문에
예외를 각각 기술해서 프로그래밍하면 다음과 같다.

try {
	Class.forName("com.mysql.jdbc.Driver");
} catch(ClassNotFoundException e) {
	Connection conn = DriverManager.getConnection(
		"jdbc.mysql://localhost:3306/jsptest", "jspid", "jsppass");
} catch(SQLException e) {}

이렇게 예외를 기술하는 것이 번거롭게 느껴진다면 모든 예외를 처리할 수 있는 Exception을 사용해서 한 번에 처리할 수 있다.

try {
	Class.forName("com.mysql.jdbc.Driver");
	Connection conn = DriverManager.getConnection(
		"jdbc.mysql://localhost:3306/jsptest", "jspid", "jsppass");
} catch(Exception e) {}

2) Connection 인터페이스

특정 데이터 원본(데이터베이스라 생각)에 대한 커넥션은 Connection 인터페이스가 구현된 클래스의 객체로 표현된다. 즉, 다음과 같이 DriverManager 클래스의 getConnection() 메소드를 사용해
Connection 객체인 conn을 얻어낸다는 의미이다.

Connection conn = DriverManager.getConnection(
	"jdbc:mysql://localhost:3306/jsptest", "jspid", "jsppass");
	
어떤 SQL 쿼리문을 실행하려면 반드시 Connection 객체가 있어야 한다. Connection 객체는 특정 데이터 원본과 연결된 커넥션을 의미하여, 특정한 SQl문을 정의하고 실행시킬 수 있는
Statement/PreparedStatement/CallableStatement 객체를 생성할 때 사용한다. 즉, Connection 객체는 쿼리를 실행할 수 있는
Statement/PreparedStatement/CallableStatement 객체를 얻어낼 때 사용한다.

// 쿼리를 실행하는 세 가지 객체들 중 하나를 사용
Statement stmt = conn.createStatement();	// Statement 객체 생성
PreparedStatement pstmt = conn.prepareStatement(sql);	// PreparedStatement 객체 생성
CallableStatement cstmt = conn.prepareCall();	// CallableStatement 객체 생성

또한 Connection 객체는 데이터베이스에 대한 데이터인 메타 데이터에 관한 정보를 데이터 원본에 질의하는 쿼리문을 사용할 때도 필요하다. 여기에는 사용 가능한 테이블의 이름, 특정 테이블의 열(row) 정보 등이 포함된다.
물론 실제로 쿼리를 수행하는 것은 쿼리를 실행하는 객체들이며, 메타 데이터의 정보는 쿼리의 결과(Result 객체)로부터 뽑아낸다.

3) Statement 인터페이스

Statement 인터페이스는 Connection 객체의 메소드를 사용해 객체로서 생성되고, 이 생성된 객체에 의해 구현되는 일종의 메소드 집합을 정의한다.
Statement 객체는 Statement 인터페이스를 구현한 객체로 Connection 클래스의 createStatement() 메소드를 호출함으로써 얻어진다.
createStatement() 메소드는 SQLException 예외를 발생시키므로 반드시 예외 처리를 해야 한다.

try {
	Sstatement stmt = connection.createStatement();
} catch(SQLException e) {
	e.printStackTrace();
}

일단 Statement 객체를 생성하면 Statement 객체의 executeQuery() 메소드 또는 executeUpdate() 메소드를 호출해 쿼리를 실행한다. 
이때 executeQuery() 메소드는 쿼리의 수행 결과로 ResultSet 객체를 반환(리턴)한다. Statement 객체는 단순한  질의문을 사용할 경우에 좋았으나,
쿼리의 수행속도가 가장 느려 요즘에는 거의 사용하지 않는다.

4) PrepareStatement 인터페이스

preparedStatement 인터페이스는 Connection 객체의 prepareStatement() 메소드를 사용해서 객체를 생성한다.
prepareStatement() 메소드는 SQLException 예외를 발생시키므로 반드시 예외를 처리 해야 한다.

try {
	PreparedStatement pstmt = conn.prepareStatement(sql);
} catch(SQLException e) {
	e.printStackTrace();
}

PreparedStatement 객체에서는 SQL 쿼리 문장이 미리 컴파일 된다. prepareStatement(sql) 메소드에서 sql이 실행할 쿼리문으로, 
preparedStatement(sql)와 같이 사용하면 쿼리문이 미리 컴파일 되는 것이다.
그리고 실행 시간동안 인수값을 위한 공간을 확보할 수 있다는 점에서 Statement 객체와는 다르다. PreparedStatement 객체는 동일한 쿼리문을 값만 바꾸어서 여러 번 실행해야 할 때,
인수가 많아서 쿼리문을 정리해야 될 필요가 있을 때 사용하면 좋다.
PreparedStatement 인터페이스는 각각의 인수에 대해 위치홀더(placeholder)를 사용하여 SQL 문장을 정의할 수 있게 해준다. 위치홀더는 물음포(?)로 표현되며 실행 시간동안 인수 값을 위한 공간을 확보하는 역할을 한다.

try {
	String sql = "insert into member values (?,?,?,?)";
	PreparedStatement pstmt = conn.prepareStatement(sql);
} catch(SQLException e) {
	e.printStackTrace();
}

위치 홀더는 SQL 문장에 나타나는 토큰(token)인데, 이것은 SQL 문장이 실행되기 전에 실제 값으로 대체된다.
이때 setXxx() 메소드를 사용한다. 이러한 방법을 이용하면 특정 값으로 문자열을 연결하는 방법보다 훨씬 쉽게 SQL 문장을 만들 수 있다.

try {
	String sql = "insert into member values (?,?,?,?)";
	PreparedStatement pstmt = conn.prepareStatement(sql);
	pstmt.setString(1, id);
	pstmt.setString(2, passwd);
	생략...
} catch(SQLException e) {
	e.printStackTrace();
}

PreparedStatement 객체는 각각의 SQL 데이터 타입을 처리할 수 있는 setXxx() 메소드를 제공한다. 여기서 Xxx는 해당 테이블의 해당 필드의 데이터 타입과 관련이 있다.
해당 필드의 데이터 타입이 문자열이면 setString()이 되고, 해당 필드의 데이터 타입이 int이면 setInt()가 된다.
setXxx(num, var)메소드는 두 개의 매개 변수를 가지고 있다. num은 파라미터 인덱스로서 물음표로 표현하는 위치홀더(?)와 대응된다. 첫 번째 위치홀더에 대응되면 1이고, 다음 위치홀더의 대응부터는 1씩 값을 증가시키면 된다.
var은 해당 필드에 저장할 데이터 값을 기술한다. 변수를 사용해도 된다.
위의 예제 중 pstmt.setString(1, id); 와 pstmt.setString(2, passwd); 에서 1과 2 값은 대응되는 위치홀더 번호이고, id와 passwd는 필드에 저장할 값을 가진 변수명이다.
그리고 위치홀더 번호가 1, 2에 해당되는 필드의 데이터 타입은 문자열이다.
PreparedStatement는 CallableStatement와 더불어 JSP에서 가장 많이 사용되는 쿼리 실행 객체이다.

5) CallableStatement 인터페이스

CallableStatement 인터페이스는 Connection 객체의 prepareCall() 메소드를 사용해서 객체를 생성한다.
prepareCall() 메소드는 SQLException 예외를 발생하므로 반드시 예외 처리를 해야 한다.

try {
	CallableStatement cstmt = connection.prepareCall();
} catch(SQLException e) {
	e.printStackTrace();
}

CallableStatement 객체는 주로 스토어드 프로시저(Stored Procedure)를 사용하기 위해 쓰인다. 스토어드 프로시저란 해당 데이터베이스 SQL 쿼리문을 저장한 함수를 말한다.
미리 저장된 쿼리를 사용하기 때문에 수행 속도가 빠른다. CallableStatement는 데이터베이스에 저장된 프로시저(함수)를 호출하는 것만으로 처리가 가능하다.
query1이 저장된 프로시저(스토어드 프로시저)이다.

conn.preparecall("{ call query1 }")

저장된 프로시저를 호출하는 형태는 다음과 같이 종류가 있다.

			종류								설명

{ call procedure_name[?, ?, ..] }			파라미터를 갖는 프로시저를 호출만 한다.

{ ? = call procedure_name[?, ?, ..] }		프로시저를 호출한 후 결과값을 얻어낸다.

{ call procedure_name }						파라미터가 없는 프로시저를 호출한다.

6) ResultSet 인터페이스

SQL문 중에서 Select 문을 사용한 쿼리문은 executeQuery() 메소드를 사용하는데, 이 메소드가 성공적으로 수행되면 ResultSet 객체가 반환된다.
ResultSet은 쿼리의 결과로 생성된 테이블(레코드셋, 레코드들)을 갖고 있다.
	
	
커서 위치	→	필드명1	필드명2	필드명3
			
			 XXX	 XXX	 XXX
			 XXX	 XXX	 XXX
			 
ResultSet 객체는 '커서(cursor)'라는 것을 가지고 있는데, 이를 이용해 Result 객체에서 특정 레코드를 참조할 수 있다. 
커서는 초기에 레코드(행)의 직전, 즉 필드명이 위치한 곳을 가리킨다.
			 
			 
			 필드명1	필드명2	필드명3
	next()		
커서		→	 XXX	 XXX	 XXX
			 XXX	 XXX	 XXX
			
Result 객체의 next() 메소드를 사용하면 다음 위치로 커서를 옮길 수 있다.
			 
			 id		passwd	age
			
			 XXX	 XXX	 XXX
			 XXX	 XXX	 XXX
			 
ResultSet의 first(), last() 메소드를 호출하면 커서를 첫 번째 레코드나 마지막 레코드로 옮길 수 있다. 그리고 beforeFirst()와 afterLast() 메소드는 커서의 위치를 첫 번째 레코드 이전과
마지막 다음으로 설정한다. previous() 메소드는 커서를 현재 위치에서 이전 레코드로 옮긴다.
ResultSet 에서는 레코드가 여러 개이므로 반복문을 사용하여 처리한다. next() 메소드가 다음으로 이동할 레코드가 있으면 true, 없으면 false 값을 리턴하는 점을 이용해서 while로 제어한다.

while(rs.next()) {	// 여러 레코드의 이동을 처리

}

쿼리의 수행 결과 레코드들인 ResultSet 객체는 현재 레코드의 필드명 혹은 레코드셋에서의 위치 번호를 사용해 어떤 필드의 값을 얻어낼 수 있다.
실제로 데이터가 저장된 곳은 필드이기 때문에 반드시 필드에서 값을 얻어낼 수 있어야 한다. 이 값을 얻어내기 위해 ResultSet 객체는 getXxx() 메소드를 제공한다. 이때 Xxx는 해당 필드의
데이터 타입이 결정한다. 즉, 해당 필드의 데이터 타입이 문자열이면 setString()이 되고, 해당 필드의 데이터 타입이 int이면 getInt()가 된다.
getXxx(필드명) 메소드로 레코드셋에서 해당 레코드의 필드 값을 가져올 수 있다. 여기서 필드명은 레코드셋에서 해당 필드의 이름을 나타낸다.

		getString()			getInt()
			  ↓				 ↓
			 id		passwd	age
			
			 XXX	 XXX	 XXX
			 XXX	 XXX	 XXX
			 
(3) JDBC를 사용한 JSP와 데이터베이스를 연동하는 프로그램 작성

JDBC를 사용한 JSP와 데이터베이스를 연동하는 프로그램을 작성하기 위해 먼저 연결 상황을 확인한다. 또한 레코드 추가, 검색, 수정, 삭제 작업을 수행하기 위한 JSP 페이지도 작성한다.

1) JDBC를 사용한 JSP와 데이터베이스 연동 테스트

JDBC를 사용한 JSP와 데이터베이스를 연동하는 프로그램을 작성하기 전에 먼저 제대로 연결이 되는지부터 테스트해야 한다. 그래야만 쿼리문을 사용할 수 있기 때문이다.


데이터베이스와 JSP를 연동을 확인하기 위한 driverTest.jsp 페이지를 작성하여, 연동이 잘 이루어지면 "제대로 연결되었습니다."
라는 메시지가 화면에 표시되는 예제이다.

driverTest.jsp		333쪽


2) JSP 페이지에서 테이블에 레코드 추가

JSP 페이지에서 테이블에 레코드를 추가(삽입)하려면 데이터베이스와 커넥션을 설정한 후 insert문을 사용한다. 해당 테이블에 레코드를 추가하는 작업은 executeUpate() 메소드를 통해 쿼리를 수행시켜서 한다.
executeUpdate() 메소드는 성공 시에 결과로 수행된 레코드의 수를 반환한다. 즉, insert 문에 의해 추가된 레코드의 수를 반환한다.


이 예제는 입력 폼에 아이디, 비밀번호, 이름, 주소, 전화번호를 입력하고 [입력완료] 버튼을 클릭하면 입력한 내용이 member 테이블에 추가되는 것이다. 
내용 입력 폼은 insertForm.jsp 페이지가 제공하고, 입력된 내용을 member 테이블에 추가하는 작업은 insertPro.jsp 페이지가 수행한다.

insertForm.jsp		335쪽

insertPro.jsp		338쪽


3) JSP 페이지에서 테이블의 레코드를 화면에 표시

JSP 페이지에서 테이블의 레코드들을 화면에 표시하려면 데이터베이스와 커넥션을 설정한 후 SELECT 문을 사용해서 해당 테이블의 레코드를 검색해서 레코드셋을 얻어온다.
해당 테이블의 레코드들을 화면에 표시하려면 executeQuery() 메소드를 사용해서 쿼리를 수행시킨다. executeQuery() 메소드는 쿼리의 결과로 레코드셋을 반환한다.
JSP에서 레코드셋은 ResultSet 객체로 반환되므로 이것을 처리해야 한다. 한 레코드씩 처리할 때는 보통 while문을 사용하고,
해당 레코드의 필드값은 getXxx() 메소드를 사용해서 얻어낸다.


이 예제는 member 테이블의 모든 필드를 포함한 전체 레코드를 JSP 페이지에 표시하는 것이다.

selectPro.jsp		340쪽


4) JSP 페이지에서 테이블에 저장된 레코드 수정

JSP 페이지에서 테이블의 레코드를 수정하려면 데이터베이스와 커넥션을 설정한 후 UPDATE문을 사용한다. 해당 테이블의 레코드를 수정하려면 executeUpdate() 메소드를 사용한다.
executeUpdate() 메소드는 성공 시 결과로 변경된 레코드의 수를 반환한다.


이 예제는 수정 폼에 아이디, 패스워드, 수정할 이름, 주소, 전화번호를 입력하고 [수정 완료] 버튼을 클릭하면 member 테이블에서 해당 레코드의 이름이 수정되는 것이다.
내용 수정 폼은 updateForm.jsp 페이지가 제공하고, member 테이블의 해당 레코드를 수정하는 작업은 updatePro.jsp 페이지가 수행한다.

updateForm.jsp		343쪽

updatePro.jsp		345쪽


5) JSP 페이지에서 테이블에 저장된 레코드 삭제

JSP 페이지에서 테이블에 저장된 레코드를 삭제하려면 데이터베이스와 커넥션을 설정한 후 DELETE문을 사용한다. 해당 테이블에 레코드 삭제의 실행은 executeUpdate() 메소드를 사용한다.
executeUpdate() 메소드는 성공 시  수행의 결과로 삭제된 레코드의 수를 반환한다.


이 예제는 삭제 폼에 아이디, 패스워드를 입력하고 [삭제] 버튼을 클릭하면 member 테이블의 해당 레코드를 삭제하는 것이다. 레코드 삭제에 필요한 정보를 입력하는 삭제 폼은 
deleteForm.jsp 페이지가 제공하고, 해당 레코드를 삭제하는 작업은 deletePro.jsp 페이지가 수행한다.

deleteForm.jsp		348쪽

deletePro.jsp		350쪽