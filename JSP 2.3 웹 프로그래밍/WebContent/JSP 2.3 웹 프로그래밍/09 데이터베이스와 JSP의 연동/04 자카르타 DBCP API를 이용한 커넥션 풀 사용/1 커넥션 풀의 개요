데이터베이스에 연결하기 위한 커넥션(Connection)은 객체이다. 이 객체는 만들어질 때마다 많은 시스템 자원이 필요하다. 메모리에 객체를 할당할 자리를 만들고 또 객체가 사용할 여러 자원들에 대한 초기화 작업, 또한
이 객체가 더 이상 필요 없을 때 객체를 거둬들이는 작업이 필요하다. 이런 작업 등이 요구되어서 객체의 생성 작업은 많은 비용을 요구한다.
데이터베이스 커넥션은 데이터베이스에 한 번 연결하기 위한 작업인데, 이러한 작업들을 매번 새로운 데이터베이스에 연결에 대한 요청이 들어올 때마다 수행해야 한다면 많은 부담이 된다.

이런 문제를 해결하기 위해 커넥션 풀(connection pools)에 커넥션 객체들을 만들어 놓은 후, 커넥션 객체가 필요한 경우 작성한 객체를 할당해 주고, 사용이 끝난 후에는 다시 커넥션 풀로 회수하는 방법을 사용한다.
즉, 한번 만들어져 사용된 커넥션 객체는 다시 커넥션 풀로 회수되는 것이다.
커넥션 풀은 끊임없이 생성되는 커넥션 문제 해결이 목적으로, 반드시 컨테이너(container)에 1개만 만들어지도록 해야 한다. 컨테이너가 자동 지원을 못할 경우 커넥션 객체를 저장하고 있는 저장소인 커넥션 풀은
벡터(Vector)와 같은 컬렉션을 사용해서 구현한다.

	- 커넥션 풀의 전략
	
1 service() 메소드(사용자 요청)당 1개씩 할당한다.


	┌─────────↓
	│		┌───┬───┬───┬───┬───┐
service		│	│	│	│	│	│
	↑		└───┴───┴───┴───┴───┘
	└─────────┘

	
2 커넥션의 개수를 제한한다.

3 커넥션 객체 관리자가 다 쓰면 자원을 회수한다.


							2 할당된 커넥션
							객체가 있는지 확인
		1 웹 브라우저의 요청	────────────────────────>	┌───────────────────────┐
								3 할당될 커넥션 객체가 있으면	│		커넥션 풀			│
┌───>	4 커넥션(connection)을 할당		<────────────	│						│
│				↓									│		커넥션			│
│		5 커넥션(connection) 객체 사용					│		커넥션			│
│				↓						반환			│		커넥션	Vector	│
│		6 커넥션(connection) 객체 변환	────────────>	└───────────────────────┘
│															│ 3	할당될 커넥션 객체가 없으면
│															│
│															V
│													커넥션 객체가 반환될 때까지 대기하거나
└───────────────────────────────────────────────	커넥션 객체를 임시로 생성


위 구현 방법대로 커넥션 풀을 직접 만들어도 되지만, 이는 바람직한 방법은 아니다.
커넥션 풀은 이것을 전문적으로 만드는 전문가에게 맡기고 우리는 비즈니스 로직에 전념하는 것이 좋다.
톰캣 5.0X 버전부터 커넥션 풀을 제공하고 있다. 이 책에서는 자카르타 프로젝트(Jakarta Project)에서 제공하는 DBCP API를 이용해서 커넥션 풀을 이용한다.