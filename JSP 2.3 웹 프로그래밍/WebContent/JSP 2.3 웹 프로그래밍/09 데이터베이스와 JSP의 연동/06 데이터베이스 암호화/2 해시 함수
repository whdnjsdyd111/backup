암호화된 정보를 다시 복호화할 수 없는 정보들은 해시 함수 알고리즘을 사용해서 암호화한다. 정보통신망법, 개인정보보호법에서 비밀번호는 해시 함수를 사용해서 암호화해야 한다.
해시 함수는 임의의 정보를 입력받아서 고정된 길이의 암호화 값인 해시 값을 얻어낸다. 그러나 암호화 값인 해시 값으로 원래의 정보를 얻어내는 복호화가 불가능하다.
즉, 해시 함수를 사용해서 비밀번호를 입력하면 암호 값을 갖고 원래의 비밀번호를 알아낼 수 없다는 의미이다. 원래의 비밀번호를 알 수 없기 때문에 안전성이 보장된다.


	암의 정보	───>	해시 함수	─O─> 	고정 길이 암호값
	
	임의 정보	<─X─	해시 함수	───>	고정 길이 암호값

	
해시 함수에서는 원래의 데이터에 salt라는 비밀 값을 추가해서 암호를 생성한다.


	비밀번호	+	salt
	    ↘			 ↙	
		해시 함수
			↓
		암호화된 비밀번호
		

예를 들어 원래의 비밀번호 값 '1234'를 KISA(한국인터넷진흥원)에서 제공하는 SHA-256을 사용해 암호화하면 '03ACSADFERG5345ASDFGDFSERGERG34341E' 라는 값이 생성된다.
이 암호화된 값을 데이터베이스에 저장한다. KISA에서 제공하는 SHA-256 만으로 안심이 안 되면, 가장 강력하다고 알려진 Bcrypt를 겹쳐 사용하면 된다.
Bcrypt는 OpenBSD에서 기본 암호 매커니즘으로 사용하고 있다. 
아래는 1234를 SHA-256을 사용해 암호화한 '03ACSADFERG5345ASDFGDFSERGERG34341E'를 다시 BCrypt에 입력하여 재암호화하여
'!@#SADF4t3fdSFDSRG#$T#$RwaefaegT#$T#$T' 값을 얻어내는 과정이다.


String password = "1234";
String shapass = "";

// KISA에서 배포한 SHA256 클래스의 객체 생성
SHA256 sha = SHA256.getInstance();

try {	// SHA256 클래스의 getSha256 메소드 사용 시 트라이 캐치가 필요
	// 원래의 비밀번호를 SHA256를 사용해 암호 값으로 생성
	shapass = sha.getSha256(password, getBytes());
} catch (Exception e) {
	e.printStackTrace();
}

// Damien Miller가 만든 Bcrypt를 사용한 BCrypt 클래스의 hashpw() 메소드를 사용해 재암호화
String hashed = BCrypt.hashpw(shapass, BCrypt.gensalt());


	비밀번호	+	salt
	    ↘  			  ↙
		해시 함수
			↓
		암호화된 비밀번호
			↓
		해시 함수
			↓
		재암호화된 비밀번호
		
		
KISA 에서 제공하는 SHA256.java를 사용하면 비밀번호가 64개의 문자로 암호화되고, 다시 이것을 사용해 Damien Miller가 만든 BCrypt.java를 사용하면 60개의 문자로 재암호화된다.
따라서 데이터베이스에 비밀번호를 저장할 때는 60개의 문자를 저장하는 필드로 설정하면 된다.
나중에 현업에서는 좀 더 좋은 해시 함수를 사용해 실무 프로젝트를 작성할 것이다. 여기에서는 해시 함수를 사용해 데이터베이스의 정보를 암호화하는 방법을 이해하는 정도로만 구성해서 무료로 제공되는 간단한 것을 사용했다.


이 예제는 JSP 페이지에서 해시 함수를 사용해 비밀번호를 암호화해 데이터베이스에 저장하는 것이다. cryptProcess.jsp 페이지의 [비밀번호 모두 암호화] 버튼을 클릭하면 암호화되어 있지 않은 member 테이블의
비밀번호를 모두 일괄적으로 암호화 저장한 후 화면에 표시한다.
학습용 예제이므로 해시 함수를 생성하는 SHA256.java와 BCrypt.java는 기존에 제공되는 것을 사용했다. 실무에서 사용할 때는 그에 맞게 salt를 설정하거나 저장 위치를 고려한다.

UpdateDataBean.java		377쪽

UpdateDBBean.java		378쪽

cryptProcessList.jsp	383쪽

cryptProcess.jsp