선언문은 JSP 페이지 내에서 멤버 변수(c언어의 전역 변수와 비슷)나 메소드가 필요할 때 선언해서 쓰기 위한 요소이다. 변수 선언과 로직을 기술(메소드에서 함)한다는 점에서 뒤에 나오는 스크립트릿(Scriptlet)와 비슷하나,
선언의 위치가 달라서 쓰임이 다르다. 선언문(<%! %>)에서 선언된 변수는 자바에서와 마찬가지로 전역 변수 역할을 하는 멤버 변수가 되며, 별도의 메소드를 작성해서 로직을 기술한다.
반면에 스크립트릿(<% %>)에서 선언되는 변수는 지역 변수이고, 로직은 JSP 페이지의 기본 메소드(_jspService() 메소드) 내에 정의된다.
선언문의 문법은 다음과 같다.

<%! 문장 %>

(1) 선언문에서 변수 선언

선언문에서 선언된 변수는 JSP 페이지가 서블릿으로 파싱(parsing)될 때 서블릿의 멤버 변수가 된다.

<%!
	private String name = "Kingdora";
	private int year = 2020;
%>

위에서 선언한 변수 name과 year는 해당 JSP 페이지의 스크립트 요소들이 모두 참조할 수 있는 멤버 변수이며, 이 변수를 참조하는 스크립트릿 요소보다 선언문에서 선언한 변수가 뒤에 있다고 해도 name과 year 변수를 참조할 수 있다.
C언어 등에서는 반드시 변수를 선언한 뒤에 그 변수를 참조할 수 있으나, 자바에서는 변수의 선언이 그 변수를 사용하는 라인보다 뒤에서 선언되어도 사용 가능하다.
따라서 자바 기반의 JSP에서도 그 특징이 그대로 적용된다. 그러나 실무에서는 항상 변수를 먼저 선언하고 해당 변수를 참조하는 구조로 작성한다.


선언문에서 변수를 선언하는 이 예제의 학습으로 멤버 변수의 참조를 이해하자.

declarationTest1.jsp		108쪽


(2) 선언문에서 메소드 선언

선언문에서 선언된 메소드는 JSP 페이지 내에서 별도로 정의된 메소드로 사용된다. 즉, 기본 메소드인 _jspService() 메소드와 동등하게 사용된다.
기본 메소드는 JSP 페이지가 서블릿으로 파싱될 때 생성되는 메소드로, 스크립트릿을 학습할 때 확인한다.

<%!
	String id = "Kingdora";
	public String getId() {
		return id;
	}
%>

위에서 선언한 getId() 메소드는 멤버 변수 id 값을 리턴(반환)하는 메소드이다. 이때 id 변수는 선언문에서 선언된 멤버 변수로 getId() 메소드에서 접근할 수 있다.


선언문에서 메소드를 선언하는 이 예제의 학습을 통해 메소드를 선언해서 사용하는 방법을 이해하자.

declarationTest2.jsp		110쪽