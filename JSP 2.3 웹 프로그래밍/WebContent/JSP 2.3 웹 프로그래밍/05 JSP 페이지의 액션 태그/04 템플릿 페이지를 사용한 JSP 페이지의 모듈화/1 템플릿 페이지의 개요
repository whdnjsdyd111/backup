(1) 템플릿 페이지와 MVC와의 관련성

요즘 프로그램들은 대부분 MVC(Model-View-Controller) 기법으로 개발되고 있다.
MVC 기법이란 프로그램을 모델(Model), 뷰(View), 컨트롤러(Controller)로 나누어서 개발하는 것이다. 모델은 로직을 가지고 있는 부분으로 DB와 연동한다.
JSP 기반의 웹 프로그래밍에서는 보통 자바빈과 로직 클래스가 모델이 된다. 뷰는 사용자에게 제공하는 화면으로 UI(User Interface)에 해당한다.
JSP 기반의 웹 프로그래밍에서는 컨트롤러를 서블릿으로 작성한다.

이 책에서는 MVC 기법에 필요한 부분들을 학습하고, 최종적으로 모델 2 구조를 사용해서 MVC 패턴을 구현하는 것이 목적이다. (여기까지가 대충 초중급자)
그런데 템플릿 페이지를 작성한다면서 느닷없이 MVC를 거론하는 이유는 JSP 페이지가 MVC에서 뷰에 해당하고, 바로 그 뷰를 모듈화하는 것이 템플릿 페이지이기 때문이다.
JSP의 기본 문법을 끝마친 이 시점에서 이제부터 우리가 무엇을 위해 학습하는지 거론해야 하기 때문이다. 즉, 우리는 JSP 기반에서 MVC 패턴으로 웹 프로그래밍을 작성하는 것이 목적이다.
그것을 위해 학습을 하고 있는 중이다.

MVC 기법에서 뷰가 가장 쉽고 익숙한 것이다. 우리가 처음부터 여기까지 학습한 것은 모두 JSP 페이지를 만드는 것에 대한 설명이었다. 여기에는 웹 사이트를 구축하기 위해서 뷰에 해당하는 JSP 페이지를 모듈화해서 유지 보수를
쉽게 하는 것에 대해 학습한다.


				요청		┌───────────┐			┌───────┐
┌───────────┐───────>	│ Controller│<──────>	│ Model	│
│  웹 브라우저	│			└───────────┘			└───────┘
└───────────┘				│						^
			^				V						│
			│	응답		┌───────────┐				V
			└───────────│	View	│				DB
						└───────────┘
						

(2) 템플릿 페이지의 개요

아래 그림은 앞에서 학습했던 페이지 모듈화의 웹 페이지 구조를 좀 더 자세히 표시한 것이다. 웹 브라우저에 표시되는 하나의 웹 페이지가 기본적으로 다수의 페이지로 이루어져 있다는 것을 알 수 있다.
아래의 그림은 형태로 4개의 페이지로 이루어진다. 상단과 좌측 메뉴 그리고 하단은 거의 고정적인 페이지가 표시되고, 매번 내용이 바뀌는 페이지는 중앙의 내용 부분이다.


┌───────────────────────┐
│	거의 고정적인 페이지		│
│						│
│	┌───────────────┐	│		┌───────────────────────┐
│	│ 상단에 들어갈 페이지	│──────────>│		상단				│
│	└───────────────┘	│		└───────────────────────┘		┌───────────────┐
│						│		┌───┐┌──────────────────┐		│  매번 바뀌는 페이지	│
│	┌───────────────┐	│		│좌 	││					│		│┌─────────────┐│
│	│ 좌측에 들어갈 페이지	│──────────>│측 	││		내용			│<───────│ 중앙 내용에           ││
│	└───────────────┘	│		│메 	││					│		││ 들어갈 페이지        ││
│						│		│뉴 	││					│		│└─────────────┘│
│	┌───────────────┐	│		└───┘└──────────────────┘		└───────────────┘
│	│ 하단에 들어갈 페이지	│──────────>┌───────────────────────┐
│	└───────────────┘	│		│		하단				│
└───────────────────────┘		└───────────────────────┘


이것을 프로그램 코드로 표시하면 다음과 같다. HTML5 태그에 대한 설명은 Chapter 03의 98쪽을 참조한다.


<header>
	<nav>상단</nav>
</header>
<div id="leftMenu">
	좌측
</div>
<section id="content">
	중앙의 내용
</section>
<footer>
	하단
</footer>