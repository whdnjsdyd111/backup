표현 언어는 자바 코드를 대신하는 새로운 언어의 출현이라 할 수 있다. 과거에 표현 언어에는 JSTL(JSP Standard Tag Library)에 상당히 종속적인 면을 가지고 있었으나. 
2.0 스펙에 포함되면서부터는 JSP 컨테이너가 표현 언어의 표현식을 해석할 수 있게 되었다. 따라서 표준 액션 태그, 커스텀 액션 태그 그리고 HTML 같은 템플릿 텍스트와 같이 자바 코드를 사용해야
했던 모든 곳에서 표현 언어를 사용할 수 있게 되었다.


(1) 특징

표현 언어는 null 값을 가지는 변수에 대해 좀 더 관대하고, 데이터의 형 변환을 조금 더 자동적으로 처리해준다.
JSP 페이지를 작성할 때 null값을 가지는 변수에 대한 가차없는 NullPointerException 을 당했을 것이다. 또한 객체가 저장되는 곳에 따라 본체의 객체가 Object형으로 추출되는 경우,
다시 이 객체를 꺼내서 사용하기 위해 다시 본래의 객체형으로 형 변환을 했던 것이 기억날 것이다. (물론 제네릭으로 이부분은 필요가 없을 것이다.) 그리고 파라미터의 파싱도 문제이다.
하지만 표현 언어는 이런 부분을 좀 더 자동적으로 처리해준다.

	- 표현 언어에서는 파라미터 값이 null이어도 상관없다.
	
이러한 표현 언어의 특징은 파라미터들을 폼에서 얻어오는 웹 애플리케이션에서 중요하다. 때에 따라 파라미터들이 어떤 요청에서는 필요하고, 다른 요청에서는 필요하지 않을 수 있다.

	- 표현 언어에서는 파라미터 값의 파싱을 신경쓰지 않아도 된다.
	
웹 브라우저는 파라미터 값을 항상 문자열 형태로 보내는데 반해, 웹 애플리케이션에서는 숫자나 true 또는 false 값을 가지는 boolean 형으로 사용해야 할 경우도 있다.
예를 들어 a.jsp?age=20 이라는 쿼리 문자열에서 a.jsp는 파라미터를 받는 페이지고, age가 파라미터명, 20 이 값이다. 이때 a.jsp로 전달되는 age 파라미터의 값은 20은 "20"과 같이 문자열로 전달된다.
만일 age 파라미터를 계산식에서 사용하려면 Integer.parseInt(age)와 같이 사용해서 정수(Integer)형으로 파싱해야 한다. 하지만 표현 언어에서는 파라미터 값을 파싱할 필요가 없다.

이런 표현 언어의 특징들은 프로그램을 좀 더 간결하고 쉽게 작성할 수 있게 해준다.


(2) 기능

표현 언어의 표현식은 다음과 같은 기능을 가지고 있다.

	- 변수의 연산자를 포함하고 함수를 호출할 수 있다.
	
${변수명}과 같은 변수의 사용 및 산술 연산자(+, -, *, / 등), 관계 연산자( >, <, ==, != 등), 논리 연산자(&&, ||, ! 등)의 연산자를 사용할 수 있다.
또한 func(매개 변수)와 같이 함수(클래스에서 정의한 메소드)를 호출할 수도 있다.

	- JSP의 영역(page, request, session, application)에 저장된 모든 속성 및 자바빈을 표현 언어의 변수로서 사용할 수 있다.
	
${sessionScope.id}와 같이 session 영역에 저장된 id 속성에 접근할 수 있으며, ${article.num}과 같이 자바빈 객체 article의 getNum() 메소드에 접근할 수 있다.

	- 내장 객체도 지원한다.
	
pageScope, requestScope, sessionScope, applicationScope 등이 영역 객체 및 param, paramValues, header, headerValues, 
cookie, pageContext, initParam 객체 등을 제공한다.