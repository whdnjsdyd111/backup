우리는 지금까지 JSP 페이지를 작성하기 위한 각종 구성 요소, 내장 객체, 액션 태그 및 Ajax를 사용한 서버 페이지에 요청 등에 대해 학습했다.
물론 이것만 가지고도 데이터베이스와의 연동을 제외한 JSP 페이지를 작성할 수 있다. 그러나 지금까지의 방법에 따라 웹 애플리케이션을 작성하다 보면 몇 가지 문제에 부딫치게 된다.

	문제점 1
	
첫 번째 문제점은 JSP 페이지를 화면에 표시하기 위한 화면 표시  부분과 실제 JSP 페이지를 처리하는 로직 코드가 같은 페이지 내에 기술되어 JSP 페이지를 한눈에 이해하기 어렵다는 점이다.

...생략...
<%	// 로직 코드
	while(rs.next() && i <= PageSize) {
		try {
			int num = rs.getInt("uid");
			String name = rs.getString("name").trim();
			String email = rs.getString("email").trim();
			String homepage = rs.getString("homepage").trim();
			String comment = rs.getString("comment").trim();
			String signdate = rs.getString("signdate").trim();
			String clienthost = rs.getString("clienthost").trim();
%>
<%-- 화면 표시 부분 --%>

<table border="1" cellspacing="0" width="600" align="center">
	<td align="right" colspan="2">
		<%	if(admin.equals("ok")) { %>
				<a href="edit.jsp?num=<%= num %> & admin=<%= admin %>">[수정]</a>
				<a href="delete.jsp?num=<%= num %> & admin=<%= admin %>">[삭제]</a>
		<%	} else {	%>
				<a href="edit.jsp?num=<%= num %>">[수정]</a>
				<a href="delete.jsp?num=<%= num %>">[삭제]</a>
		<%	}	%>
	</td>
...생략...

위의 코드는 HTML 태그들과 JSP 코드가 같은 페이지에 함께 존재하는 예시이다. 척봐도 복잡하고 무엇을 작성하고 있는 것인지 한눈에 파악하기 어렵다.
그리고 이렇게 작성한 JSP 페이지는 디자이너가 디자인하기에도 역시 복잡하고 어려울 수 밖에 없다.
디자이너와 프로그래머는 독립적으로 작업하는 것이 아니라 서로 협력하면서 프로젝트를 진행해야 한다. 프로그래머는 디자이너가 이해하지 못하는 부분을 잘 설명해주고
프로그램의 필요한 부분을 이해시켜야 서로 유기적인 협력을 할 수 있는 것인데, 위의 예시와 같은 코드는 디자이너가 내용을 이해하기에도, 디자인하기에도 어려운 형태이다.
프로젝트를 능률적으로 진행하려면 가능한 독립적으로 작업하는 것이 좋으므로, 디자이너가 작업하는 화면 표시(뷰, view) 부분과 프로그래머가 작업하는 로직(모델, Model) 부분은 분리해야 한다.

	문제점 2
	
JSP 페이지에 화면 표시 부분과 로직들이 함께 존재하는 위와 같은 형태의 코드는 재사용하기가 어렵다. JSP 페이지를 작성하다보면 페이지의 구조가 비슷한 형태로 흐르는 것을 알 수 있는데
프로젝트도 마찬가지이다. 전혀 다른 성격의 프로젝트이더라도 항상 기본적인 구조는 같다. 따라서 비슷한 작업을 매번 반복하는 비효율성을 피하기 위해서는 JSP 페이지 내에 있는 반복적인 코드를 따로 작성해 놓고
재사용할 필요가 있다. 이렇게 JSP 페이지에 화면 표시 부분과 로직들이 함께 존재해서 복잡하게 구성되는 것을 가능한 피하고, JSP 페이지의 로직 부분을 분리해서 코드를 재사용함으로써
프로그램의 효율을 높이는 것이 자바빈을 사용하는 목적이다.
현재 모든 프로그래밍에서 묘듈화(컴포넌트(component)화)가 대세이다. 프로그램을 모듈화하면 잘 작성해 놓은 코드를 재사용해서 프로그램의 작성 기간이 단축되고, 이미 실 시스템에 올렸던
코드를 사용하므로 코드의 안정성이 보장되어 유지 보수에도 좋다. 즉, 프로그램을 작업 단위별로 작성해서 레고 블록처럼 필요한 모듈을 끼워서 사용할 수 있다.
또한 표준호된 모듈을 여러 가지 형태로 보유하게 되어, 어떤 프로그램이든지 쉡게 작성할 수 있다. 바로 자바빈이 웹 프로그래밍에서 이러한 모듈을 작성해서 재사용이 가능하도록 해주는 부분이다.
자바빈을 잘 이해해두면 EJB(Enterprise Java Been)를 작성하게 되었을 때, 내부적인 구조가 비슷해서 쉽게 접근할 수 있다.