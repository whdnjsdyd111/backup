자바빈(JavaBean)은 자바로 작성된 컴포넌트들을 일반적으로 일컫는 말이다. 자바는 프로그램 기본 단위가 클래스이고 자바빈은 클래스들이 복합적으로 이루어진 구조이다.
자바빈을 작성하기 위해서는 자바빈을 작성하는 규칙을 알아야 한다. 모든 프로그램 언어에는 문법과 규칙이라는 것이 있듯이 자바빈도 그러한 규칙을 갖는다. 자바빈이라는 이름에서도 느껴지듯이 자바빈은 자바 언어의 프로그램 작성과
규칙을 따른다. 자바를 몰라도 JSP를 학습할 수 있다고 하는 경우가 있는데, 그것은 사실 거짓말이나 다름없다. JSP 만큼 그 모체가 되는 언어와 관련이 많은 스크립트 언어도 없다.
JSP를 제대로 작성하려면 반드시 자바의 문법을 숙지하고 있어야 한다. 특히 자바의 클래스를 만드는 규칙을 잘 모르면 자바빈을 작성할 때 고생하게 되므로 자바의 기초 지식이 없다면 틈틈이
학습하기 바란다. 그러면 일단 클래스의 기본 작성 방법을 살펴본다.

(1) 자바빈 클래스 작성

자바빈은 자바의 클래스를 만드는 것과 같은 규칙을 갖는다. 자바의 클래스를 작성하는 기본적인 순서는 다음과 같다.

클래스의 작성 순서

1. 	package 패키지명;	// 없으면 생략 가능
2. 	import 패키지명을 포함한 클래스의 풀네임;	// 없으면 생략 가능
3.	class 클래스명 {	// 필수 정의, 생략 불가능


자바의 클래스를 만들 때는 위의 코드와 같이 포함될 패키지명(package문)과 해당 클래스를 생성할 때 필요한 라이브러리 클래스(import문)들이 필요하다(필요없으면 생략 가능).
그리고 실제 만들 클래스의 정의 부분(class문)이 필요한데 이는 생략할 수 없다. 자바 파일은 1개 이상의 클래스를 포함해야 하기 때문이다.
자바 클래스는 다음과 같은 형식으로 선언한다.


접근 제어자 [키워드] class 클래스명 {}


	- 접근 제어자(Access modifier) : public, private, default(접근 제어자가 없는 형태)가 올 수 있는데, 자바빈을 작성할 때는 접근 제어의 강도가 가장 약한 public을 주로 사용한다.
		웹에서는 불특정 다수의 접근을 허용해야 하기 때문에 누구나 접근할 수 있는 public을 사용한다.
		
	- 키워드(Keyword) : final, abstract, static 등이 있으나 자바빈 클래스에서는 사용하지 않는다.
	
	- 클래스명(Class name) : 첫 글자는 대문자로 시작하고 나머지는 소문자를 사용한다.
		또한 여러 개의 단어로 이루어진 경우, 다음 단어의 첫 글자는 대문자로 시작한다.
		
		
// 클래스 선언 예시
public class UtilClass {}


자바의 클래스는 캡슐화(Encapsulation)의 역할을 한다. 캡슐화(Encapsulation)는 객체 지향의 가장 중요한 개념 중 하나인 정보 은닉(information hiding)을 구현한다.
자바 클래스를 캡슐화의 형태로 작성하려면 다음과 같은 방법으로 작성해야 한다.

- 정의된 클래스는 사용 시 객체로 할당되며, public으로 선언해 누구나 접근할 수 있는 객체로 생성한다.
- 클래스의 멤버 변수는 private으로 선언해서 정보에 직접 접근할 수 없도록 한다.
- 객체의 정보를 갖는 멤버 변수에 접근하려면 setter(세터)/getter(게터) 메소드를 사용한다.
	setter/getter 메소드의 접근 제어자는 public을 사용한다.
	
자바빈 클래스 선언은 접근 제어자로 public을 사용하고, 멤버 변수의 접근 제어자는 private을 사용해서 작성한다. 자바빈에서는 멤버 필드를 프로퍼티(property)라고도 부른다.
또한 프로퍼티의 값을 저장하고 얻어내는 메소드를 setter/getter 메소드라 하며, 접근 제어자로 public 을 사용한다. 자바빈 클래스는 아래의 예시와 같이 작성한다.

package bean.logon;
public class DbDataLogin {	// 자바빈 클래스
	// 프로퍼티
	private String id;
	private String passwd;
	
	// setter 메소드
	public void setId(String id) {
		this.id = id.trim();
	}
	
	public void setPasswd(String passwd) {
		this.passwd = passwd.trim();
	}
	
	// getter 메소드
	public String getId() {
		return id;
	}
	
	public String getPasswd() {
		return passwd;
	}
}

(2) Setter/Getter 메소드 작성

프로퍼티(property)는 값을 저장하기 위한 멤버 필드로 접근 제어자를 private로 선언해서 작성한다. JSP 페이지의 내용을 DB에 저장하거나 DB에 저장된 내용을
JSP 페이지에 표시할 때 중간 데이터 저장소로 사용된다. 즉, 객체가 갖고 있는 정보의 저장소이기 때문에 외부에서 함부로 접근하는 것을 막기 위해 접근 제어의 강도가 가장 강한 private를 사용한다.
만일 프로퍼티에 접근해 정보를 얻어내야 한다면 setter/getter 메소드를 사용한다.
이 데이터 저장소의 역할을 하는 프로퍼티에 값을 저장할 때는 setter 메소드인 setXxx() 메소드를 사용하고, 저장된 값을 사용할 때는 getter 메소드인 getXxx() 메소드를 사용한다.
이때 Xxx는 프로퍼티명이며 첫 글자는 대문자로 작성한다. 예를 들어 프로퍼티명이 id인 경우 setter는 setId()가 되고, getter는 getId()가 된다.
하나의 프로퍼티에는 하나의 setXxx() 메소드와 getXxx() 메소드가 존재한다.
setXxx() 메소드 작성 방법은 앞의 예제에서 볼 수 있듯이 다음과 같은 형태를 취한다.

public void setId(String id) {
	this.id = id.trim();
}

위의 코드를 보면 프로퍼티에 값을 저장하기 때문에 파라미터로부터 값을 받아오는 setId(String id)와 같은 형태를 취한다.
값을 저장만 하는 메소드이므로 리턴 타입이 void이다. 리턴 타입이 void라는 것은 이 메소드의 수행 결과를 리턴(반환)하지 않는다는 의미이다.
this.id = id.trim(); 이 부분은 넘어온 파라미터의 값을 프로퍼티에 저장하는 부분으로, this.id가 프로퍼티이고 id.trim()의 id 변수가 파라미터 변수이다.
trim() 메소드는 해당 변수값의 좌우에 쓸모없는 공백이 있는 경우 제거하는 메소드이다. 이런 쓸모없는 공백은 데이터베이스에도 저장되므로 프로그램의 안정성을 위해서 꼭 기술해서 제거해야 한다.
그리고 프로퍼티명과 파라미터명이 같으면 프로그램에 혼란을 주기 때문에 프로퍼티명 앞에는 this가 붙는다. this는 자기 자신의 클래스를 가리키는 레퍼런스이다.
getXx() 메소드 작성 방법은 앞의 예제 코드에서 볼 수 있듯이 다음과 같은 형태를 취한다.

public String getId() {
	return id;
}

저장된 프로퍼티의 값을 얻어내는 메소드이기 때문에 getId()와 같이 파라미터가 없다. 그러나 저장된 값을 사용해야 하기 때문에 반드시 리턴 타입을 기술해야 한다.
String getId()는 메소드의 수행 결과값이 String 타입으로 호출한 곳으로 반환된다는 것이다. String과 같이 void 이외의 리턴 타입이 기술되면 해당 메소드의 마지막에 return문을 반드시 기술해야 한다.
기술하지 않으면 에러가 발생한다. return문이 이 메소드의 수행 결과를 호출한 쪽으로 리턴하는 문장이다.
마지막으로 자바빈의 작성(저장) 위치를 알아야 한다. 일반적으로 자바 파일(서블릿, 자바빈)은 [웹 애플리케이션 폴더]-[WEB-INF]-[classes] 폴더에 위치해야 한다.
톰캣에서 서비스되는 [studyjsp] 프로젝트를 예로 들면 [톰캣홈]-[webapps]-[studyjs]-[WEB-INF]-[classes]에 자바빈 클래스들이 위치한다.
가상 환경 이클립스에서는 [프로젝트명]-[Java Resources] - [src] 폴더에 자바빈 클래스들이 위치한다.
이클립스에서는 자바 기반 프로젝트의 로직 파일인 .java 파일은 모두 이 [src] 폴더에 위치한다. 자바 기반 프로젝트에서는 자바 프로젝트, 동적 웹 프로젝트, 안드로이드 프로젝트 등이 있다.
즉, 이클립스에서 자바빈을 포함한 로직 파일을 작성하면 원본 파일은 [프로젝트명]-[Java Resources]-[src] 폴더에 위치하게 된다. 또한 자동으로 컴파일되어 '.class' 파일은 
[build]-[classes] 폴더에 위치한다. 작성이 끝난 후에 해당 프로젝트를 WAR 파일로 내보내기 하면 [build]-[classes] 폴더에 있는 자바 클래스 파일들은 서버 상의
[웹 애플리케이션 폴더] - [WEB-INF] - [classes] 폴더에 알아서 위치된다. 즉, 자바빈 파일의 컴파일이나 위치를 일일이 신경 쓰지 않아도 된다는 의미이다.
복잡해보이나 규칙만 이해하면 그다지 어렵지는 않으므로 몇 번만 연습해보도록 한다.
특히 이클립스에서 데이터를 저장하는 빈이 갖고 있는 setter/getter(setXxx() 메소드와 getXxx() 메소드)는 [Source] - [Generate Getters and Setters]
메튜를 사용하면 자동적으로 생성할 수 있다.


이 예제는 id 프로퍼티 하나만 가진 데이터를 저장하는 자바빈을 작성하는 것으로, 이 자바빈에는 id 프로퍼티 값을 저장하거나 얻어내기 위한 setter 메소드와 getter 메소드가 존재한다.

TestBean.java		260쪽