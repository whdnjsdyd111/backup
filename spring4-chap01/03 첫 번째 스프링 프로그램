여기서 만들 프로그램은 스프링을 이용해서 Project 클래스의 객체와 MavenBuildRunner 객체를 생성하고 연결해 볼 것이다.


	3.1	메이븐 프로젝트 만들기
	
http://javacan.tistory.com/entry/MavenBasic	를 참고하여 메이븐을 설치한다. 메이븐 설치 후 환경 변수를 설정해야 한다.
명령 프롬프트로 설치 경로에 가서 'mvn archetype:generate' 명령을 사용하면 프로젝트를 생성한다.


	3.2	이클립스에서 메이븐 프로젝트 임포트하기
	
프로젝트의 기본 디렉토리 구조와 자바 7 버전을 사용하기 위한 설정은 완료되었다. 다음은 임포트하는 것이다.

이클립스의 [File] -> [Import...] -> [Maven/Existing Maven Projects] 메뉴를 이용해서 메이븐 프로젝트를 이클립스로 임포트할 수 있다.

	3.3	pom.xml 파일에 스프링 의존 설정하기
	
이제 스프링 프레임워크를 사용하기 위해 메이븐 의존 설정에 스프링 설정을 추가해주어야 한다. 이를 위해 pom.xml 파일에서 다음을 추가한다.


	<dependencies>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>4.0.4.RELEASE</version>
		</dependency>
	</dependencies>
	
	
이 설정을 추가하면, 이클립스가 spring-context 모듈을 포함해서 필요한 jar 파일들을 다운로드 받기 시작한다.
필요한 jar 파일들을 모두 받으면, Maven Dependencies에 다운받은 jar 파일들이 메이븐 의존 목록에 표시된다.


	3.4	스프링이 관리할 객체의 코드

	
먼저 만들 예제는 두 개의 클래스와 한 개의 인터페이스로 구성되어 있다.

BuildRunner.java	인터페이스			39쪽

MavenBuildRunner.java	클래스		39쪽

Project.java	클래스				40쪽


Project 클래스의 build() 메소드는 필드로 참조하고 있는 buildRunner 객체의 build() 메소드를 호출하는데, 
Project 객체가 사용할 buildRunner 객체는 setBuildRunner() 메서드를 통해서 설정한다.


	3.5	스프링을 사용하지 않고 객체 조립/사용하기
	
스프링을 이용하지 않고 앞서 작성한 Project 클래스와 MavenBuildRunner 클래스를 사용하는 코드를 먼저 작성해보자.
이 코드는 다음과 같이 작성했다.


Main.java	클래스		41쪽


Main 클래스를 보면 MavenBuildRunner 객체와 Project 객체를 생성하고 setPropertyName(..) 형식의 메소드를 이용해서 필요한 프로퍼티를 설정해주고 있다.
또한 sampleProject 객체가 buildRunner 객체를 사용하도록 설정하고 있다. Project 클래스의 build() 메소드는 아래 코드처럼
setBuildRunner() 메소드를 통해서 전달받은 buildRunner 객체의 build() 메소드를 호출한다.


	public class Project {
	
		..
		private BuildRunner buildRunner;
		
		public void build() {
			buildRunner.build(srcDirs, binDir);
		}
		..
	
		public void setBuildRunner(BuildRunner buildRunner) {
			this.buildRunner = buildRunner;
		}
	}

	
따라서, Main 클래스의 sampleProject.build() 메소드를 호출하면, 결과적으로 MavenBuildRunner 객체의 build() 메소드가 실행된다.
실제 Main 클래스를 실행하면 다음과 같은 결과가 콘솔에 출력되는 것을 확인할 수 있다.


	MavenBuildRunner.build() 실행
	메이븐 경로: c:\apache-maven-3.6.3
	소스 경로: src
	소스 경로: srcResources
	클래스파일 경로: bin

	
	3.6	스프링으로 객체 조립하기 : 스프링 설정 만들기
	
이제 스프링을 이용해서 객체를 조립하고 실행하도록 하자. 먼저 해야할 작업은 스프링이 객체를 생성하고 조립할 때 사용할 설정 정보를 작성하는 것이다.
설정 정보는 XML 파일이나 자바 코드를 이용해서 작성할 수 있는데, 여기서는 XML 파일을 이용해서 작성할 것이다.

앞서 작성한 Project 클래스와 MavenBuildRunner 클래스의 객체를 생성하고 필요한 프로퍼티를 설정하기 위해 사용되는 스프링 XML 설정 파일은 다음과 같다.


applicationContent.xml		42쪽


아직 자세히 알 필요는 없고 간단히 설명하면 08-13 까지는 MavenBuildRunner 타입의 객체를 생성하고, mavenPath 프로퍼티 값을 "c:\apache-maven-3.6.3"로 설정한다는 의미이다.
위 설정은 내부적으로 다음 코드를 실행해서 객체를 생성하는 것과 비슷하다. (실제로는 자바 리플렉션으로 객체 생성 후 프로퍼티 설정)

	
	MavenBuildRunner mvnBuildRunner = new MavenBuildRunner();
	mvnBuildRunner.setMavenPath("c:\\apache-maven-3.6.3");


라인 15-27까지의 XML 설정도 위와 비슷하다. List 타입의 프로퍼티에도 값을 설정할 수 있고, 24-26 처럼 다른 스프링 빈(bean)을 프로퍼티 값으로 설정해 줄 수도 있다.

applicationContent.xml 파일을 요약하면 다음과 같다.

	- 빈 이름 : mvnBuildRunner
	
		~ mavenPath 프로퍼티 값으로 "c:\apache-maven-3.6.3" 설정
		
	- 빈 이름 : sampleProject
	
		~ srcDirs 프로퍼티 값으로 ["src/", "srcResources/"]의 List 설정
		~ bidDir 프로퍼티 값으로 "bin/" 설정
		~ buildRunner 프로퍼티 값으로 mvnBuildRunner 빈 객체 설정
		
		
	3.7 스프링으로 객체 조립하기 : 스프링을 이용한 객체 생성 및 사용
	
스프링이 사용할 설정 정보를 만들었으니, 이제 남은 일은 XML 설정 파일로부터 스프링 컨테이너를 생성하고 필요한 객체를 컨테이너로부터 가져와 사용하는 것이다.
스프링은 설정 정보로부터 생성한 스프링 빈 객체를 생성/조립/관리하는 기능을 제공하는데, 이 기능을 제공하는 객체를 컨테이너라고 부른다.

XML 설정 파일로부터 스프링 컨테이너를 생성할 때에는 GenericXmlApplicationContext 클래스를 사용하면 된다. 이 클래스를 사용해서 컨테이너를 생성하고,
컨테이너에 보관된 스프링 빈 객체를 가져와 사용하는 코드를 작성해 볼 수 있다.


MainBySpring.java		44쪽


라인 10-11에서 GenericXmlApplicationContext 객체를 생성하고 있는데, 이 코드에서 생성된 객체가 바로 스프링 컨테이너 역할을 수행한다.
이 코드로부터 다음과 같은 내용을 알 수 있다.

	- 스프링은 ApplicationContext라는 인터페이스를 통해 컨테이너가 제공해야 할 기본 기능을 정의하고 있다.
	
	- AbstractApplicationContext는 컨테이너 종료(라인 14의 close() 메소드)와 같은 기능을 제공하고 있다.
	
	- GenericXmlApplicationContext는 AbstractApplicationContext를 상속 받아 만들어진 클래스로서 XML 파일에서 스프링 빈 설정 정보를 읽어온다.
	
라인 11에서 GenericXmlApplicationContext 객체를 생성할 때 파라미터 값으로 "classpath:applicationContext.xml"을 전달했는데, 이는 클래스패스에 위치한
"applicationContext.xml" 파일을 설정 파일로 사용한다는 의미를 갖는다.

GenericXmlApplicationContext 클래스는 전달받은 XML 파일에서 설정 정보를 읽어와 스프링 빈 객체를 생성하고, 프로퍼티 값을 설정해준다.

이렇게 생성된 스프링 빈 객체는 getBean() 메소드를 사용해서 구현할 수 있다. 라인 12-13이 이 메소드의 사용법을 보여주고 있다.


	Project project = ctx.getBean("sampleProject", Project.class);


getBean() 메소드에서 첫 번째 파라미터는 구하고자 하는 스프링 빈 객체의 이름이며, 두 번째 파라미터는 그 빈 객체의 타입이다.

XML 설정에서 sampleProject 스프링 빈 객체의 buildRunner 프로퍼티의 값으로 이름이 mvnBuildRunner인 스프링 빈 객체를 설정하였다. 따라서, 라인 13의 project.build()
메소드를 실행하면 결과적으로 이름이 mvnBuildRunner인 스프링 빈 객체의 build() 메소드가 호출된다.

실제로 MainBySpring 클래스를 실행해보면 스프링 XML 설정에서 생성한 mvnBuildRunner 객체의 build() 메소드가 출력한 내용을 확인할 수 있다.