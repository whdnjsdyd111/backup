어플리케이션-도메인-영속성 구조는 DDD(Domain-Driven-Design)를 비롯해 도멘이 모델을 중심으로 설계할 때 사용하는 구조이다.
꼭 DDD를 따르지 않더라도 어플리케이션-도메인-영속성 구조를 사용하면 복잡한 업무를 다루는 웹 어플리케이션을 개발할 때 객체 지향의 장점을 잘 살릴 수 있게 된다.
어플리케이션-도메인-영속성으로 구성된 어플리케이션의 구조는 다음과 같다.


									web
									
								Controller
								
								- appService : ApplicationService
								- entityRepo : EntityRepository
								│						│
								│						│
					application	│						│
								↓						│
					<< interface >>						│
					ApplicationService					│
														│
						↑								│
				ApplicationServiceImpl					│
														│
				- entityRepo : EntityRepository			│
						│								│
						│								│
						│		domain					│
						↓								↓
						Entity						<< interface >>
						
						+ doDomainLogic()			EntityRepository
						
													+ save()
													+ findOne()
																↑
																│
													persistence	│
																│
												OrmEntityRepository
												
												
위는 도메인 중심 설계의 전형적인 구조를 보여주고 있다. 이 구조에서 각 요소는 다음과 같은 역할을 한다.


	영역			구성 요소		역할
		
	도메인 영역		엔티티		핵심 도메인 모델로서 구분되는 식별값을 가지며, 도메일 로직을 실행한다. 엔티티 외에 값(Value) 객체 등이 존재한다.
	
				리파지터리		엔티티 객체를 보관하고 제공하는 기능을 정의한다.
	
	영속성 영역		리파지터리 구현	도메인 영역의 리파지터리 인터페이스의 구현을 제공한다. 보통 JPA나 하이버네이트와 같은 ORM 기술을 이용해서 구현한다.
	
	어플리케이션 영역	어플리케이션 서비스	도메인 영역의 리파지터리와 엔티티를 이용해서 클라이언트가 요청한 기능을 실행한다.
	

위의 내용은 모두 간략하게 각 영역을 설명한 것으로, 실제 DDD에는 더 많은 구성 요소가 존재한다.
DDD에 대한 기초 지식이 궁금한 독자는 DDD 관련 서적이나 'DDD 구현 기초'(http://goo.gl/NJXWp9) 자료를 읽어보자.

[어플리케이션-도메인-영속성 구조를 설명할 때 사용한 코드 예제는 제공하는 소스 코드의 /mvnprj/spring4-chap15-a2	에 위치한다.]


	2.1 도메인 구성
	
도메인 영역은 다음의 두 가지 종류의 구성 요소를 갖는다.
	
	- 도메인 모델 : 엔티티, 값 객체 등 도메인 모델을 표현하는 객체를 제공한다. 이들 객체들은 모델을 표현하는 데 필요한 프로퍼티(예, 직원 엔티티의 경우 사번, 이름 등)를 포함한다.
		엔티티와 DTO의 중요한 차이점은 엔티티는 도메인 기능을 함께 제공하는데 반해 DTO는 단순히 영역 간의 주고 받는 데이터를 담는 구조체라는 것이다.
	
	- 엔티티/객체 관리 : 리파지터리는 엔티티 객체의 생명 주기를 관리한다. 리파지터리에 엔티티 객체를 보관하고, 리파지터리로부터 엔티티를 검색하고,
		리파지터리를 통해 엔티티를 제거한다. 도메인 영역에서 리파지터리는 엔티티 관리를 위한 인터페이스만 제공하며, 실제 구현은 영속성 영역에서 다루게 된다.
		
예를 들어, 회원 도메인 모델은 다음과 같은 엔티티 클래스로 구현해 볼 수 있을 것이다. 이 클래스의 changePassword() 메소드는 회원의 암호 변경이라는 도메인 기능을 구현하고 있다.
즉, 엔티티는 단순히 데이터만 담지 않고 관련 도메인 기능을 함께 제공한다.


	public class Member {
		private Long id;
		private String userId;
		private String encPassword;
		private String email;
		private Address address;
		
		... // 필요에 따라 get 메소드
		
		// 엔티티는 도메인 기능을 함께 제공하는 객체다.
		public void changePassword(String oldPw, String newPw) {
			if(!matchPassword(oldPw))
				throw new WrongPasswordException();
			this.encPassword = encrypt(newPw);
		}
		
		public boolean matchPassword(String pw) {
			... // 암호 비교 코드
		}
	}
	
	
리파지터리는 엔티티를 보관하기 위한 용도로 사용된다. 뒤에서 설명할 어플리케이션 서비스는 엔티티 객체가 필요할 때 리파지터리를 통해 엔티티 객체를 찾으며,
리파지터리 인터페이스는 엔티티 객체를 보관, 검색, 삭제하기 위한 메소드를 정의한다. 예를 들어, Member 엔티티를 위한 리파지터리는 다음과 같이 정의할 수 있다.


	public interface MemberRepository {
		public Member save(Member member);
		public Member findOne(Long id);
		public void delete(Member member);
	}
	
	
실제 리파지터리의 구현은 영속성에 위치하게 되는데, 이에 대한 내용을 이어서 살펴보자.


	2.2 영속성 구현
	
리파지터리의 실제 구현은 영속성 영역에 위치한다. 앞서 본 그림을 보면 리파지터리 인터페이스가 도메인 영역에 위치한 반면 이 인터페이스의 구현 클래스는 영속성 영역에 위치한 것을 알 수 있다.
영속성 영역을 구현할 때 다양한 기술을 사용할 수 있지만, 구현의 편리함 때문에 ORM 기술을 많이 사용하는 편이다. 주요 ORM 기술로는 JPA와 하이버네이트가 있다.
이 중 스프링 데이터 JPA 모듈을 사용하면 구현해야 할 코드의 양이 상당히 줄어들기 때문에, 필다는 하이버네이트를 직접 사용하기 보다는 코드에서 JPA를 이용하고
JPA의 프로바이더로 하이버네이트를 사용하는 편이다.

JPA를 이용해서 영속성을 구현할 경우 도메인 영역의 엔티티나 다른 모델 클래스에 JPA 어노테이션을 적용하게 된다.
예를 들어, Member 클래스에는 다음과 같이 @Entity, @Table, @Column 등 매핑 설정을 위한 어노테이션을 적용하게 된다.


	@Entity
	@Table(name = "MEMBER")
	public class Member {
	
		@Id
		@Column(name = "MEMBER_ID")
		@GeneratedValue(strategy = GenerateType.IDENTITY)
		private Long id;
		
		@Column(name = "USER_ID")
		private String userId;
		
		@Column(name = "ENC_PASSWORD")
		private String encPassword;
		...
		
		
위 코드는 도메인 영역의 코드가 영속성과 관련된 코드(어노테이션)을 포함하고 있다. 엄밀하게 따지면, 도메인 영역의 코드에서 영속성 영역의 코드에 대한 의존을 갖지 않도록 해서 영속성 영역을 다른 기술로 구현하도라도
도메인 코드가 영향을 받지 않도록 해야겠지만, 실제로 영속성 관련 기술을 변경하는 경우는 거의 없다. 따라서, 도메인 영역의 코드에 어노테이션과 같은 설정 정보가 일부 포함되더라도 실용적인 측면에서
문제되지 않는다고 생각한다.

스프링 데이터 JPA를 사용하게 되면, 도메인 영역의 리파지터리 인터페이스를 구현할 때 Repository 안터페이스를 상속 받아 정의하면 된다.
리파지터리의 일부 기능을 직접 구현해야 한다면, 해당 구현 클래스를 영속성 영역에 위치시킨다.

	
	2.3 어플리케이션 서비스 구현
	
어플리케이션 영역은 시스템이 제공하는 기능을 구현한다. 어플리케이션은 클라이언트의 요청을 받아, 도메인 영역의 구성 요소를 이용해서 요청을 처리하고,
그 결과를 리턴한다. 어플리케이션 영역에 위치한 서비스 구현 코드는 대부분 다음과 같은 구성을 갖는다.

	- 도메인 영역의 리파지터리에서 엔티티를 구한다.
	- 엔티티의 기능을 실행한다.
	- 결과를 리턴한다.
	
예를 들어, 회원 암호 변경 기능을 제공하는 어플리케이션 서비스를 생각해보자. 이 서비스 구현 클래스는 다음과 같이 MemberRepository에서 Member 엔티티 객체를 구한 뒤에,
Member 엔티티 객체의 암호 변경 기능을 실행할 것이다.

	
	public class ChangePasswordServiceImpl implements ChangePasswordService {
	
		@Autowired
		private MemberRepository memberRepository;
	
		@Transactional
		@Override
		public void changePassword(ChangePasswordRequest req) {
			Member member = memberRepository.findOne(req.getMemberId());
			if (member == null)
				throw new MemberNotFoundException();
	
			member.changePassword(req.getCurrentPassword(), req.getNewPassword());
		}
	
	}
	
	
어플리케이션 서비스는 스프링 빈으로 등록되며, 어플리케이션의 서비스 메소드는 트랜잭션 단위가 된다. 위 코드는 스프링의 @Transactional 어노테이션을 사용해서 트랜잭션 범위를 지정했다.

어플리케이션 서비스의 메소드는 요청을 처리하는데 필요한 입력값을 파라미터로 갖는다. 예를 들어, 앞서 ChangePasswordService의
changePassword() 메소드는 암호 변경 기능을 실행하는데 필요한 변경할 회원 ID, 현재 암호, 새 암호를 파라미터로 정의하고 있다.


	public interface ChangePasswordService {
		public void changePassword(Long memberId, String currentPw, String newPw);
	}
	
	
서비스를 실행하는데 필요한 데이터가 많다면, 데이터를 담은 클래스를 만들어 메소드의 파라미터 타입으로 사용할 수 있을 것이다.
예를 들어, 신규 회원 가입 처리를 할 경우 네 개 이상의 데이터를 입력받는 경우가 흔한데, 이 경우 사용자가 입력한 정보를 담아서 전달할 목적으로 사용하기 위해
다음과 같은 클래스를 만들 수 있을 것이다.

	
	// 요청 정보를 담을 클래스
	public class NewMemberRequest {
		private String userId;
		private String name;
		private String password;
		private String confirmPassword;
		private String email;
		
		// get/set 메소드
	}
	
	
회원 가입 처리를 위한 어플리케이션 서비스 인터페이스는 위 클래스를 이용해서 메소드를 정의하게 된다.


	// 어플리케이션 서비스의 메소드는 요청 정보를 담은 클래스를 파라미터로 사용
	public interface NewMemberRegistService {
		public Long register(NewMemberRequest req);
	}
	
	
NewMemberRegist 인터페이스의 구현 클래스는 다음과 같이 NewMemberRequest로부터 새로운 Member 엔티티 객체를 생성하고, 리파지터리를 이용해서 엔티티 객체를 저장하게 될 것이다.
다음은 그 구현 예이다.


	public class NewMemberRegServiceImpl implements NewMemberRegService {
	
		@Autowired
		private MemberRepository memberRepository;
	
		@Transactional
		@Override
		public Long register(NewMemberRequest req) {
			if (memberRepository.findByUserId(req.getUserId()) != null) {
				throw new DuplicateUserIdException();
			}
			if (memberRepository.findByEmail(req.getEmail()) != null) {
				throw new DuplicateEmailException();
			}
			Member m = new Member(req.getUserId(), req.getPassword(), req.getEmail(), req.getName());
			memberRepository.save(m);
			return m.getId();
		}
		...
		
		
	2.4 컨트롤러와 뷰 그리고 도메인 객체 접근
	
클라이언트는 크게 다음의 두 가지 종류의 기능을 서버에 요청한다.

	- 상태를 변화시키는 기능 : 예를 들어, 암호를 변경한다거나 새로운 회원을 등록하는 등의 기능
	- 데이터를 조회하는 기능 : 예를 들어, 회원 정보를 화면에 보여준다거나, 회원 목록을 조회하는 등의 기능
	
이 두 기능 중에서 상태를 변환시키는 기능은 어플리케이션 서비스에서 제공한다. 앞서 예로 봤던 ChangePasswordService가 상태를 변화시키는 어플리케이션 서비스에 해당하고,
웹 요청을 처리하는 컨트롤러는 다음과 같이 어플리케이션 서비스를 이용해서 상태 변경 요청을 처리하게 된다.


@Controller
public class ChangePasswordController {

	private ChangePasswordService changePasswordService;

	@RequestMapping(value = "/member/changePassword", method = RequestMethod.POST)
	public String changePassword(@ModelAttribute("command") ChangePasswordRequest req, BindingResult errors) {
		new ChangePasswordRequestValidator().validate(req, errors);
		if (errors.hasErrors())
			return "member/changePasswordForm";

		try {
			changePasswordService.changePassword(req);
			return "member/changePasswordDone";
		} catch (WrongPasswordException ex) {
			errors.rejectValue("currentPassword", "invalidPassword");
			return "member/changePasswordForm";
		}
	}

	
그런데, 상태 조회 요청을 처리하는 경우에는 다양한 방식으로 접근할 수 있다. 첫 번째 방식은 컨트롤러에서 직접 리파지터리의 기능을 이용하는 것이다.
예를 들어, 회원 정보 상세 화면을 위한 컨트롤러를 구현한다면, 다음과 같이 리파지터리에서 직접 회원 정보를 읽어와 뷰에 전달할 수 있을 것이다.


	@Controller
	public class MemberDetailController {
	
		@Autowired
		private DataLoader dataLoader;
	
		@RequestMapping("/admin/member/detail")
		public String detail(@RequestParam("memberId") Long memberId, Model model) {
			Member member = dataLoader.loadMember(memberId);
			if (member == null)
				return "admin/noMember";
			model.addAttribute("member", member);
			return "admin/memberDetail";
		}
	}
	
	
그런데, 위 코드를 구현할 때 주의해야 할 점이 있다. 만약 Member 클래스가 다음과 같이 지연 로딩 방식의 1:1 연관 필드를 갖고 있다고 해보자.


	@Entity
	@Table(name = "MEMBER")
	public class Member {
	
		@Id
		@GeneratedValue
		@Column(name = "MEMBER_ID")
		private Long id;
		...
		
		@OneToOne(fetch = FetchType.LAZY)
		@JoinColumn(name = "LOCKER_ID")
		private Locker locker;
		
		protected Member() {
		}
		
		...
		public Locker getLocker() {	// 실제 사용할 때 locker를 로딩하게 됨
			return locker;
		}
	}
	
	
뷰를 구현하는 JSP 코드는 다음 코드처럼 Member 객체의 지연 로딩 프로퍼티인 locker 정보를 출력할 수 있다.


		...
		이름: $(member.name) <br/>
		락커:
			<c:if test="${member.locker != null}">
				${member.locker.id}번 (크기: ${member.locker.size})
			</c:if>
			<c:if test="${empty member.locker}">
				없음
			</c:if>
	</body>
	
	
앞서 컨트롤러 코드에서 memberRepository.findOne() 메소드만 트랜잭션 범위에서 실행된다고 할 경우, 뷰 코드는 트랜잭션 범위 밖에서 실행된다.
그런데, JPA에서 지연 로딩 방식의 연관 객체는 트랜잭션 범위 내에서만 읽어올 수 있다. 따라서, 트랜잭션 범위 밖에서 지연 로딩 프로퍼티에 접근할 경우, 익셉션을 발생하게 된다.
예를 들어, JPA 프로바이더로 하이버네이트를 사용했다면 다음과 같은 메시지의 익셉션이 발생하는 것을 확인할 수 있다.


	org.hibernate.LazyInitializationException: could not initialize proxy - no Session
	

모든 연관에서 지연 로딩을 사용하지 않으면 위 문제가 해결되지만, 대신 연관된 모든 객체를 DB에서 바로 로딩하기 때문에 조회 성능에 문제가 발생할 수 있다.
이런 이유로, 지연 로딩을 사용할 경우 뷰 실행 과정에서 문제가 발생하지 않도록 다음의 두 방법 중 하나를 사용한다.

	- OSIV 패턴을 사용
	- 뷰에서 필요한 데이터를 트랜잭션 범위 내에서 로딩
	
첫 번째 방법은 OSIV(Open Session In View)라는 패턴을 사용하는 것이다. OSVI 패턴은 서블릿 필터를 이용해서 웹 요청이 시작될 때 JPA 세션을 시작하고,
웹 요청 처리가 끝나면 세션을 종료한다. 이 OSIV 필터를 사용하면 JPA 세션 범위에서 JSP를 실행하기 때문에, JSP 코드에서 지연 로딩 대상 프로퍼티에 접근하더라도 
DB로부터 알맞게 대상 객체를 로딩할 수 있게 된다.

스프링은 JPA를 위한 OSIV 필터를 제공하고 있으며, 이 필터는 다음과 같이 설정할 수 있다.


	<filter>
		<filter-name>openEntityManagerFilter</filter-name>
		<filter-class>
			org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter
		</filter-class>
		<init-param>
			<param-name>entityManagerFactoryBeanName</param-name>
			<param-value>entityManagerFactory</param-value>
		</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>openEntityManagerFilter</filter-name>
		<url-pattern>/*<url-pattern>
	</filter-mapping>
	
	
OpenEntityManagerInViewFilter를 사용할 때 주의할 점은, OpenEntityManagerInViewFilter가 EntityManagerFactory 객체를 검색할 때
사용하는 스프링 컨테이너는 DispatcherServlet이 사용하는 컨테이너가 아닌 서블릿 컨텍스트를 위한 컨테이너라는 점이다.
즉, ContextLoaderListener를 이용해서 생성한 스프링 컨테이너에서 EntityManagerFactory를 검색한다. 따라서, 스프링 컨테이너를 설정할 때에는 다음과 같이 
DispatcherServlet에서는 웹 MVC 관련 설정만 하고, 나머지 EntityManagerFactory를 포함한 어플리케이션과 관련된 설정은 ContextLoaderListener를 이용하는 방법을 사용해야 한다.


	<wep-abb>
		<listener>
			<listener-class>
				org.springframework.web.context.ContextLoaderListener
			</listener-class>
		</listener>
		
		<context-param>
			<param-name>contextConfigLocation</param-name>
			<!-- EntityManagerFactory를 포함한 설정 -->
			<param-value>classpath:/jpa.xml, classpath:/application</param-value>
		</context-param>
		
		<!-- 스프링 MVC 관련 설정 -->
		<serlvet>
			<servlet-name>dispatcher</servlet-name>
			<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
			<init-param>
				<param-name>contextConfigLocation</param-name>
				<param-value>
					/WEB-INF/spring-mvc.xml
				</param-value>
			</init-param>
			<load-on-startup>1</load-on-startup>
		</servlet>
		
		<servlet-mapping>
			<servlet-name>dispatcher3</servlet-name>
			<url-pattern>/</url-pattern>
		</servlet-mapping>
		...
		<!-- OpenEntityManagerInViewFilter는 ContextLoaderListener가 생성한
			스프링 컨테이너에서 EntityManagerFactory를 검색 -->
		<filter>
			<filter-name>openEntityManagerFilter</filter-name>
			<filter-class>
				org.springframework.org.jpa.support.OpenEntityManagerInViewFilter
			</filter-class>
			<init-param>
				<param-name>entityManagerFactoryBeanName</param-name>
				<param-value>entityManagerFactory</param-value>
			</init-param>
		</filter>
		
		<filter-mapping>
			<filter-name>openEntityManagerFilter</filter-name>
			<url-pattern>/*</url-pattern>
		</filter-mapping>
	</web-app>
	
	
[OSIV 패턴을 사용하면 구현을 편하게 할 수 있는 장점이 있지만, OSIV 패턴을 사용하는 것에 대한 호불호가 존재한다.
OSIV 패턴을 사용하면 로딩을 사용하면서도 JSP와 같은 뷰 영역의 코드에서 지연 로딩 대상 객체를 로딩할 수 있기 때문에, 개발자 입장에서는 지연 로딩을 비교적 자유롭게 사용할 수 있다.
하지만 ,어플리케이션 서비스의 메소드가 트랜잭션의 적정 범위인데, 트랜잭션 범위가 뷰 영역까지 확장된다. 즉, 뷰 영역에서 도메인 객체의 상태를 변경할 수 있기 때문에,
개발자가 생각하는 트랜잭션 범위 밖에서(즉, 어플리케이션 서비스 영역 밖인 뷰 코드에서) DB 상태를 변경하는 상황이 발생할 수 있다.
이런 이유로 OSIV 패턴을 선호하지 않는 프로그래머도 있다.]

OSIV 패턴 외에 지연 로딩으로 인해 발생하는 세션 문제를 해소하기 위한 또 다른 방법은 뷰에서 사용할 데이터를 미리 로딩한 뒤에 뷰를 전달하는 것이다.
예를 들어, 다음과 같이 뷰에서 필요한 데이터를 모두 로딩하는 클래스를 만들어 사용할 수 있다. 다음 코드에서 Hibernate.initialize()는 
JPA 프로바이더로 하이버네이트를 선택했을 때 사용할 수 있는 코드로, initialize() 메소드에 전달한 객체 DB에서 로딩하는 기능을 제공한다.
예를 들어, Member가 locker 프로퍼티를 지연 로딩으로 설정한 경우, Hibernate.initialize(member.getLocker()) 코드는 DB에서 locker 프로퍼티에
해당하는 값을 로딩해서 Locker 객체를 생성해준다.


	public class DataLoader {
	
		@Autowired
		private MemberRepository memberRepository;
		
		@Transactional
		public Member loadMember(Long memberId) {
			Member member = memberRepository.findOne(memberId);
			if(member == null)
				return null;
			Hibernate.initialize(member.getLocker());
			return member;
		}
	}
	
	
컨트롤러 코드는 리파지터리 대신 DataLoader 클래스를 사용해서 Member 객체를 읽어와 뷰에 전달하면 된다.
DataLoader 클래스는 지연 로딩 대상인 객체를 로딩해주기 때문에, 뷰 코드는 지연 로딩에 대한 걱정 없이 member.getLocker() 객체의 값을 사용할 수 있게 된다.


	@Controller
	public class MemberDetailController {
	
		private DataLoader dataLoader;
	
		@RequestMapping("/admin/member/detail")
		public String detail(@RequestParam("memberId") Long memberId, Model model) {
			// DataLoader는 Member의 지연 로딩 대상인
			// Locker 객체를 로딩해준다.
			
			Member member = dataLoader.loadMember(memberId);
			if (member == null)
				return "admin/noMember";
			model.addAttribute("member", member);
			return "admin/memberDetail";
		}
		...
		
		
지연 로딩 대상 연관을 미리 읽어오는 또 다른 방법은 뷰에서 필요한 데이터만 제공하는 별도 객체를 사용하는 것이다.
예를 들어, 회원 정보 수정을 위한 입력폼을 생각해보자. 이 경우 수정 폼에는 미리 기존 정보가 입력되어 있도록 하고, 맨 처음 폼에 값을 보여줄 때 입력 폼을 위한 커맨드 객체를 사용하길 원할 것이다.
이런 경우에는 도메인 객체를 커맨드 객체로 변환해서 폼에 전달하면, 스프링의 <form:input> 등의 태그를 사용해서 폼에 값을 쉽게 출력할 수 있게 된다.