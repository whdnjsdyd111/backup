웹 어플리케이션을 개발할 때 가장 많이 사용되는 구조는 컨트롤러-서비스-DAO로 이어지는 구성이다.
이 구조는 이해가 쉽기 때문에 도메인의 복잡도에 상관없이 널리 사용되고 있다.


						web
						
					SomeController
				
				- someSvc : SomeService
				- someDao : SomeDao
				
				+ handleMethod1() : String
				+ handleMethod2() : String
			│							│
			↓							↓
			service						dao								model
		
		<< interface >>				<< interface >>						SomeModel
		SomeService			┌───→		SomeDao
							│	
		+ func1()			│		+ insert(s: SomeModel)
							│		+ select() : List<SomeModel>
				↑			│
		SomeServiceImpl		│				↑
							│		TechSpecificSomeDao
		- someDao : SomeDao	┘
		
		
위는 서비스 - DAO로 구성되는 웹 어플리케이션의 각 구성 요소간의 관계를 표현한 것으로, 각 구성 요소는 다음의 역할을 수행한다.


	구성 요소		역할
		
	모델			데이터베이스 테이블과 관련된 클래스가 위치한다. CRUD의 기본 단위로 사용되며, 서비스 - DAO 간 데이터를 주고 받기 위한 객체로도 사용된다.
	
	DAO			Data Access Object의 약자로, 데이터베이스 테이블에 대한 CRUD 기능을 정의한다. 데이터 입력이나 수정, 조회 시 데이터 타입으로 모델을 사용한다.
	
	서비스		컨트롤러를 통해서 전달받은 사용자의 요청을 구현한다. DB 연산이 필요한 경우 DAO를 이용한다.
	
	컨트롤러		사용자의 웹 요청을 받아 서비스나 DAO에 전달하고, 결과를 뷰에 전달한다.
	
	
스프링 기반 어플리케이션에서 컨트롤러, 서비스, DAO는 각각 스프링 빈으로 등록되며, DI를 이용해서 의존 대상을 조립한다.

[서비스 - DAO 구조를 설명할 때 사용한 코드 예제는 제공하는 소스 코드의 /mvnprj/spring4-chap15-a1에 위치해 있다.]


	1.1 DAO 인터페이스 정의
	
DAO는 Data Access Object의 약자로 데이터 접근에 필요한 메소드를 정의한다. 보통 SQL의 CRUD에 해당하는 insert, select, update, delete 메소드를 정의한다.
insert()와 delete()는 단순한 인터페이스를 갖는다.


	public interface EmployeeDao {
		public int insert(Employee emp);
		public int delete(Long id);
		...
	}
	
	
select는 필요한 기능에 따라 다양한 메소드가 존재할 수 있다.
예를 들어, PK를 이용한 검색과 조건을 이용한 검색이 필요할 경우 다음과 같은 메소드를 사용할 수 있다.


	public interface EmployeeDao {
		public Employee selectOne(Long id);
		public List<Employee> selectList(검색조건타입 cond);
		...
	}
	
	
검색조건타입을 어떻게 정의하느냐는 검색 조건과 사용하는 기술에 따라 달라질 것이다.
예를 들어, 특정 컬럼 값을 비교한 검색이 필요하다면 다음과 같이 해당 컬럼 값만 파라미터로 정의할 수 있을 것이다.


	public List<Employee> selectListByStatus(StatusEnum status);
	
	
보통은 검색 조건이 고정되어 있기 때문에, SearchCondition과 같은 이름을 클래스를 이용해서 검색 조건을 표현하고,
이를 파라미터로 사용할 수 있을 것이다.


	public List<Employee> selectList(SearchCondition cond);
	
	
SearchCondition 클래스는 다음과 같이 검색 화면에서 입력하는 데이터를 포함하고 있을 것이다.


	public class SearchCondition {
		private Date fromJoinedDate;
		private Date toJoinedDate;
		private String nameKeyword;
		private String empNumber;
	
		... get/set 메소드
	
		public boolean hasNoCond() {
			return fromJoinedDate == null && toJoinedDate == null &&
					isEmpty(nameKeyword) && isEmpty(empNumber);
		}
		
		
DAO 클래스는 SearchCondition이 가진 값에 따라 알맞은 쿼리를 실행하도록 구현한다.


	public class JdbcEmployeeDao implements EmployeeDao {
	
		...
		@Override
		public List<Employee> selectList(SearchCondition cond) {
			if (cond.hasNoCond()) {
				return jdbcTemplate.query(SELECT_ALL_QUERY, rowMapper);
			} else {
				JunctionCondition andCondition = new AndCondition();
				if (cond.hasEmpNumber())
					andCondition.add(
							new BooleanCondition("EMPLOYEE_NUM = ?", cond.getEmpNumber()));
				if (cond.hasNameKeyword())
					andCondition.add(
							new BooleanCondition("NAME like ?", "%" + cond.getNameKeyword() + "%"));
				if (cond.hasFromJoinedDate())
					andCondition.add(
							new BooleanCondition("JOINED_DATE >= ?", cond.getFromJoinedDate()));
				if (cond.hasToJoinedDate())
					andCondition.add(
							new BooleanCondition("JOINED_DATE <= ?", cond.getToJoinedDate()));
	
				String query = "select * from EMPLOYEE";
				if (andCondition.hasConditions()) {
					query += " where " + andCondition.getQuery();
				}
	
				return jdbcTemplate.query(query,
						andCondition.getParams().toArray(),
						rowMapper);
			}
		}
	}
	
	
조건에 따라 쿼리를 생성하기 위해 별도의 Condition 타입을 만들어 사용했다. MyBatis를 사용한다면, 동적SQL( <if>, <choose>, <when> 등)을 사용해서
SearchCondition 값에 다라 where 절을 다르게 구성할 수도 있을 것이다. 또한, 14장에서 설명한 스프링 데이터 JPA를 사용한다면 Condition 타입을 따로 구현하지 않고
스프링 데이터 JPA가 제공하는 Specification 타입을 사용할 수도 있을 것이다.

[MyBatis의 동적SQL에 대한 내용은	http://mybatis.github.io/mybatis-3/dynamic-sql.html
글을 참고하자. SQL을 사용할 때 동적 쿼리를 사용하는 또 다른 방법으로 QueryDSL이 있는데, QueryDSL이 뭔지 궁금하면
http://querydsl.com/		사이트를 방문하자.]

	(1) DAO 인터페이스의 크기
	
DAO 인터페이스는 조회 기준이 되는 테이블마다 1개를 작성하는 것이 일반적이다.
예를 들어, 회원과 회원 상세 정보를 담는 테이블이 MEMBER와 MEMBER_DETAIL로 분리되어 있다면 다음과 같이 두 개의 DAO 인터페이스를 작성하게 된다.


	public interface MemberDao {
		public long insert(Member m);
		public Member selectOne(Long id);
	}
	
	public interface MemberDetailDao {
		public void insert(MemberDetail md);
		public MemberDetail selectOne(Long id);
	}
	
	
위와 같이 테이블을 기준으로 DAO 인터페이스를 작성했을 때, MEMBER 테이블과 MEMBER_DETAIL 테이블을 조인해서 조회하는 메소드는 어떤 DAO 인터페이스에 위치시켜야 할까?
정답이 따로 있진 않지만, 다음의 세 가지 정도 접근법이 있을 것 같다.

	- 두 DAO에서 읽어와 프로그램에서 객체를 조립한다.
	- 주 테이블에 해당하는 DAO에 메소드를 추가한다.
	- 조인 결과를 위한 별도 DAO 인터페이스를 작성한다.
	
첫 번째 방법은  다음처럼 두 DAO에서 데이터를 읽어와 프로그램에서 조인을 하는 방식이다.


	Member mem = memberDao.selectOne(id);
	MemberDetail memDetail = memberDetailDao.selectOne(id);
	MemberDto dto = new MemberDto(mem, memDetail);
	return dto;
	
	
서비스 구현 클래스나 컨트롤러 클래스에서 위와 같은 방식으로 프로그램 조인을 할 수 있을 것이다.

두 번째 방법은 주 테이블에 해당하는 DAO 인터페이스에 메소드를 추가하는 것이다.


	public interface MemberDao {
		public MemberDto selectDto(Long id);
		...
	}
	
	public class JdbcMemberDto implements MemberDao {
		...
		@Override
		public MemberDto selectDto(Long id) {
			return jdbcTemplate.queryForObject(
				"select * from MEMBER m, MEMBER_DETAIL d" + 
				"where m.id = ? and m.id = d.id",
				new RowMapper<MemberDto>() {...}
			);
		}	
	}
	
	
세 번째 방법은 조인 결과를 제공하는 별도 인터페이스를 작성하는 방법이다.
이는 특정 테이블을 기준으로 실행되는 조인이 아니라 통제처럼 여러 테이블을 조인해서 종합적인 결과를 추룰하는 쿼리를 만들어야 할 때 사용한다.

	
	public interface StatisticDao {
		public List<StatisticDao> selectForVisit(Date fromTime, Date toTime);
	}
	
	
[세 가지 방법 중 무엇이 좋다고 단정지을 순 없지만, 필자는 첫 번째 방식, 즉 어플리케이션에서 조인을 수행하는 것을 선호한다.
이 방식을 선호하는 이유 중 하나는 개인적으로 DB 중심이 아닌 어플리케이션 중심의 코드를 좋아하고, 또 다른 이유는 테이블 단위로 캐시를 적용하기 쉽기 때문이다.
물론, 통계와 같은 특수한 목적의 쿼리를 실행할 때에는 세 번째 방식을 사용한다.]


	1.2 서비스의 구현
	
서비스는 사용자 기능을 정의한다. 예를 들어, 직원 등록 기능을 위한 서비스 인터페이스는 다음과 같은 메소드를 정의할 수 있을 것이다.


	public interface EmployeeRegistryService {
		public Long register(Employee emp);
	}
	
	
서비스 구현 클래스는 보통 DAO를 이용해서 기능을 완성한다. 예를 들어, 직원 등록 기능을 구현한 서비스 클래스는 EmployeeDao를 이용해서 같은 사번을 가진 직원 데이터가
존재하는지 확인하고, 존재하지 않으면 insert() 메소드를 이용해서 직원 데이터를 DB에 추가할 것이다.


	public class EmployeeRegistryServiceImpl implements EmployeeRegistryService {
	
		private EmployeeDao empDao;
		public void setEmpDao(EmployeeDao empDao) {
			this.empDao = empDao;
		}
	
		@Transactional
		@Override
		public Long register(Employee emp) {
			Employee oldEmp = empDao.selectByEmployeeNumber(emp.getNumber());
			if (oldEmp != null)
				throw new DuplicateEmpNumberException();
			return empDao.insert(emp);
		}
	
	}
	
	
일반적으로 서비스의 메소드는 트랜잭션 단위가 되므로, @Transactional 어노테이션이나 스키마 기반의 트랜잭션 설정을 이용해서 메소드가 트랜잭션 범위 내에서 실행되도록 한다.

	(1) 서비스의 크기
	
서비스 인터페이스를 정의할 때 고민해볼 문제는 인터페이스가 제공할 메소드에 대한 것이다.
예를 들어, 다음 인터페이스를 보자.


	public interface EmployeeService {
		public Long register(Employee emp);
		public void updateInfo(Employee emp);
		public void retire(String empNumber);
		public void promote(String empNumber, Level level);
		...
	}
	
	
위 인터페이스는 특정 모델과 연관된 서비스 메소드를 한 개의 인터페이스에 정의하고 있다.
이 인터페이스를 구현한 서비스 클래스는 Employee 모델의 DB 연산을 위한 EmployeeDao를 필드로 갖고 있을 것이다.
그리고, retire(퇴직)나 promote(승진) 기능 구현에 필요한 추가적인 의존 객체를 갖게 된다.


	public class EmployeeServiceImpl implements EmployeeService {
		private EmployeeDao empDao;
		// 퇴직금 계산 서비스, retire() 메소드에서 사용
		private RetirementPayService retPayService;
		...
	}
	
	
서비스 구현 클래스가 구현하는 메소드의 개수가 많아지면, 필요한 의존 객체를 참조하기 위한 필드 개수도 증가하게 된다.
또한, 서로 관련 없는 기능(예, 직원 정보 변경과 퇴직 처리)이 한 클래스에 구현되므로 코드를 복잡하게 만들 가능성이 높고 코드 길이도 증가하게 된다.
이는 전반적으로 코드를 관리하기 어렵게 만드는 경향이 있기 때문에, 필자의 경우는 한 인터페이스에 메소드를 몰아 넣기 보다는 다음과 같이 구분되는 기능별로 인터페이스를 분리하는 방법을 선호한다.


	public interface EmployeeRegistryService {
		public Long register(Employee emp);
	}
	
	public interface RetirementService {
		public void retier(Long empNumber);
	}
	
	
[객체 지향의 주요 원칙 중에 SOLID라 불리는 다섯가지 원칙이 있다. 이 중 인터페이스의 크기에 대한 원칙으로 SRP(Single Responsibility Principle)와
ISP(Interface Segregation Principle)를 들 수 있는데, 이 두 원칙에 따르면 여러 메소드를 하나의 서비스 인터페이스에 두는 것보다
각각의 구분되는 기능을 위한 인터페이스를 따로 작성하도록 제안하고 있다. 이들 원칙 외에 객체 지향에 대한 기초 지식이 궁금하다면, 관련 서적을 참고하자.
참고로, 객체 지향과 디자인 패턴, 인투북스(http://goo.gl/29JzHP)이 도움될 것이다.]

	(2) 서비스의 메소드 파라미터 타입
	
직원의 정보를 변경하기 위한 서비스 인터페이스를 다음과 같이 정의했다고 하자.

	
	public interface UpdateEmployeeInfoService {
		public void updateInfo(Employee emp);
	}
	
	
서비스 구현 클래스는 Employee 객체를 이용해서 정보 변경 기능을 알맞게 구현할 것이다.


	public class UpdateEmployeeInfoServiceImpl implements UpdateEmployeeInfoService {
		private EmployeeDao empDao;
		...
		public void updateInfo(Employee emp) {
			Employee old = empDao.selectOne(emp.getId());
			if(old == null) throw new EmployeeNotFoundException();
			old.setAddress(emp.getAddress());
			old.setPhone(emp.getPhone());
			empDao.update(old);
		}
	}
	
	
직원 정보 변경을 추가하고 그 이력을 관리하고 싶다는 요구가 있다면, 어떻게 해야 할까? 별도 테이블에 직원 정보 변경 사유 이력을 기록할 수 있을 것이다.
이 경우, 가장 쉽게 할 수 있는 방법은 다음과 같이 Employee 클래스에 사유를 담을 수 있는 프로퍼티를 추가하고, 그 프로퍼티를 이용해서 다른 테이블에 이력을 추가하는 방법일 것이다.


	public class Employee {
		... // 기존 모델 프로퍼티
		// 변경 사유 정보 입력을 위한 프로퍼티 추가
		// 모델과 요청 데이터가 혼재되므로, 좋은 방법이 아님!
		private String modificationReason;
		...
	}
	
	public class UpdateEmployeeInfoServiceImpl implements UpdateEmployeeInfoService {
		private EmployeeDao empDao;
		private ModificationHistoryDao historyDao;
		...
		
		@Transactional
		@Override
		public void updateInfo(Employee emp) {
			Employee old = empDao.selectOne(emp.getId());
			if(old == null) throw new EmployeeNotFoundException();
			old.setAddress(emp.getAddress());
			old.setPhone(emp.getPhone());
			empDao.update(old);
			
			historyDao.insert(
				new ModificationHistory(emp.getId(), emp.getModificationReason());
		}
	}
	
	
위와 같은 방식으로 수정하는 것이 당장은 쉽지만, 시간이 흐를수록 코드 유지 보수를 힘들게 하는 원인이 된다.
위 방식으로 수정하기 시작하면 Employee 클래스가 더 이상 한 테이블과 일치하지 않게 된다. 처음 Employee 클래스를 분석하는 개발자는 
EMPLOYEE 테이블에 modificationReason 프로퍼티에 해당하는 컬럼이 존재하지 않는다는 사실을 알지 못한다.
이 개발자는 EMPLOYEE 테이블을 먼저 분석하고, EmployeeDao에서 실행하는 쿼리를 분석한 뒤에야 비로서 modificationReason이 Employee 자체와는 상관이 없다는 것을 알게된다.
실제로 이 modificationReason 프로퍼티가 ModificationHistory 모델의 modificationReason을 위함 것임을 알기전까지는 더 오래 시간이 걸린다.

이렇게 서비스 메소드의 파라미터가 모델 타입과 일치하지 않으면, 모델 타입을 사용하는 대신 서비스 메소드를 위한 별도 요청 타입을 작성하는 것이 좋다.
예를 들어, 직원 정보 수정 예의 경우 다음과 같이 UpdateEmpRequest와 같은 클래스를 메소드 파라미터로 사용하도록 변경할 수 있다.


	public class UpdateEmpRequest {
		private Long id;
		private Address address;
		private Phone phone;
		private String modificationReason;
		// get/set 메소드
	}
	
	public interface UpdateEmployeeService {
		public void updateInfo(UpdateEmpRequest updateRequest);
	}
	
	
처음 Employee 클래스가 존재하는 상태에서 UpdateEmpRequest 클래스를 추가로 작성하는 것은 (코드를 새롭게 추가하고 싶지 않은) 심리적 저항을 불러일으키지만,
일단 만들고 나면 코드 가독성을 높여주게 된다. UpdateEmpRequest 클래스를 보는 개발자는 이 클래스가 Employee의 정보를 수정하는데 필요한 값을 포함하고 있다는 것을
쉽게 유추할 수 있고, 수정 대상이 되는 DB 테이블과의 불일치도 발생하지 않는다.

	(3) 조회 기능과 메소드
	
조회 기능을 위한 서비스의 구현 코드는 다음과 같이 DAO의 메소드를 호출하고 끝나는 경우가 많다.


	public class ListEmployeeServiceImpl implements ListEmployeeService {
		@Override
		@Transactional
		public List<Employee> getEmployeeList(int startRow, int size) {
			return empDao.selectList(startRow, size);
		}
		...
	}
	
	
이렇게 DAO에 단순 위임만 하고 끝나는 서비스를 작성하는 것은 사실상 필요 없는 인터페이스를 만드는 것이다.

서비스에서 DAO의 조회 메소드를 호출하는 것 외에 추가적인 로직을 구현하지 않는다면, 서비스를 따로 정의할 필요 없이 데이터가 필요한 곳에서 DAO에 직접 접근할 수도 있을 것이다.
예를 들어, 컨트롤러에서 서비스를 거치지 않고 아래 코드처럼 바로 EmployeeDao를 사용해서 조회한 결과를 뷰에 전달하도록 구현할 수 있을 것이다.


	public class EmployeeAdminController {
		private EmployeeDao empDao;
		...
		@RequestMapping("/hr/employee/list")
		public String list(@RequestParam("page") int pageNum, Model model) {
			int startRow = (pageNum - 1) * PAGE_SIZE;
			// 단순 조회라면, 서비스를 거칠 필요 없이 DAO에 바로 접근
			model.addAttribute("employeeList", empDao.selectList(startRow, PAGE_SIZE));
			return "hr/employee/list";
		}
	}
	
[컨트롤러-서비스-DAO로 구성되는 어플리케이션을 개발하다 보면, 위 예 처럼 서비스에 어떤 업무 로직이 포함되어 있지 않고 단순히 DAO의 메소드를 호출하고 끝나는 경우에도
구성을 일관되게 해야 한다는 규칙 때문에 서비스를 구현하는 경우가 있다. 코드 일관성을 유지한다는 측면에서 모든 경우에 서비스를 만들 수도 있겠지만,
필자는 반드시 서비스를 만들어야만 한다는 입장은 아니다. 이런 이유로 이 절의 내용을 추가했다.]