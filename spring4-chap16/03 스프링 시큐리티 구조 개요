스프링 시큐리티의 설정 자체는 간단하지만, 스프링 시큐리티가 지원하지 않는 인증 방식을 사용해야 한다거나 HttpSession이 아닌 다른 장소에 인증 객체를 보관하기 위해서는
스프링 시큐리티의 동작 방식을 이해하고 그중 필요한 부분의 기능을 알맞게 변경할 수 있어야 한다. 스프링 시큐리티의 구조는 복잡하진 않지만 그렇다고 단순하지도 않기 때문에,
자신의 환경에 스프링 시큐리티를 적용할 수 있으려면, 스프링 시큐리티의 주요 구성 요소와 전반적인 동작 방식에 대한 이해가 필요하다.


	3.1 SecurityContext, SecurityContextHolder, Authentication, GrantedAuthority
	
o.s.security.core.Authentication은 스프링 시큐리티에서 현재 어플리케이션에 접근한 사용자(더 정확하게는 웹 브라우저, REST로 접근한 외부 시스템 등)의 보안 관련 정보를 보관하는 역할을 한다.
뒤에서 설명하겠지만, 예를 들어, Authentication의 사용자의 인증 여부, 스프링 시큐리티는 이 정보를 이용해서 사용자가가 요청한 자원(URL 등)에 접근할 수 있는지 여부를 판단한다.

[Principal울 보통 '주체'로 많이 번역하는데 위키피디아에 따르면 Principal을 "An entity that can be authenticated by a computer system or network.
It is referred to as a security principal in Java and Microsoft literature."로 정의하고 있다.
즉, 인증 가능한 개체를 Principal이라고 정의하고 있다.]

스프링 시큐리티가 Authentication을 사용하려면 어딘가에 Authentication 객체를 가져와야 하는데, 이 때 사용하는 것이 o.s.s.core.context.SecurityContextHolder 클래스다.
(o.s.s는 org.springframework.security를 줄여서 표현한 것이다.) SecurityContextHolder 클래스의 getContext() 메소드는 SecurityContext 객체를 리턴하며,
이 SecurityContext 객체의 getAuthentication() 메소드를 이용해서 Authentication 객체를 구할 수 있다.


	SecurityContext context = SecurityContextHolder.getContext();
	Authentication auth = context.getAuthentication();
	
	
o.s.s.core.SecurityContext는 Authentication 객체를 보관하는 역할을 한다. 스프링 시큐리티는 웹 브라우저로부터 요청이 들어오면 서블릿 필터를 이용해서 
SecurityContext에 Authentication 객체를 설정한다. 이를 위한 서블릿 필터를 직접 구현한다면 아마도 다음과 같은 코드를 만들어야 할 것이다.


	// 웹 요청을 가장 먼저 받는 필터에서 Authentication을 생성해서
	// SecurityContext에 보관
	Authentication auth = someMethodForGettingAuth(request, response);
	
	try {
		SecurityContextHolder.getContext().setAuthentication(auth);
		chain.doFilter(request, response);
	} finally {
		SecurityContextHolder.clearContext();
	}
	
	
위 코드에서 someMethodForGettingAuth() 메소드는 HttpSession이나 다른 외부 저장소 등에서 현재 접속한 클라이언트에 해당하는 Authentication 객체를 생성하도록 구현하게 될 것이다.
위와 같이 동작하는 서블릿 필터를 직접 만들수도 있지만, 대부분은 스프링 시큐리티가 제공하는 SecurityContextPersistenceFilter 클래스의 기능을 활용해서
SecurityContext를 설정하기 위한 코드 양을 줄일 수 있다.

뒤의 '보안 필터 체인' 부분에서 살펴보겠지만, 스프링 시큐리티는 SecurityContextPersistenceFilter를 가장 먼저 적용해서 SecurityContext를 이용해서
현재 접속한 사용자의 Authentication 객체를 구하고, Authentication 객체가 표현하는 주체가 접속한 자원에 접근할 수 있는지 여부를 판단하게 된다.

[SecurityContextHolder는 기본으로 ThreadLocal을 이용해서 SecurityContext 객체를 보관한다. 따라서, 
하나의 웹 요청을 처리하는 스레드는 같은 SecurityContext 객체(그리고 Authentication) 객체를 사용하게 된다.]

	(1) Authentication 인터페이스
	
스프링 시큐리티가 제공하는 코드가 아닌 우리가 만든 코드에서 직접 o.s.s.core.Authentication 객체를 사용해야 할 때가 있다.
이런 경우에는 앞서 살펴본 SecurityContextHolder를 이용해서 Authentication 객체를 구하면 된다.


	Authentication auth = SecurityContextHolder.getContext().getAuthentication()
	
	
Authentication 객체를 구했다면, Authentication 객체가 제공하는 메소드를 이용해서 필요한 정보를 구할 수 있다.
이들 메소드는 다음과 같다.

	- String getName() : 이름을 구한다.
	
	- Object getCrendentials() : 인증 대상 주체를 증명하는 값을 구한다. 비밀 번호 등이 이에 해당된다.
	
	- Object getPrincipal() : 주체를 표현하는 객체를 구한다.
	
	- Object getDetails() : 주체에 대한 상세 정보를 구한다. 접속한 IP 등의 정보를 저장하는 용도로 사용할 수 있다.
	
	- boolean isAuthenticated() : 인증 여부를 리턴한다.
	
	- void setAuthenticated(boolean authenticated) : 인증 여부를 설정한다.
	
	- Collection<? extends GrantedAuthority> getAuthorities() : 주체가 가진 권한 목록을 구한다. GrantedAuthority가 권한을 의미한다.
	
Authentication 타입은 다음의 두 가지 목적으로 사용된다.

	- AuthenticationManager에 인증을 요청할 때 필요한 정보를 담는 목적
	- 현재 접속한 사용자에 대한 정보를 표현하기 위한 목적
	
먼저, 스프링 시큐리티는 인증을 위한 목적으로 Authentication 객체를 사용한다.
스프링 시큐리티는 AuthenticationManager를 사용해서 인증을 처리하는데, 이 AuthenticationManager가 입력으로 받는 값의 타입이 Authentication이다.

두 번째로 현재 사용자에 대한 정보를 표현하기 위해 Authentication 객체를 사용한다.
앞서 설명했듯이 스프링 시큐리티는 SecurityContext에 보관된 Authentication 객체를 가져와, 이 Authentication 객체가 지정한 자원(URL 경로)에 접근할 수 있는지 검사한다.
따라서, 스프링 시큐리티 프레임워크를 잘 사용하려면 알맞은 Authentication 객체를 생성해주어야 한다.

예를 들어, 스프링 시큐리티는 UsernamePasswordAuthenticationToken 클래스를 제공하고 있는데, 이 클래스는 사용자 아이디와 암호를 이용해서 인증을 처리할 때 사용되는
Authentication 구현체다. 또한, AnonymousAuthenticationToken 클래스를 제공하고 있는데, 이 클래스는 아직 인증을 거치지 않은 사용자를 표현하기 위한 구현체로 사용된다.
스프링 시큐리티가 이미 다양한 상황에 맞게 사용할 수 있는 Authentication 구현 클래스를 제공하고 있지만, 필요에 따라 직접 알맞은 Authentication 구현체를 구현해야 할 때도 있다.

	(2) GrantedAuthority 인터페이스
	
o.s.s.core.GrantedAuthority 인터페이스는 권한을 표현할 때 사용된다. 앞서 Authentication 인터페이스의 getAuthorities() 메소드는 사용자가 가진 권한 목록을 리턴한다고 했는데,
이때 GrantedAuthority를 사용했다. 이 인터페이스는 다음과 같이 정의되어 있다.


	public interface GrantedAuthority extends Serializable {
		String getAuthority();
	}
	
	
GrantedAuthority의 getAuthority() 메소드의 리턴 타입은 String 인데, 이는 스프링 시큐리티가 모든 권한을 문자열로 표현한다는 것을 의미한다.
예를 들어, 접근 권한을 설정할 때 사용할 코드를 보면, 아래 코드처럼 권한을 "USER_MANAGER"와 같은 문자열을 사용해서 표현했다.


	<sec:intercept-url pattern="/admin/usermanager/**"
			access="hasAuthority('USER_MANAGER')" />
			
			
o.s.s.core.authority.SimpleGrantedAuthority 클래스는 GrantedAuthority 타입의 객체를 직접 생성해야 할 때 사용할 수 있는 클래스로서,
이 클래스는 생성자를 이용해서 String 타입의 권한 값을 전달받는다.


	GrantedAuthority authority = new SimpleGrantedAuthority("USER_MANAGER")
	
	
	3.2 보안 필터 체인
	
스프링을 이용한 웹 보안 처리에서 핵심 요소 중의 하나를 꼽으라면 보안 필터 체인을 들 수 있다. 앞서 퀵 스타트 예제에서 로그인 폼들 보여준다거나, 
접근 권한이 없는 경우 403 상태 코드를 응답하거나, '/j_spring_security_logout' 경로로 요청이 들어올 때 로그아웃을 하는 등 보안과 관련된 작업을 처리하는 것이 바로 보안 필터 체인이다.

web.xml에 설정한 DelegatingFilterProxy는 스프링 시큐리티가 생성하는 FilterChainProxy에 필터 처리를 위임하는데, 
이 FilterChainProxy는 다시 여러 필터를 체인 형식으로 갖고 있는 SecurityFilterChain에 처리를 위임한다.


		FilterChainProxy
				↓
			보안필터체인	Authentication 정보 생성 및 접근 권한 검사 등 보안 관련 처리
				↓
			실제 자원
			
			
만약 현재 접속한 사용자가 실제 자원에 접근할 권한이 없다면 보안 필터 체인은 사용자가 실제 자원에 접근하는 것을 차단하고, 403과 같은 응답을 전송하게 된다.
보안 필터 체인을 어떻게 구성했냐에 따라 에러 화면을 보여주거나 로그인 폼을 보여주기도 한다. 즉, 보안 필터 체인은 현재 사용자가 실제 자원에 접근 가능한지 여부를 따져서,
접근 권한이 있는 사용자만 통과시켜 주고 권한이 없는 사용자는 차단하는 기능을 제공한다.

보안 필터 체인이라는 이름에서 알 수 있듯이, 여러 필터가 모여서 하나의 보안 필터 체인을 형성하게 된다.
스프링 시큐리티는 보안 필터 체인에서 사용되는 기본적인 필터를 이미 제공하고 있으며, 이들 필터는 다음과 같이 구성되어 있다.


	FilterChainProxy	────>		보안 필터 체인
								(SecurityFilterChain)
								
							SecurityConetxtPersistenceFilter
							WebAsyncManagerIntergrationFilter
									LogoutFilter
							UsernamePasswordAuthenticationFilter
							DefaultLoginPageGeneratingFilter
								RequestCacheAwareFilter
							SecurityContextHolderAwareRequestFilter
							AnonymousAuthenticationFilter
								SessionManagementFilter
								ExceptionTranslationFilter
								FilterSecurityInterceptor
								
								
위 그림은 보안 필터 체인이 갖고 있는 필터 목록에서 위에 위치한 필터가 먼저 적용되고 아래에 위치한 필터가 나중에 적용된다. 웹 어플리케이션을 위한 스프링 시큐리티의 설정은 대부분 이 필터들을 위한 설정이다.
예를 들어, 아래 코드를 이용하면 LogoutFilter, FilterSecurityInterceptor, DefaultLoginPageGeneratingFilter 그리고
UsernamePasswordAuthenticationFilter를 생성하게 된다.


	<sec:http use-expressions="true">
		<sec:interceptor-url pattern="/**" access="permitAll" />
		<sec:form-login />
		<sec:logout />
	</sec:http>
	
	
별도 설정을 하지 않아도 몇몇 필터는 기본으로 사용된다. 예를 들어, SecurityContextPersistence, AnonymousAuthenticationFilter, ExceptionTranslationFilter 등의 필터는
별도로 설정하지 않아도 기본으로 포함된다.

각 필터는 자신만의 고유 역할을 갖고 있다. 예를 들어, FilterSecurityInterceptor는 사용자가 자원에 접근할 수 있는지 여부를 검사하며, LogoutFilter는 로그아웃 경로로
요청이 오면 로그아웃 처리를 한다. 스프링 시큐리티가 제공하는 주요 필터의 역할은 다음과 같다.


	필터										설명
	
	ChannelProcessingFilter					HTTP 요청일 경우 같은 경로를 갖는 HTTPS 경로로 리다이렉트시키고, 이후 필터를 진행하지 않는다.
	
	SecurityContextPersistenceFilter		SecurityContext 객체를 SecurityContextHolder에 저장하고, 요청 처리가 끝나면 제거한다.
	
	CsrfFilter								CSRF 공격을 막기 위한 처리를 한다.
	
	LogoutFilter							지정한 경로의 요청이 오면 로그아웃을 처리하고 지정한 페이지로 이동한다. 이후 필터를 진행하지 않는다.
	
	UsernamePasswordAuthenticationFilter	지정한 경로(예, /j_spring_security_check)로 POST 방식 요청이 오면, 아이디/암호 기반의 인증을 수행하고
											이후 필터를 진행하지 않는다. 인증에 성공하면 지정한 페이지로 이동하고 그렇지 않으면 다시 로그인 폼을 보여준다.
	
	DefaultLoginPageGeneratingFilter		지정한 경로(예, /spring_security_login)로 요청이 오면, 기본 제공하는 로그인 폼을 출력하고 이후 필터를 진행하지 않는다.
	
	RememberMeAuthenticationFilter			시스템 간의 연동을 위한 메시징 프레임워크를 제공한다.
	
	AnonymousAuthenticationFilter			현재 사용자가 인증 전일 경우, 임의 사용자에 해당하는 Authentication 객체를 SecurityContext에 설정한다.
											생성된 Authentication 객체는 이름이 "anonymouseUser"이고, "ROLE_ANONYMOUS" 권한을 가지며,
											인증되지 않은 상태 값을 갖는다.
											
	SessionManagementFilter					세션 타임아웃, 동시 접근 제어, 세션 고정 공격 등을 처리한다.
	
	ExceptionTranslationFilter				FilterSecurityInterceptor에서 발생한 익셉션을 웹에 맞는 응답으로 변환한다.
											예를 들어, 403 상태 코드를 응답하거나 로그인 페이지로 이동하는 등의 작업을 수행한다.
	
	FilterSecurityInterceptor				현재 주체가 지정한 자원에 접근할 수 있는지 여부를 검사한다. 권한이 있으면 보안 필터를 통과시켜 자원에 접근할 수 있게 하고,
											권한이 없으면 익셉션을 발생시킨다.
											
											
보안 필터 체인에서 각 필터는 올바른 순서대로 위치해야 한다. 예를 들어, 스프링 시큐리티의 기능이 올바르게 동작하려면 SecurityContext와
Authentication이 올바르게 생성되어 있어아 하기 때문에, SecurityContext를 생성해주는 SecurityContextPersistenceFilter를 필터보다 먼저 적용해야 한다.
또한,FilterSecurityInterceptor 보다 LogoutFilter가 먼저 적용되어야 로그아웃 경로로 요청이 들어올 때
LogoutFilter가 먼저 로그아웃 처리를 해서 FilterSecurityInterceptor가 실행되지 않을 것이다.

실제 스프링 시큐리티는 다음에 표시한 순서대로 필터를 적용한다.

	- ChannelProcessingFilter
	- SecurityContextPersistenceFilter
	- LogoutFilter
	- X509AuthenticationFilter
	- AbstractPreAuthenticatedProcessingFilter
	- CasAuthenticationFilter
	- UsernamePasswordAuthenticationFilter
	- OpenIDAuthenticationFilter
	- DefaultLoginPageGenerateingFilter
	- ConcurrentSessionFilter
	- DigestAuthenticationFilter
	- BasicAuthenticationFilter
	- RequestCacheAwareFilter
	- SecurityContextHolderAwareRequestFilter
	- JaasApilntegrationFilter
	- RememberMesAuthenticationFilter
	- AnonymousAuthenticationFilter
	- SessionManagementFilter
	- ExceptionTranslationFilter
	- FilterSecurityInterceptor
	- SwitchUserFilter
	
직접 구현한 필터를 보안 필터 체인에 추가해야 할 경우 필터가 추가될 위치를 지정해야 하는데, 이때 위 필터 이름을 사용하게 된다.


	3.3 AuthenticationManager의 인증 처리
	
스프링 시큐리티는 인증이 필요할 때 o.s.s.authentication.AuthenticationManager를 이용한다.
이 인터페이스는 다음과 같이 단순하게 정의되어 있다.

	
	public interface AuthenticationManager {
		Authentication authentication(Authentication authentication)
			throws AuthenticationException;
	}
	
	
authenticate() 메소드는 인증하는데 필요한 정보를 담은 Authentication 객체를 입력으로 전달받는다. 인증에 성공하면 인증 정보를 담은 Authentication 객체를 리턴하고,
그렇지 않을 경우 익셉션을 발생한다.

일반적으로 사용자 이름(아이디)과 암호를 사용해서 사용자가 누구인지 인증한다. 실제 스프링 시큐리티가 기본으로 제공하는 인증 관련 기능도 아이디와 암호를 사용해서 인증을 처리하고 있다.
이런 이유로 스프링 시큐리티의 많은 클래스가 앞서 언급한 것처럼 UsernamePasswordAuthenticationToken을 Authentication의 기본 구현체로 사용하고 있다.

스프링이 제공하는 AuthenticationManager 인터페이스의 구현 클래스로 ProviderManager 클래스를 제공하고 있는데,
이 클래스는 인증 처리를 AuthenticationProvider에게 위임한다.


		<< interface >>
		AuthenticationManger
		
				↑
			ProviderManager	───────>	<< interface >>
									AuthenticationProvider
									
									
ProviderManager는 한 개 이상의 AuthenticationProvider를 가질 수 있으며, 다음과 같은 방식으로 동작한다.

	1. 등록된 AuthenticationProvider에 대해 차례대로 다음 과정을 실행한다.
		A. authenticate() 메소드를 실행해서 인증 처리를 요청한다.
		B. authenticate()가 Authentication 객체를 리턴하면, 해당 객체를 리턴한다.
	2. 어떤 AuthenticationProvider도 인증에 성공하지 못할 경우, 익셉션을 발생산다.
	
스프링 시큐리티의 인증 부분을 커스터마이징해야 할 경우, AuthenticationManager의 커스텀 구현을 제공할 수도 있지만 보통 ProviderManager를 그대로 사용하고
AuthenticationProvider을 구현하는 방법을 선택한다. 또한, 스프링 시큐리티는 AuthenticationProvider의 몇 가지 기본 구현체를 제공하고 있기 때문에,
특수한 상황이 아니면 기본 구현체로도 충분하다. 스프링 시큐리티가 제공하는 AuthenticationProvider의 주요 구현체에는 다음과 같다.

	- DaoAuthenticationProvider : DAO를 이용해서 사용자 정보를 읽어와 인증을 처리한다.
	- LdapAuthenticationProvider : LDAP 서버나 액티브 디렉토리를 이용해서 인증을 처리한다.
	- OpenIDAuthenticationPrivider : 오픈ID를 이용한 인증을 처리한다.
	
spring-security.xml 파일은 다음과 같이 사용자 정보를 설정했는데, 이 설정은 DaoAuthenticationProvider를 생성한다.
DaoAuthenticationProvider는 내부적으로 UserDetailsService를 이용해서 사용자 정보를 읽어오는데, 아래 설정은 메모리를 이용해서 사용자 정보를 제공하는
InMemoryUserDetailsManager를 사용하도록 설정한다.


	