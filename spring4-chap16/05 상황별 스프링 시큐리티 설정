스프링 시큐리티를 실제 프로젝트에 적용하려면 상황에 맞게 교체하거나 설정해야 하는 부분이 있다.
이 절에서는 이 중에서 자주 적용하는 설정이나 변경 부분에 대해 정리해봤다.

[상황별 스프링 시큐리티 설정 예제는 소스의 /mvnprj/spring4-chap16-s1에 위치해 있다.]

[스프링 시큐리티는 여기서 설명하는 것보다 많은 부분에 대한 맞춤 설정이 가능하다. 이것들을 모두 설명하려면 별도의 책으로 설명해야 할 만큼 분량이 방대하기 때문에,
이 장에서는 웹 어플리케이션을 개발할 때 자주 마주칠 부분의 맞춤 구현 부분만 설명했다. 이외에 다른 부분이 궁금한 독자는 스프링 시큐리티 관련 서적이나 레퍼런스 문서를 읽어보자.]


	5.1 일부 경로 스프링 시큐리티 적용 안하기
	
앞서 스프링 시큐리티 구조의 '보안 필터 체인'에서 설명했듯이 스프링 시큐리티 웹 모듈은 필터를 이용해서 접근을 제어한다.
그런데, 모든 경로에 '보안 필터 체인'을 적용할 필요는 없을 것이다. 예를 들어, CSS나 JS, 또는 이미지 등의 경로는 (많은 경우) 접근 제어 대상이 아니기 때문에,
보안 필터 체인을 적용하지 않아도 된다. 이렇게 보안 필터 체인을 적용할 필요가 없는 대상이 있다면, 다음과 같이 <http> 태그를 설정해주면 된다.


	<sec:http pattern="/css/**" security="none" />
	<sec:http pattern="/js/**" security="none" />
	
	<sec:http use-expressions="true">
		<sec:intercept-url pattern="/admin/**" 
		                   access="hasAuthority('ROLE_ADMIN')" />
		...
	</sec:http>
	
	
첫 두 개의 <http> 태그는 security 속성의 값을 "none"으로 설정했다. 이 경우 pattern 속성으로 지정한 경로에 대해서 스프링 시큐리티의 필터 체인을 적용하지 않는다.
이렇게 되면 FilterSecurityInterceptor가 적용되지 않으므로 "/css/"로 시작하는 경로나 "/js/"로 시작하는 경로에 대해 보안 검사를 하지 않게 된다.

단, 보안 필터 체인을 적용하지 않는다는 것은 SecurityContextPersistenceFilter도 적용하지 않는다는 것을 뜻한다.
SecurityContextPersistenceFilter는 SecurityContext와 Authentication 객체를 사용할 수 있게 설정해주는 기능을 제공하기 때문에,
보안 필터 체인을 적용하지 않는 경로는 SecurityContextHolder로부터 SecurityContext를 구할 수 없게 된다.


	5.2 DB를 이용한 인증 처리
	
앞서 예제는 메모리에 사용자 정보를 설정해서 인증을 수행했는데, 실제로는 메모리가 아닌 외부 저장소에 있는 사용자 DB를 이용해서 인증을 처리할 것이다.
스프링 시큐리티가 기본으로 제공하는 기능을 사용하면 매우 간단한 설정으로 DB를 이용해서 사용자 인증 처리를 할 수 있다.

	(1) 사용자 및 권한 매핑 DB 테이블 생성
	
먼저 할 일은 사용자 정보와 매핑 정보를 담을 테이블을 생성하는 것이다. 사용할 테이블 생성 쿼리는 다음과 같다.
MySQL에 맞게 작성된 쿼리지만 쉽게 다른 DBMS에 맞는 쿼리로 변경할 수 있을 것이다.

	
	spring4-chap16-s1/src/mysql.ddl.sql		683쪽
	
	
생성할 테이블과 컬럼 이름을 변경하는 것이 가능하지만, 일단은 위에서 사용한 이름을 그대로 사용하자. 테이블/컬럼 이름을 변경하는 방법은 뒤에서 설명할 것이다.
이 두 테이블의 용도는 다음과 같다.


	테이블				설명					컬럼
	
	users			사용자 이름과 암호 정보		username : 사용자 이름(로그인 ID)
										password : 인증 암호
										enabled : 계정 사용 가능 여부
	
	authorities		사용자 - 권한 매핑 정보		username : 사용자 이름
										authority : 권한
										
										
	(2) 스프링 시큐리티 설정
	
앞서 생성한 사용자 테이블을 이용해서 인증을 수행하도록 설정하는 것은 매우 간단하다. 다음과 같이 <jdbc-user-service> 태그를 추가해주기만 하면 된다.


	spring4-chap16-s1/src/main/resources/spring-security-s1.xml		684쪽
	
	
<authentication-provider> 태그에 <jdbc-user-service> 자식 태그를 추가하면, DB를 이용해서 인증에 필요한 사용자 정보를 조회한다.
<jdbc-user-service> 태그의 data-source-ref 속성은 사용자 정보 DB에 연결할 때 사용할 DataSource를 지정한다.
더 할 것은 없다. 이걸로 설정이 끝났다.

스프링 시큐리티에서 사용할 DataSource는 다음의 스프링 설정 파일에 정의했다.


	spring4-chap16-s1/src/main/resources/spring-application.xml		685쪽
	
	
	(3) 데이터 준비 및 스프링 MVC 설정
	
인증 테스트를 위해 인증 과정에서 사용할 초기 데이터를 테이블에 넣어 보자.


	insert into ssuserdb.users values ('bkchoi', '1234', true);
	insert into ssuserdb.users values ('admin', '1234', true);
	
	insert into ssuserdb.authorities values ('admin', 'USER');
	insert into ssuserdb.authorities values ('admin', 'USER_MANAGER');
	insert into ssuserdb.authorities values ('bkchoi', 'USER');


이 쿼리는 각 사용자별로 다음과 같이 권한을  매핑해준다.
	
	- bkchoi : USER
	- admin : USER, USER_MANAGER
	
인증과 권한 검사가 잘 적용되는지 확인하기 위해 spring-security-s1.xml 파일에 다음과 같은 권한 설정을 추가했다. (라인 34~ 부분)


	<sec:http use-expressions="true">
		<sec:intercept-url pattern="/admin/usermanager/**"
			access="hasAuthority('USER_MANAGER')" />
		<sec:intercept-url pattern="/member/**" access="hasAuthority('USER')" />
		<sec:intercept-url pattern="/**" access="permitAll" />
		...
	</sec:http>
	
	
스프링 MVC는 다음과 같이 설정했다.


	spring4-chap16-s1/src/main/resources/spring-mvc-s1.xml		686쪽
	
	
스프링 MVC의 DispatcherServlet 및 스프링 시큐리티 적용을 위한 web.xml 설정은 다음과 같이 작성했다.
스프링 시큐리티 설정 파일(spring-security-s1.xml)과 DataSource 설정 파일(spring-application.xml)은 
루트 어플리케이션 컨텍스트 생성할 때 사용했고(라인 08-20), 스프링 MVC 설정(spring-mvc-s1.xml)만 DispatcherServlet 용으로 사용했다.
또한, 스프링 시큐리티의 보안 필터 체인을 사용하기 위해 DispatcherFilterProxy를 라인 41-50에 설정했다.


	spring4-chap16-s1/src/main/webapp/WEB-INF/web.xml		687쪽
	
	
	(4) 사용자 권한에 따라 다른 내용을 보여주는 JSP 코드 예제
	
로그인 전/후, 가진 권한에 따라 다른 화면을 보여주는 JSP 코드를 다음과 같이 작성했다.

	
	spring4-chap16-s1/src/main/webapp/WEB-INF/view/index.jsp		688쪽
	
	
위 코드는 /index 경로에 해당하는 뷰 코드다. 이 코드는 권한을 가진 경로 경우에만 해당 경로가 보이도록 했다.
아직 인증을 하지 않은 경우에는 라인 19-22처럼 '로그인'이나 '회원가입'을 위한 링크를 출력하고, 인증을 한 경우에는 라인 24-26처럼 '로그아웃' 링크를 출력하도록 했다.
회원가입 부분을 처리하는 코드는 뒤에서 만들어 볼 것이다.

/admin/usermanager/main이나 /member/main을 위한 JSP 뷰 코드는 단순한 코드로 작성했는데, 이를 위한 코드는 제공된 소스 코드를 참고하자.

이제 DB를 이용해서 인증을 처리할 준비가 끝났다. 실제로 테스트 해보자.

	(5) DB를 이용한 인증 처리 확인
	
최초로 http://localhost:8001/spring4-chap16-s1/index에 연결해보자.
'로그인' 링크와 '회원가입' 링크가 표시된 것을 알 수 있다.

로그인 링크를 누르면 스프링 시큐리티가 생성하는 로그인 폼이 출력되는데, 앞서 DB에 삽입한 사용자 이름과 암호를 이용해서 로그인 해보자.
그러면, 어떤 권한을 가진 계정을 사용했느냐에 따라 첫 화면에 보여지는 링크가 달라진다.

만약 DB에 존재하지 않는 계정을 사용한다거나 암호를 잘못 입력했다면, 로그인 실패 이유가 표시된 로그인 폼을 보게 될 것이다.


	5.3 DB를 이용한 인증 처리 구조
	
스프링 시큐리티에 맞게 사용자 테이블을 만들고 <jdbc-user-service> 태그를 사용하는 것만으로 DB를 이용해서 인증을 처리할 수 있는 것을 알았다.
설정은 간단하지만, 실제 이를 처리하기 위한 구조는 간단하지 만은 않다. DB로 인증을 처리하기 위해 사용되는 구성 요소는 다음과 같은 구조를 갖고 있다.


			<< interface >>
			AuthenticationProvider
			
				↑
	AbstractUserDetailsAuthenticationProvider
	
				↑
		DaoAuthenticationProvider	────────────────────>	<< interface >>
															UserDetailsService
		- userDetailsService : UserDetailsService
															+ loadUserByUsername(username: String) : UserDetails
															
															↑							↑
														<< interface >>				JdbcDaoImpl
														UserDetailsManager
														
																	↑					↑
																	JdbcUserDetailsManager
																	
																	
앞서 스프링 시큐리티의 구조에서 설명했던 것처럼 스프링의 AuthenticationManager 구현 클래스인 ProviderManager는
AuthenticationProvider에 인증 처리를 위임한다. <jdbc-user-service> 태그를 설정하면 AuthenticationProvider의 구현 클래스로 
DaoAuthenticationProvider를 사용한다. DaoAuthenticationProvider는 사용자 정보를 읽어올 때 UserDetailsService 타입의 객체를 사용한다.
DaoAuthenticationProvider의 authenticate() 메소드는 다음과 같은 과정을 거쳐 인증을 처리한다.

	- 1. UserDetailsService의 loadUsersByUsername() 메소드로 사용자 이름(아이디)에 해당하는 UserDetails 객체를 구한다.
		A. UserDetailsService는 사용자 이름에 해당하는 UserDetails 객체가 존재하지 않으면 UsernameNotFoundException을 발생시킨다.
	
	- 2. 입력한 암호가 UserDetails 객체의 getPassword()로 구한 암호와 일치하는지 비교한다.
		A. 두 암호가 일치하지 않으면 BadCredentialsException을 발생시킨다.
	
	- 3. 두 암호가 일치하면, UserDetails 객체로부터 Authentication 객체를 생성해서 리턴한다.
	
인증 처리 과정에서 알 수 있겠지만, 실제 DB에서 사용자 정보를 읽어오는 것은 UserDetailsService가 책임지며, <jdbc-user-service> 태그를 이용하면 DB에서 사용자 정보를 읽어오는
JdbcUserDetailsManager 클래스를 UserDetailsService의 구현체로 사용한다.


	<sec:authentication-manager alias="authenticationManager">
		<sec:authentication-provider>
			<!-- AuthenticationProvider로 DaoAuthenticationProvider 객체 사용 -->
			<!-- UserDetailsService로 JdbcUserDetailsManager 객체 사용 -->
			<sec:jdbc-user-service data-source-ref="dataSource" />
		</sec:authentication-provider>
	</sec:authentication-manager>
	
	
5.3 첫 그림을 보면 JdbcUserDetailsManager 클래스가 JdbcDaoImpl 클래스를 상속받는 것을 알 수 있다.
JdbcDaoImpl 클래스와 JdbcUserDetailsManager 클래스는 JdbcTemplate를 이용해서 DB 연동을 처리하기 때문에 DB 연결을 제공하는 DataSource를 필요로 한다.
<jdbc-user-service> 태그의 data-source-ref 속성에서 지정한 DataSoujrce가 바로 이 용도로 사용된다.

	(1) UserDetailsService와 UserDetails
	
o.s.s.core.userdetails.UserDetailsService 인터페이스는 다음과 같이 한 개의 메소드만 정의하고 있다.


	public interface UserDetailsService {
		UserDetails loadUserByUsername(String username)
			throws UsernameNotFoundException;
	}
	
	
loadUserByUsername() 메소드는 username에 해당하는 사용자가 존재하면, 해당 사용자의 정보를 담은 UserDetails 객체를 리턴한다.
UserDetails 인터페이스는 사용자 인증을 처리하는데 필요한 정보를 제공하기 위한 목적으로 사용되며, 다음과 같이 사용자의 이름, 암호, 사용 가능 여부 등을 제공하는 메소드를 정의하고 있다.


	package org.springframework.security.core.userdetails;
	
	import org.springframework.security.core.Authencication;
	import org.springframework.security.core.GrantedAuthority;
	
	import java.io.Serializable;
	import java.util.Collection;
	
	public interface UserDetails extends Serializable {
		Collection<? extends GrantedAuthority> getAuthorities();
		String getPassword();
		String getUsername();
		boolean isAccountNonExpired();
		boolean isAccountNonLocked();
		boolean isEnabled();
	}
	
	
<jdbc-user-service> 태그를 설정하면 사용되는 JdbcUserDetailsManager의 경우 사용자 이름, 암호, 사용 가능 여부(enabled), 권한 목록 정보만 제공할 수 있다.

	(2) 사용자 정보 조회를 위한 쿼리 변경
	
앞서 mysql.ddl.sql 에서 테이블을 생성할 때 사용한 SQL은 다음과 같았다.


	create table ssuserdb.users(
		username varchar(50) not null primary key,
		password varchar(100) not null,
		enabled boolean not null
	) engine=InnoDB character set = utf8;
	
	create table ssuserdb.authorities (
		username varchar(50) not null,
		authority varchar(50) not null
	) engine=InnoDB character set = utf8;
	
	
이 테이블로부터 사용자 정보를 읽어올 때 사용할 쿼리는 (JdbcUserDetailsManager의 부모 클래스인) JdbcDaoImpl 클래스에 정의되어 있다.
다음은 스프링 시큐리티의 소스 코드에서 JdbcDaoImpl 클래스의 일부를 발췌한 것인데, 이 코드를 보면 앞서 생성한 users 테이블과 authorities 테이블로부터 사용자 정보를 읽어오는 쿼리가
미리 정의된 것을 알 수 있다.


	public class JdbcDaoImpl extends JdbcDaoSupport implements UserDetailsServices {
	
		public static final String DEF_USERS_BY_USERNAME_QUERY = 
			"select username, password, enabled " +
			"from users " +
			"where username = ?";
		
		public static final String DEF_AUTHORITIES_BY_USERNAME_QUERY = 
			"select username.authority " +
			"from authorities " +
			"where username = ?";
			
			
테이블 명명 규칙 등의 이유로 실제 생성한 테이블과 컬럼 이름이 위 쿼리와 다를 수 있는데, 이런 경우에는 <jdbc-user-service> 태그가 제공하는 속성을 이용해서 쿼리를 변경할 수 있다.
쿼리를 변경할 때 사용되는 속성은 다음과 같다.


	 		속성							설명
			 
	 users-by-username-query			사용자 이름으로 UserDetails를 찾을 때 사용되는 쿼리를 입력한다. 쿼리는 다음 규칙을 따라야 한다.
	 										
	 										- select로 선택된 결과 중 세 개 컬럼이 차례대로 사용자 이름, 암호, 사용 가능 여부로 사용된다.
	 										- where 절에 1개의 인덱스 파라미터(물음표)를 포함해야 하며, 이 파라미터에 사용자 이름이 할당된다.
	 
	 authorities-by-username-query		사용자 이름을 권한 목록을 찾을 때 사용되는 쿼리를 입력한다. 쿼리는 다음 규칙을 따라야 한다.
	 
	 										- select로 선택된 결과 중 두 번째 컬럼이 권한 값으로 사용된다.
	 										- where 절에 1개의 인덱스 파라미터(물음표)를 포함해야 하며, 이 파라미터에 사용자 이름이 할당된다.
	 										
	 										
	(3) UserDetailsManager를 이용한 사용자 관리 : 사용자 추가
	
앞서 5.3 첫 그림에서 UserDetailsService 부분만 다시 보자.


		<< interface >>
		UserDetailsService
																←───┐
		+ loadUserByUsername(username: String) : UserDetails		│
																	│
			↑														│
		<< interface >>												JdbcDaoImpl
		UserDetailsManager
																	↑
		+ createUser(user: userDetails)								│
		+ updateUser(user: userDetails)								│
		+ deleteUser(username: String)								│
		+ changePassword(oldPassword: String, newPassword: String)	│
		+ userExists(username: String) : boolean					│
																	│
								↑									│
								JdbcUserDetailsManager	────────────┘
								
								
<jdbc-user-service> 태그를 사용하면 JdbcUserDetailsManager 클래스를 구현 클래스로 사용한다고 했는데, 이 JdbcUserDetailsManager 클래스는
UserDetailsManager 인터페이스를 상속받고 있다. UserDetailsManager 인터페이스는 위 그림에서 표시한 것처럼 createUser()를 포함해
사용자 정보를 변경할 수 있는 기능을 정의하고 있다. 스프링 시큐리티는 JdbcUserDetailsManager 객체를 빈으로 등록하기 때문에,
이 객체를 이용하면 JdbcUserDetailsManager 객체를 이용해서 사용자 테이블에 대한 CRUD 연동을 처리할 수 있게 된다.

<jdbc-user-service> 태그를 설정할 때 id 속성을 사용하면 JdbcUserDetailsManager 객체를 빈으로 등록할 때 사용한 식별값을 지정할 수 있다.


	<sec:authentication-manager alias="authenticationManager">
		<sec:authentication-provider>
			<sec:jdbc-user-service data-source-ref="dataSource" id="jdbcUserService" />
		</sec:authentication-provider>
	</sec:authentication-manager>
	
	
JdbcUserDetailsManager 객체를 사용하려면 생성자나 설정 메소드를 이용해서 또는 자동 주입을 이용해서 UserDetailsManager 객체나 JdbcUserDetailsManager 객체를 전달받으면 된다.
다음은 서비스 클래스에서 회원 가입을 처리하기 위해 UserDetailsManager를 사용하는 코드의 작성 예이다.


	spring4-chap16-s1/sec/main/java/net/madvirus/spring4/chap16/user/UserJoinService.java		695쪽
	
	
JdbcUserDetailsManager의 createUser() 메소드는 추가할 사용자를 UserDetails 타입으로 전달받는다.
스프링 시큐리티는 UserDetails 인터페이스를 구현한 User 클래스를 제공하고 있으며, User 클래스는 라인 25-26에서처럼 '이름, 암호, 권한 목록'을 생성자로 입력받는다.

JdbcUserDetailsManager의 createUser() 메소드는 다음의 쿼리를 이용해서 파라미터로 전달받은 UserDetails 객체의 데이터를 DB 테이블에 삽입한다.


	public static final String DEF_CREATE_USER_SQL = 
			"insert into users (username, password, enabled) values (?, ?, ?)";
	public static final String DEF_INSERT_AUTHORITY_SQL = 
			"insert into authorities (username, authority) values (?, ?)";
			
			
아쉽게도 <jdbc-user-service> 태그는 위 쿼리를 변경하기 위한 설정을 지원하지 않는다.
따라서, 테이블 이름이나 컬럼 이름 등을 변경하고 싶다면 커스텀 UserDetailsService를 등록하는 방법을 사용해야 한다.
이에 대해서는 이어지는 절에서 설명할 것이다.

제공하는 소스 코드를 보면 UserJoinService 클래스를 비롯해서 회원 가입 처리를 위한 JoinController 클래스 및 JSP 코드와 스프링 설정이 포함되어 있다.
따라서, 제공한 소스 코드를 이용해서 웹 어플리케이션을 실행한 뒤에 첫 화면의 '회원가입' 링크를 클릭하면 JdbcUserDetailsService를 이용한 사용자 생성 기능을 테스트 해 볼 수 있을 것이다.

JdbcUserDetailsManager는 create() 뿐만 아니라 update(), changePassword() 등의 기능을 제공하고 있는데,
각 메소드별로 사용하는 SQL 쿼리 및 동작방식은 다음과 같다.

	
	메소드						사용 쿼리							설명
	
	createUser(UserDetails)		insert into users
								(username, password, enabled)	사용자 정보를 DB에 삽입한다.
								values (?, ?, ?)
								
								insert into authorities
								(username, authority)
								values (?, ?)
	
	updataeUser(UserDetails)	update users
								Set password = ?, enabled = ?	사용자 정보를 수정한다. 권한 정보를 수정할 때에는 기존 권한 매핑을 모두 제거하고
								where username = ?				입력 받은 권한 정보를 삽입한다.
								
								delete from authorities
								where username = ?
								
								insert into authorities
								(username, authortiy)
								value(?, ?)
	
	deleteUser(String)			delete from authorities
								where username = ?				사용자의 권한 매핑 및 사용자 정보 자체를 삭제한다.
								
								delete from users
								where username = ?
								
	changePassword(				update users			
		String oldPassword,		set password = ?				현재 인증된 사용자의 비밀번호를 변경한다.
		String newPassword)		where username = ?				oldPassword가 현자 암호와 일치하지 않으면 익셉션을 발생한다.
		
		
[당연한 얘기지만, 사용자 정보를 생성하기 위해 곡 UserDetailsManager의 createUser() 메소드를 사용해야 하는 것은 아니다.
DB 데이터를 관리하는 코드는 직접 만들고, 인증 처리 부분만 스프링 시큐리티가 제공하는 기능을 사용해도 무방하다. 인증 처리만 JdbcUserDetailsManager를 사용할 경우
<jdbc-user-service> 태그가 제공하는 쿼리 설정 속성을 이용해서 쿼리만 알맞게 변경해주면 끝난다.]

	(4) 커스텀 UserDetailsService 구현 사용하기
	
스프링 시큐리티가 제공하는 JDBC 연동 인증 구현을 사용하면 매우 빠르게 DB를 이용한 인증 처리를 할 수 있지만, 지정한 형식의 스키마를 가진 테이블을 사용해야 한다는 한계가 있다.
또한, 스프링 시큐리티가 제공하는 기본 기능으로 처리할 수 없는 경우도 있다.

자신의 환경에 맞게 인증을 처리해야 한다면, 다음의 세 방법 중 하나를 이용해서 커스텀 인증 기능을 구현하고 스프링 시큐리티 프레임워크에 적용해야 한다.

	- AuthenticationManager 인터페이스를 직접 구현
	- AuthenticationProvider 인터페이스를 구현
	- UserDetailsService 인터페이스를 구현
	
세 방법 중에서 스프링 시큐리티가 제공하는 기능을 최대한 활용할 수 있는 것은 UserDetailsService 인터페이스를 구현하는 것이다.
앞서 5.3의 첫 그림에서 보여준 것처럼 DaoAuthenticationProvider의 authenticate() 메소드는 UserDetailsService로부터 사용자 정보(UserDetails)를 읽어와 인증을 수행하는데,
이 과정은 다음과 같다.

	- UserDetailsService가 UserNotFoundException을 발생하면, 그대로 재발생한다.
	- 사용자가 입력한 암호와 UserDetails의 암호가 일치하는지 여부를 검사한다. 일치하지 않으면 익셉션을 발생시킨다. (암호가 일치하는지 여부를 확인하기 위해 PasswordEncoder라는 것을 사용하는데,
		이에 대해서는 뒤에 살펴본다.)
	- 암호가 일치할 경우 UserDetails로부터 Authentication 객체를 생성해서 리턴한다.
	
위 과정을 모두 DaoAuthenticationProvider가 해주기 때문에, UserDetailsService 인터페이스를 상속받은 클래스는 loadUserByUsername() 메소드만 
올바르게 구현해주면 된다. 다음은 loadUserByUsername() 메소드를 구현할 때 지켜야할 규칙이다.

	- username에 해당하는 데이터가 존재하면 UserDetails 타입의 객체를 리턴한다.
	- username에 해당하는 데이터가 존재하지만, 해당 사용자가 어떤 권한(GrantedAuthority)도 갖고 있지 않을 경우 UserNotFoundException을 발생시킨다.
	- username에 해당하는 데이터가 존재하지 않으면, UserNotFoundException을 발생시킨다.
	
UserDetailsService 인터페이스의 구현 클래스는 다음과 같은 방식으로 구현한다.


	spring4-chap16-s1/src/main/java/net.madvirus.spring4.chap16/custom/CustomDetailsService.java	698쪽
	
	
이 코드에서 UserInfo 클래스와 UserPermission 클래스는 직접 구현한 클래스로 어플케이션에서 사용자와 권한 관리 기능을 구현할 때 사용하는 클래스라고 가정한다.
커스텀 UserDetailsService 클래스는 username에 해당하는 사용자가 있는지 검사하고(라인 20-22), 사용자가 존재하면 어플리케이션에서 사용하는 타입으로 권한 정보를 
읽어와(라인 24) 스프링 시큐리티가 권한을 표현하는데 사용하는 GrantedAuthority로 변환한다(라인 25-28).
그리고, 최종적으로 UserDetails 인터페이스의 구현체 중 하나인 User 객체를 생성해서 리턴한다.

o.s.s.core.userdetails.User 클래스는 다음의 생성자를 제공하므로, 이들 중 알맞은 생성자를 사용하면 된다.
첫 번째 생성자를 사용하면, enabled, accountNonExpired, credentialsNonExpired, accountNonLocked의 값으로 true를 사용한다.

	- User(String username, String password, Collection<? extends GrantedAuthority> authorities)
	- User(String username, String password, boolean enabled,
			boolean accountNonExpired, boolean credentialsNonExpired,
			boolean accountNonLocked, Collection<? extends GrantedAuthority> authorities)
			
	
커스텀 UserDetailsService를 구현했다면, <authentication-provider> 태그의 user-service-ref 속성 값으로 커스텀 UserDetailsService 빈 객체를 전달해서
스프링 시큐리티가 커스텀 구현을 사용하도록 설정해주면 된다. 예를 들어, 아래 코드처럼 설정하면 UserDetailsService로 CustomUserDetailsService 클래스를 사용한다.

	
	<bean id="customUserDetailsService"
		class="net.madvirus.spring4.chap16.custom.CustomUserDetailsService" />

	<sec:authentication-manager alias="authenticationManager">
		<sec:authentication-provider
			user-service-ref="customUserDetailsService" />
		</sec:authentication-provider>
	</sec:authentication-manager>
	
	
	(5) 커스텀 AuthenticationProvider 구현하기
	
사용자 정보 조회뿐만아니라 암호 비교까지 직접 구현해야 한다면, AuthenticationProvider 인터페이스를 상속받아 구현해주어야 한다.
예를 들어, 사용자 아이디/암호가 일치하는지 여부는 LDAP을 이용해서 처리하고 각 사용자가 가진 권한은 DB에서 읽어와야 한다면, UserDetailsService 만으로는 
인증 흐름을 제어할 수 없기 때문에, AuthenticationProvider를 직접 구현해야 한다.

o.s.s.authentication.AuthenticationProvider 인터페이스는 다음의 두 메소드를 정의하고 있다.


	public interface AuthenticationProvider {
		Authentication authentication(Authentication authentication)
			throws AuthenticationException;
		boolean supports(Class<?> authentication);
	}
	
	
supports() 메소드는 해당 타입의 Authentication 객체를 이용해서 인증 처리를 할 수 있는지 여부를 리턴한다.

authenticate() 메소드를 구현하는 규칙은 다음과 같다.

	- 파라미터로 전달받은 authentication 객체에 대한 인증 처리를 지원하지 않는다면 null을 리턴한다.
	- authentication 객체를 이용한 인증에 실패했다면 AuthenticationException을 발생시킨다.
	- 인증에 성공하면, 인증 정보를 담은 Authentication 객체를 리턴한다.
	
다음은 AuthenticationProvider의 구현 방식을 보여주고 있다.


	spring4-chap16-s1/src/main/java/net.madvirus.spring4.chap16/custom2/CustomAuthenticationProvider.java		700쪽
	
	
위의 authenticate() 메소드는 인증에 성공할 경우 UsernamePasswordAuthenticationToken 객체를 생성해서 리턴했다.
Authentication 인터페이스를 구현한 클래스를 직접 만들어도 되지만, 이 코드처럼 스프링 시큐리티가 제공하고 있는 구현 클래스를 사용해도 무방하다.

라인 38에서 사용한 UsernamePasswordAuthenticationToken 클래스 생성자는 다음과 같다.
이 생성자를 사용하면 isAuthenticated() 메소드가 true를 리턴한다. 즉, 인증된 상태의 Authentication 객체가 된다.

	- UsernamePasswordAuthenticationToken(Object principal,
			Object credentials, Collection<? extends GrantedAuthority> authorities)
			
첫 번째 파라미터는 인증 대상 주체를 표현하는 객체를 사용한다. 이 인증 대상 객체로 UserDetails 타입이나 Principal 타입을 보통 전달하는데,
앞서 코드에서 UserInfo 객체를 그대로 전달했다. 첫 번째 파라미터로 전달한 객체가 getPrincipal() 메소드의 리턴 값으로 사용된다.

두 번째 파라미터는 인증 증명에 사용되는 크리덴셜(credential)인데, 보통 이 값은 메모리에 남지 않도록 null을 준다.
(또는 객체 생성 후 eraseCredentials() 메소드를 호출해서 제거한다.)

세 번째 파라미터는 인증된 사용자가 갖는 권한 목록이다. getAuthorities()의 리턴 값으로 사용된다.

커스텀 AuthenticationProvider 클래스를 만들었다면, <authentication-provider> 태그의 ref 속성 값에 커스텀 AuthenticationProvider 빈 객체를 전달해서
스프링 시큐리티가 커스텀 구현을 사용하도록 설정해주면 된다. 예를 들어, 아래 코드처럼 설정하면, AuthenticationProvider로 CustomAuthenticationProvider 클래스를 사용한다.


	<bean id="customAuthenticationProvider"
		class="net.madvirus.spring4.chap16.custom2.CustomAuthenticationProvider" />
		
	<sec:authentication-manager alias="authenticationManager">
		<sec:authentication-provider ref="customAuthenticationProvider" />
	</sec:authentication-manager>
	
	
	5.4 비밀번호 암호화 처리
	
지금까지 살펴본 예제의 문제점은 비밀번호가 평문이라는 점이다. DB 테이블에 비밀번호 값이 "abcd"로 들어가 있으면, 보안 사고가 발생했을 때 사용자의 비밀번호가 바로 노출된다.
사고 발생 시 문제를 최소화하려면 비밀번호를 암호화해서 쉽게 유추할 수 없게 만들어야 한다.

앞서 DaoAuthenticationProvider는 UserDetailsService로부터 사용자 정보를 읽어와 인증을 처리한다고 했는데,
DaoAuthenticationProvider 클래스는 암호화 처리 기능을 지원하고 있다. DoaAuthenticationProvider 클래스는 사용자가 입력한 암호화
UserDetailsService에서 구한 UserDetails의 암호가 일치하는 여부를 판단하기 위해 PasswordEncoder를 사용한다. 이 처리 과정은 다음과 같다.


								1: loadUserByUsername()
										→
	: DaoAuthenticationProvider	───────────────────>	: UserDetailsService
		│								←
		│						2: return UserDetails 객체
		│
		│	↓ 3: isPasswordVaild(userDetails.getPassword(), presentedPassword, salt)
		↓
	: PasswordEncoder
	
	
별도 설정을 하지 않을 경우 DaoAuthenticationProvider는 PasswordEncoder의 구현 클래스로 PlaintextPasswordEncoder를 사용하는데,
이 클래스는 암호화를 하지 않고 단순 문자열 비교를 통해 비밀번호 일치 여부를 비교한다.

만약 비밀번호를 암호화하고 이를 기준으로 암호를 비교하고 싶다면, 암호화 기능을 제공하는 PasswordEncoder를 스프링 빈으로  하고, 이를 사용하도록 설정하면 된다.
다음은 설정 예를 보여주고 있다.


	<!-- 스프링 시큐리티가 제공하는 PasswordEncoder 구현 -->
	<bean id="passwordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
		
	<sec:authentication-manager alias="authenticationManager">
		<sec:authentication-provider>
			<sec:jdbc-user-service data-source-ref="dataSource" />
			<!-- 암호를 비교할 때 사용할 PasswordEncoder 지정 -->
			<sec:password-encoder ref="passwordEncoder" />
		</sec:authentication-provider>
	</sec:authentication-manager>
	
	<bean id="userJoinService" class="net.madvirus.spring4.chap16.user.UserJoinService">
		<property name="userDetailsManager" ref="jdbcUserService" />
		<!-- DB에 데이터를 넣을 때 같은 PasswordEncoder로 암호화해서 넣어야 함 -->
		<property name="passwordEncoder" ref="passwordEncoder" />
	</bean>
	
	
DaoAuthenticationProvider는 <password-encoder> 태그로 지정한 PasswordEncoder를 이용해서 사용자가 입력한 비밀번호와 DB에 보관된 암호화된 비밀번호가 일치하는지 여부를 판단한다.

여기서 유의할 점은 DB에 넣을 비밀번호를 암호화 할때에도 같은 PasswordEncoder를 사용해야 한다는 점이다.
위 설정에서 UserJoinService 클래스는 UserDetailsManager를 이용해서 사용자 정보를 DB에 생성하는 기능을 구현한 코드인데,
이 코드는 다음과 같이 PasswordEncoder를 이용해서 사용자가 입력한 비밀번호를 암호화하도록 구현했다.


	public class UserJoinService {
		private UserDetailsManager userDetailsManager;
		private PasswordEncoder passwordEncoder;
	
		public UserJoinService() {
			passwordEncoder = NoOpPasswordEncoder.getInstance();
		}
	
		@Transactional
		public void join(NewUser newUser) {
			String password = passwordEncoder.encode(newUser.getPassword());
			UserDetails user = new User(newUser.getName(), password,
					Arrays.asList(new SimpleGrantedAuthority("USER")));
			try {
				userDetailsManager.createUser(user);
			} catch (DuplicateKeyException ex) {
				throw new DuplicateUsernameException(
						String.format("Username [%s] is aleady exists", newUser.getName()), ex);
			}
		}
	
		public void setUserDetailsManager(UserDetailsManager userDetailsManager) {
			this.userDetailsManager = userDetailsManager;
		}
	
		public void setPasswordEncoder(PasswordEncoder passwordEncoder) {
			this.passwordEncoder = passwordEncoder;
		}
	}
	
	
DB에 데이터를 넣을 때 사용하는 PasswordEncoder와 인증 과정에서 비밀번호를 비교할 때 사용하는 PasswordEncoder과 다르면, 
정상적인 비교가 되지 않으므로 같은 PasswordEncoder를 사용해야 한다.

	(1) PasswordEncoder 인터페이스와 구현 클래스
	
o.s.s.crypto.password.PasswordEncoder 인터페이스는 다음의 두 메소드를 정의하고 있다.


	public interface PasswordEncoder {
		String encode(CharSequence rawPassword);
		boolean matches(CharSequence rawPassword, String encodedPassword);
	}
	
	
encode() 메소드는 rawPassword를 암호화한 결과를 리턴한다. 평문을 암호화해서 DB에 넣어야 할 때 encode() 메소드를 사용하면 된다.

matches() 메소드는 rawPassword와 암호화된 문자열인 encodedPassword와 일치하는지 여부를 검사한다. 일치하면 true를 리턴하고, 일치하지 않으면 false를 리턴한다.

스프링 시큐리티가 제공하는 PasswordEncoder 구현 클래스는 다음의 두 가지가 있다.

	- o.s.s.crypt.BCryptPasswordEncoder : BCrypt를 이용해서 암호화한다.
	- o.s.s.crypt.password.StandardPasswordEncoder : SHA-256을 이용해서 암호화한다.
	
진행중인 프로젝트에서 사용중인 암호화 알고리즘이 없다면, 두 PasswordEncoder 중 하나를 사용하면 된다.

["안전한 패스워드 저장(http://helloworld.naver.com/helloworld/318732) 글을 읽어보면 비밀번호 저장에 대한 전반적인 내용을 이해하는 데 도움이 된다.


	5.5 로그인/로그아웃 UI/에러 응답 설정 변경
	
	(1) 로그인 폼과 인증 요청 경로 변경
	
스프링 시큐리티가 제공하는 로그인 폼이 있지만, 이 폼을 그대로 사용하고 싶지는 않을 것이다.
게다가 이 폼을 보여주는 경로는 "/spring_security_login"이다. 로그인 폼과 로그인을 처리하는 URL도 바꾸고 싶을 것이다.
이를 위한 설정은 매우 간단하다. 다음에 설명한 <form-login> 설정 태그의 속성을 변경하고 로그인 폼 화면을 만들어주면 된다.
참고로, 이 속성들에 지정한 경로 값은 웹 어플리케이션의 컨텍스트 경로를 기준으로 한다.


	속성							설명									기본값
	
	login-page					인증 전에 접근한 경로에 접근 권한이 없을 경우,		/spring_security_login
								인증 처리를 위해 이동할 로그인 폼 경로를 지정한다.
	
	login-prcessing-url			로그인 요청을 위한 경로를 지정한다. 이 경로로		/j_spring_security_check
								POST 요청이 들어오면 인증을 처리한다.
					
	username-parameter			로그인 요청에서 사용자 이름(로그인 ID)에			j_username
								해당하는 요청 파라미터의 이름을 지정한다.
	
	password-parameter			로그인 요청에서 사용자 비밀번호에 해당하는			j_password
								요청 파라미터의 이름을 지정한다.
	
	default-target-url			로그인 성공시 이동할 기본 경로를 지정한다.			/
								만약 인증 전에 접근한 경로에 권한이 없어서
								로그인 화면으로 이동했다면 로그인 성공 후
								원래 요청한 경로로 이동한다.
	
	authentication-failure-url	인증 실패 시 이동할 경로를 지정한다.				/spring_security_login?loin_error
	
	
다음은 <form-login> 태그의 속성을 이용해서 로그인 폼 경로를 비롯한 관련 속성을 설정한 예제 코드이다.


	<sec:http use-expressions="true">
		<sec:intercept-url pattern="/user/loginform" access="permitAll" />
		<sec:intercept-url pattern="/member/**" access="isAuthenticated()" />
		...
		<sec:form-login 
			login-page="/user/loginform"
			login-processing-url="/user/login"
			username-parameter="userid"
			password-parameter="password"
			default-target-url="/index"
			authentication-failure-url="/user/loginform?error=true"
		/>
		<sec:logout />
	</sec:http>
	
	
위 설정을 사용하면 아직 인증을 하지 않은 상태에서 인증을 필요로 하는 경로인 /member/main에 접근하면 로그인 폼을 보여주기 위해 /user/loginform 경로로 리다이렉트 한다.
따라서, /user/loginform 경로로 접근 시 로그인 폼을 보여줘야 한다. 로그인 폼을 보여주는 경로는 누구나 접근할 수 있어야 하므로 <intercept-url> 태그를 이용해서
/user/loginform 경로의 권한을 permitAll로 설정한다.

스프링 MVC는 login-page 속성에 지정한 경로로 요청이 들어오면 로그인 폼을 보여주는 뷰를 사용하도록 설정한다. 별도 컨트롤러를 구현할 필요가 없다면 다음과 같이
뷰 컨트롤러를 설정해주면 될 것이다.

	
	<!-- 로그인 폼을 보여주기 위한 스프링 MVC 구현 -->
	<mvc:view-controller path="/user/loginform" view-name="user/loginForm" />
	
	
로그인 폼을 보여주는 뷰 코드는 login-processing-url 속성에 지정한 경로를 <form> 태그의 action 경로로 사용하고, username-parameter 속성과
password-parameter 속성에서 지정한 이름을 각각 아이디와 비밀번호를 위한 파라미터 이름으로 사용한다.
다음은 로그인 폼을 보며주는 JSP 코드의 구현 예이다.


	spring4-chap16-s1/src/main/webapp/WEB-INF/view/user/loginForm.jsp		707쪽
	
	
앞서 <form-login> 태그의 authentication-failure-url 속성의 값으로 "/user/loinform?error=true"를 사용했는데,
라인 10-12에서는 이 속성에서 지정한 값을 이용해서 인증 실패 여부에 따라 메시지를 출력하도록 했다.

인증을 하지 않은 상태에서 인증이 필요한 페이지인 http://localhost:8001/spring4-chap16-s1/member/main 에 연결하거나 직접
http://localhost:8001/spring4-chap16-s1/user/loginform 에 연결하면 커스텀 로그인 폼이 출력되는 것을 확인할 수 있다.

	(2) 로그인 처리 관련 필터의 동작 방식
	
아직 인증을 거치지 않은 사용자가 특정 권한을 필요로 하는 경로에 접근하면, 로그인 폼을 보여주는 경로로 이동하는데, 이 과정은 어떻게 처리되는 것일까
이 과정에는 네 개의 구성 요소가 관여하며, 이들은 다음과 같이 동작한다.


									4: 요청 정보 저장
				체인의 이전 필터				→
					│ 1: 실행 요청 전달	┌─────────>	: RequestCache
					│				│
			: ExceptionTranslationFilter──────>	: LoginUrlAuthenticationEntryPoint
	2: 실행 요청 전달	 ↓	│						→
					│	↑ 3: 익셉션 발생	5: 인증 처리 시작 요청
			: FilterSecurityInterceptor
			
			
인증되지 않은 사용자가 특정 권한이 필요한 경로에 접근하면 FilterSecurityInterceptor는 AuthenticationException을 발생시킨다.
이 익셉션이 발생하면 보안 필터 체인에서 FilterSecurityInterceptor 이전에 위치한 ExceptionTranslationFilter가 해당 익셉션을 받는다.

ExceptionTranslationFilter는 아직 사용자가 인증 전이면 4번 과정처럼 요청 정보를 RequestCache에 보관하고, 5번 과정처럼 등록된
AuthenticationEntryPoint의 commence() 메소드를 호출해서 인증 처리 시작을 요청한다. 기본 사용되는 AuthenticationEntryPoint 클래스는
LoginUrlAuthenticationEntryPoint인데, 이 클래스는 로그인 폼으로 지정한 경로로 리다이렉트 함으로써 사용자가 인증을 할 수 있도록한다.
이때 이 로그인 폼으로 사용할 경로가 <form-login> 태그의 login-page 속성으로 지정한 값이다.

로그인 폼에서 <form-login> 태그의 login-processing-url 속성에 지정한 경로로 로그인 요청을 전송하면 다음과 같은 과정을 거쳐 인증을 처리한다.


						: AuthenticationManager						인증 실패시 처리 과정	────────────────────────────┐
					2: 인증 요청		│	3: 결과 리턴					│											│
			(authenticate 메소드)	↑	│ ↓	(또는 익셉션)					│		: DefaultRedirectStrategy			│
									│								│				│							│
			1: 요청 전달				│					9: 인증 실패 처리	 →				│	↑ 10: 실패 경로 리다이렉트		│
				→					│				(onAuthenticationFailure 메소드)	│							│
	체인의 이전 필터──────: UsernamePasswordAuthenticationFilter───────────────────	: SimpleUrl						│
							│				│						│			AuthenticationFailureHandler	│
							│				│						└───────────────────────────────────────────┘
	인증 성공시 처리 과정	────────────────────────────────────────────────────────────────┐
	│						│				│ ↓										│
	│		4: 인증 정보 저장	 ↓	│				│ 5: 인증 성공 처리							│
	│	setAuthentication()	│				│(onAuthenticationSuccessHandler)		│
	│				: SecurityContext	:SavedRequestAware							│
	│									AuthenticationSuccessHandler				│
	│									│ ↓ 7: 정보 리턴		│ ↓ 8: 성공 후				│
	│				6: 보관된 요청 정보 구함 ↓	│	(또는 null)		│ 	리다이렉트				│
	│								: RequestCache		:DefaultRedirectStrategy	│
	└───────────────────────────────────────────────────────────────────────────────┘
	
	
UsernamePasswordAuthenticationFilter는 <form-login> 태그의 login-processing-url 속성에 지정한 경로로 요청이 들어오면 인증 처리를 시작한다.
UsernamePasswordAuthenticationFilter는 <form-login> 태그의 username-parameter 속성과 password-parameter 속성으로 지정한 파라미터로부터
인증에 사용할 사용자 이름과 비밀번호 값을 가져온다.

2번 과정에서 인증 요청을 수행하고, 3번 과정에서 AuthenticationManager는 인증에 성공하면 Authentication 객체를 리턴하고 실패하면 익셉션을 발생한다.
인증에 성공하면 4번~8번 과정을 실행하고, 인증에 실패하면 9-10번 과정을 실행한다. 인증 성공 과정을 차례대로 살펴보자.

	- 4번 : 3번 과정에서 리턴받은 Authentication 객체를 SecurityContext에 설정한다.
	- 5번 : AuthenticationSuccessHandler 객체에 인증 성공 후처리를 요청한다. SavedRequestAwareAuthenticationSuccessHandler를 기본 구현으로 사용한다.
	- 6번 : RequestCache 객체에서 요청 정보를 구한다. 이 ReuqestCache 객체는 5.4와 5.5.2의 첫 그림의 RequestCache 객체와 동일 객체이다.
	- 7번 : ReqeustCache 객체는 보관된 요청 정보가 있으면 리턴하고, 없으면 null을 리턴한다. 인증되지 않은 사용자가 인증이 필요한 자원에 접근하면,
			5.5.2의 첫 그림처럼 로그인 후 돌아갈 페이지 정보가 RequestCache에 보관된다.
	- 8번 : RequestCache 객체가 요청 정보를 리턴하면, 해당 요청 정보의 경로로 리다이렉트한다. 이 정보가 null이면, 
			<form-login> 태그의 default-target-url 속성에 지정한 경로로 리다이렉트 처리를 요청한다.
			
인증에 실패할 경우 처리 과정은 다음과 같다.
		
	- 9번 : AuthenticationFailureHandler에 인증 실패 후처리(onAuthenticationFailure 메소드)를 요청한다. 
			기본 구현체로는 SimpleUrlAuthenticationFailureHandler 클래스를 사용한다.
	- 10번 : <form-login> 태그의 authentication-failure-url 속성에 지정한 경로로 리다이렉트 처리를 요청한다.
	
인증에 성공하거나 실패했을 때 기본 사용되는 AuthenticationSuccessHandler 객체나 AuthenticationFailureHandler 객체 대신 다른 구현을 사용하고 싶다면,
<form-login> 태그의 authentication-success-handler-ref 속성과 authentication-failure-handler-ref 속성을 사용해서 사용할 빈 객체를 지정한다.
이 두 속성을 사용하면 기본 구현을 사용하지 않기 때문에 default-target-url 속성이나 authentication-failure-url이 적용되지 않는다.


	<sec:http use-expressions="true" entry-point-ref="customEntryPoint">
		...
		<sec:form-login 
			login-processing-url="/user/login"
			username-parameter="userid"
			password-parameter="password"
			authentication-success-handler-ref="customSuccessHandler"
			authentication-failure-handler-ref="customFailureHandler" />
		<sec:logout />
	</sec:http>
	
	<bean id="customEntryPoint" class="... .CustomEntryPoint" />
	<bean id="customSuccessHandler" class="... .CustomSuccessHandler" />
	<bean id="customFailureHandler" class="... .CustomFailureHandler" />
	
	
또한, <http> 태그의 entry-point-ref 속성을 사용하면 AuthenticationEntryPoint로 사용할 빈 객체를 직접 지정하기 때문에
<form-login> 태그의 login-page 속성이 적용되지 않는다.

	(3) 로그아웃 URL 및 로그아웃 후 이동 경로
	
스프링 시큐리티 설정에서 <logout> 태그를 사용하면, /j_spring_security_logout 경로 요청에 대해 로그아웃 처리를 한다. 로그아웃 처리는 LogoutFailure를 통해서 이루어지는데,
로그아웃 경로를 변경하고 싶다면 다음과 같이 <logout> 태그의 logout-url 속성을 사용하면 된다.


	<sec:logout logout-url="/user/logout" />
	
	
LogoutFilter는 logout-url 속성에 지정한 경로로 요청이 들어오면 로그아웃 처리를 수행하고, logout-success-url 속성에 지정한 경로로 리다이렉트한다. 이 속성을 지정하지 않으면
기본 값은 "/"로 컨텍스트 경로 내에서 루트로 리다이렉트한다.

<logout> 태그의 주요 속성은 다음과 같다.

	
	속성					설명								기본값
	
	logout-url			로그아웃 요청 경로를 지정한다.				/j_spring_security_logout
	
	invalidate-session	기존 세션을 제거할지 여부를 지정한다.		true
	
	delete-cookies		로그아웃 시, 삭제할 쿠키 목록을 지정한다.		
						각 쿠키 이름을 콤마로 구분한다.
			
	logout-success-url	로그아웃 이후, 리다이렉트할 경로를 지정한다.	/
	
	success-handler-ref	로그아웃 성공 후, 이동 처리를 하는 			
						LogoutSuccessHandler 빈을
						직접 지정한다.
						
						
	(4) 권한 없음 응답 화면 설정
	
인증된 사용자가 권한이 없는 경로에 접근할 경우, 스프링 시큐리티는 403 상태 코드를 웹 브라우저에 응답한다. 만약 403 응답 코드가 아니라 별도의 안내 페이지를 작성하고 싶다면,
다음과 같이 <access-denied-handler> 태그의 error-page 속성을 사용해서 에러 페이지 경로를 지정해주면 된다.


	<sec:http use-expressions="true">
		<sec:access-denied-handler error-page="/security/accessDenied" />
	</sec:http>
	
	
AccessDeniedHandler의 기본 구현체인 AccessDeniedHandlerImpl 클래스는 error-page를 지정한 경우 해당 경로로 포워드 한다.
리다이렉트가 아니라 포워드이므로 웹 브라우저의 주소는 그대로 유지된다.

AccessDeniedHandler로 사용할 빈을 직접 지정하고 싶다면 ref 속성을 사용해서 지정하면 된다.


	5.6 HTTPS 및 포트 매핑 설정하기
	
로그인 폼의 데이터를 전송할 때에는 데이터의 안전한 전송을 위해 HTTPS 프로토콜을 사용하게 되는데, 스프링 시큐리티는 경로별로 HTTPS 프로토콜을 사용하도록 강제할 수 있다.
<intercept-url> 태그의 requires-channel 속성을 사용하면 해당 경로에 접근할 때 어떤 프로토콜로 접근 가능한지를 제한할 수 있다.
예를 들어, 아래 코드는 /user/loginform 경로나 /user/login 경로는 HTTPS 프로토콜로만 접근할 수 있도록 제한하고 있다.

	
	<sec:http use-expressions="true">
		<sec:intercept-url pattern="/user/loginform" access="permitAll" 
			requires-channel="https" />
		<sec:intercept-url pattern="/user/login" access="permitAll"
			requires-channel="https" />
		...
	</sec:http>
	
	
HTTPS로 제한한 경로에 HTTP로 연결하면, 프로토콜만 HTTPS로 바꿔 같은 경로로 리다이렉트시킨다.

requires-channel 속성이 가질 수 있는 값은 "http", "https", "any" 이다.

리다이렉트 할 때 사용할 HTTP와 HTTPS의 포트가 다를 경우 <port-mapping> 태그를 이용해서 포트 번호를 지정할 수 있다.
다음 설정의 경우 HTTPS로 리다이렉트할 때 8443 포트를 사용해서 리다이렉트 경로를 생성한다. HTTP 포트를 지정하고 싶으면 http 속성을 사용하면 된다.


	<sec:http use-expressions="true">
		<sec:port-mappings>
			<sec:port-mapping https="8443" />
		</sec:port-mappings>
		<sec:intercept-url pattern="/user/loginform" access="permitAll" 
			requires-channel="https" />
		<sec:intercept-url pattern="/user/login" access="permitAll"
			requires-channel="https" />
		...
	</sec:http>
	
	
	5.7 세션 대신 쿠키 사용하기
	
대규모 트래픽이 발생하는 서비스는 HttpSession 대신 쿠키를 이용해서 인증 상태를 유지하거나 별도 외부 서버에 세션 정보를 보관하기도 한다.
이런 서비스는 수십에서 수백에 이르는 웹 서버를 사용하고 사용자가 어떤 서버에서 접속할지 알 수 없기 때문에 로그인 성공 후 이동할 경로를 HttpSession에 보관하는 방법을 사용할 수 없다.
대신, 요청 파라미터에 이동할 경로 정보를 담는 방법을 주로 사용한다.

스프링 시큐리티는 기본적으로 사용자 인증 정보를 HttpSession에 보관하고 로그인 성공시 이동할 경로를 보관하기 위해서도 HttpSession을 사용한다.
따라서, 인증 정보를 쿠키나 외부 저장소에 보관한다거나 로그인 성공 후 이동 경로를 파라미터로 전달하고 싶다면 스프링 시큐리티의 기본 기능 대신 커스텀 구현을 일부 사용해야 한다.
이 절에서는 이 방법에 대해 살펴보도록 하겠다.

[참고로 세션 대신 쿠키를 사용하는 예제 프로젝트는 /mvnprj/spring4-chap16-s2에 위치한다.]

	(1) 로그인 성공 후 이동 경로를 파라미터로 지정하기
	
앞서 '로그인 처리 관련 필터의 동작 방식' 절에서 다음의 두 내용을 살펴봤었다.

	- 아직 인증 전인 사용자가 인증이 필요한 경로에 접근할 경우 (5.5.2 첫 그림 참고)
		~ ExceptionTranslationFilter는 HttpSessionRequestCache에 로그인 성공 시 이동할 경로를 저장하고,
		  AuthenticationEntryPoint를 이용해서 로그인 폼으로 리다이렉트 처리
	- 로그인 폼에서 로그인을 시도할 경우, (5.5.2 둘째 그림 참고)
		~ 인증에 성공하면, SavedRequestAwareAuthenitcationSuccessHandler가 HttpSessionRequestCache에서 이동할 경로를 구해서 리다이렉트 처리
		~ 인증에 실패하면, SimpleUrlAuthencticationFailureHandler가 실패시 경로로 리다이렉트 처리
		
로그인 성공할 때 이동할 경로를 HttpSession이 아닌 요청 파라미터로 전달하고 싶다면 위 부분을 알맞게 커스터마이딩하면 된다.
커스텀 구현을 만드는 다양한 방법이 존재할 수 있는데, 이 절에서는 다음과 같이 구현할 것이다.

	- 커스텀 AuthenticationEntryPoint 구현 : 로그인 폼 경로로 리다이렉트할 때, 현재 요청 경로를 returl 파라미터로 붙여서 보내는 커스텀 구현
	- 커스텀 AuthenticationSuccessHandler 구현 : 로그인 성공 시, returl 파라미터의 값이 존재하면 해당 경로로 리다이렉트하는 커스텀 구현
	- 커스텀 AuthenticationFailureHandler 구현 : 로그인 실패 시, 로그인 경로로 다시 포워딩한다.
	- 로그인 폼에서 returl 파라미터를 전송하도록 폼 구성
	- NullRequestCache 사용 : 아무 기능도 하지 않는 RequestCache 사용
	
먼저, 로그인 폼으로 리다이렉트 할 때, 현재 경로를 returl 파라미터로 붙여서 보내주는 커스텀 AuthenticationEntryPoint 클래스는 다음과 같이 구현할 수 있다.


	spring4-chap16-s2/src/main/java/net/madvirus/spring4/chap16/CustomAuthenticationEntryPoint.java		714쪽
	
	
라인 21의 UrlUtils 클래스는 스프링 시큐리티가 제공하는 클래스로, 이 클래스를 이용해서 현재 경로의 URL을 구성했다.
현재 요청 경로의 URL을 구한 뒤에는 로그인 폼 경로로 리다이렉트하는데, 이때 라인 24처럼 리다이렉트할 경로를 returl 파라미터 값으로 지정했다.
인증 성공 후처리를 할 커스텀 AuthenticationSuccessHandler는 returl 파라미터로 전달받은 경로로 이동하도록 다음과 같이 구현한다.


	spring4-chap16-s2/src/main/java/net/madvirus/spring4/chap16/CustomAuthenticationSuccessHandler.java		715쪽
	
	
returl 값이 없는 경우에는 라인 21-24과 같이 컨텍스트 루트로 이동하도록 구현했다.

인증 실패 후처리를 하는 커스텀 CustomAuthenticationFailureHandler는 원래 로그인 폼으로 다시 돌아가면 된다.
이때 리다이렉트 대신 포워드를 사용하면 reurl 파라미터 값을 주소 뒤에 붙여주지 않아도 전달받은 returl 파라미터의 값을 사용할 수 있다.
커스텀 구현은 다음과 같다.


	spring4-chap16-s2/src/main/java/net/madvirus/spring4/chap16/CustomAuthenticationFailureHandler.java		716쪽
	
	
로그인 폼을 보여줄 JSP 코드는 다음과 같이 returl 파라미터로 전달받은 값을 폼의 히든 값으로 추가해주면 된다.


	spring4-chap16-s2/src/main/webapp/WEB-INF/view/loginForm.jsp		717쪽
	
	
이제 스프링 시큐리티가 커스텀 구현을 사용하도록 설정해주면 된다. 다음은 설정 예를 보여주고 있다.


	spring4-chap16-s2/src/main/resources/spring-security-s2.xml			717쪽
	
	
라인 35인에서 <request-cache>의 ref 속성으로 NullRequestCache 빈 객체를 설정했는데, 이렇게 함으로써 인증이 필요해서
로그인 폼으로 이동할 때 세션에 현재 요청 경로 정보를 보관하지 않는다.

라인 33, 39, 40 은 앞서 구현한 커스텀 구현을 사용하도록 설정하고 있다. 실제 로그인이 필요한 경로에 접근하면 reurl 파라미터를 이용해서 이동할 경로를 전달하고,
로그인 성공시에는 returl 파라미터에 지정한 경로로 리다이렉트하는 것을 확인할 수 있다.

	(2) 인증 상태를 쿠키에 보관하기 

대형 포털은 서비스별로 작게는 수십에서 많게는 수백 대에 이르는 웹 서버를 사용하는데, 이 경우 인증 상태를 보관하기 위해 HttpSession을 사용하긴 힘들기 때문에,
대신 쿠키를 이용해서 인증 상태를 공유하는 방법을 주로 사용한다.

쿠키를 이용해서 인증 상태를 유지하려면 다음의 작업을 처리해야 한다.

	- 로그인 성공 시점
		~ AuthenticationSuccessHandler에서 인증 상태 유지를 위한 쿠키를 생성
		
	- SecurityContextPersistenceFilter가 사용하는 SecurityContextRepository 커스텀 구현
		~ loadContext() 메소드가 인증 쿠키로부터 Authentication 객체 생성
		~ saveContext() 메소드는 아무 동작도 하지 않음
		
	- 로그아웃 성공 시 쿠키 삭제
	
보안 필터 체인의 앞쪽에 위치한 SecurityContextPersistenceFilter는 SecurityContextRepository를 이용해서 SecurityContext를 가져오거나 저장한다.
기본 구현 클래스로 사용되는 HttpSessionSecurityContextRepository는 HttpSession을 이용해서 SecurityContext를 보관하기 때문에,
SecurityContextRepository의 커스텀 구현을 이용해서 HttpSession 대신 쿠키에서 인증 정보를 읽어오도록 하면 된다.

먼저 로그인 성공시 쿠키를 생성하도록 AuthenticationSuccessHandler를 구현한다. 앞서 만들었던 CustomAuthenticationSuccessHandler.java 코드에
쿠키를 생성하는 기능만 추가하면 된다. 구현 코드는 다음과 같다. 구현 코드는 다음과 같다.


	spring4-chap16-s2/src/main/java/net/madvirus/spring4/chap16/CustomAuthenticationSuccessHandler2.java		720쪽
	
	
라인 37-41에서 쿠키 값은 "사용자이름, 역할1, 역할2, ..." 의 형식으로 구성했다. 라인 44-45에서 쿠키값을 암호화하지 않았는데,
실제 운영 환경에서는 암호화해서 쿠키 위변조가 발생하지 않도록 해야 할 것이다.

다음으로 구현할 코드는 쿠키에서 Authentication 정보를 읽어오는 SecurityContextRepository를 구현하는 것이다.
이 코드는 인증 성공 시점에 생성한 쿠키 값을 이용해서 Authentication 객체를 생성하면 된다. 구현 코드는 다음과 같다.


	spring4-chap16-s2/src/main/java/net/madvirus/spring4/chap16/CustomSecurityContextRepository.java		721쪽
	
	
CustomSecurityContextRepository 클래스의 loadContext() 메소드는 인증 성공시 생성한 쿠키가 존재하면, 해당 쿠키로부터 Authentication 객체를 생성한다.
이때, Authentication의 principal 객체로는 User(즉, UserDetails 타입) 객체를 사용했다.
Authentication 객체를 생성한 뒤에는 SecurityContext 객체에 Authentication을 보관한다.

마지막으로 로그아웃 성공시 쿠키를 삭제하기 위해 LogoutSuccessHandler의 커스텀 구현을 만든다.
구현 코드는 다음과 같다.


	spring4-chap16-s2/src/main/java/net/madvirus/spring4/chap16/CustomLogoutSuccessHandler.java		723쪽
		
		
onLogoutSuccess()는 LogoutFilter가 로그아웃 처리 후 호출하는데, CustomLogoutSuccessHandler는 이 메소드에서 쿠키 삭제 처리를 하고
컨텍스트 루트 경로로 리다이렉트하도록 구현했다.

[<logout> 태그의 delete-cookies 속성을 사용해도 쿠키를 삭제할 수 있는데, 이 속성에 지정한 쿠키는 컨텍스트 경로를 기준으로 한다.
예를 들어, 컨텍스트 경로가 "/spring4-chap16"인 경우 경로가 "/"로 만들어진 쿠키는 삭제되지 않는다.
이런 이유로 LogoutSuccessHandler의 커스텀 구현을 만들었다.]

이제 남은 것은 설정뿐이다. 다음과 같이 커스텀 구현을 사용하도록 스프링 시큐리티를 설정한다.


	<bean id="customSuccessHandler2"
		class="net.madvirus.spring4.chap16.CustomAuthenticationSuccessHandler2" />
		
	<bean id="customSecurityContextRepository"
		class="net.madvirus.spring4.chap16.CustomSecurityContextRepository">
	</bean>
	
	<bean id="customLogoutSuccessHandler" 
		class="net.madvirus.spring4.chap16.CustomLogoutSuccessHandler" />
		
	<sec:http use-expressions="true" entry-point-ref="customAuthenticationEntryPoint"
		security-context-repository-ref="customSecurityContextRepository">
		<sec:request-cache ref="nullRequestCache" />
		<sec:intercept-url pattern="/member/**" access="isAuthenticated()" />
		<sec:intercept-url pattern="/**" access="permitAll" />

		<sec:form-login authentication-success-handler-ref="customSuccessHandler2"
			authentication-failure-handler-ref="customFailureHandler"
			username-parameter="userid" password-parameter="password"
			login-processing-url="/user/login" />

		<sec:logout logout-url="/user/logout" 
			success-handler-ref="customLogoutSuccessHandler" />
	</sec:http>
	
	
위 설정에서 <http> 태그의 security-context-repository-ref 속성은 SecurityContextRepository로 사용할 빈을 전달받는다.
SecurityContextPersistenceFilter는 이 빈을 이용해서 구한 SecurityContext 객체를 SecurityContextHolder.setContext()에 설정한다.
따라서, 스프링 시큐리티는 커스텀 SecurityContextRepository에서 생성한 SecurityContext의 정보를 사용해서 권한 접근 검사 등을 수행하게 된다.

<logout> 태그는 success-handler-ref 속성을 사용해서 LogoutSuccessHandler로 커스텀 구현을 사용하도록 설정했다.

실제로 로그인을 수행해보자. 로그인 성공 후에 AUTH 쿠키가 생성된 것을 확인할 수 있다.
로그아웃을 하면 AUTH 쿠키가 삭제되는 것도 확인할 수 있을 것이다.

[이 예제에서는 쿠키에 사용자 권한 정보를 담았지만, 쿠키에는 사용자를 식별할 수 있는 값만 넣고 SecurityContextRepository의 커스텀 구현에서
사용자가 가진 권한을 DB나 외부 저장소에서 읽어와서 설정하도록 구현할 수도 있을 것이다.]