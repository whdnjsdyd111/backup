웹 어플리케이션을 개발할 때 프로그래머를 힘들게 만드는 것 중 하나를 꼽으라면 보안을 들 수 있다.
허가된 사용자만 접근할 수 있도록 제한하고, 이를 위해 현재 사용자가 누구인지 확인해야 한다. 중요한 정보는 HTTPS와 같은 프로토콜을 이용하여 암호화해서 주고 받기도 하고,
사용자의 로그인 암호나 신용카드 번호와 같은 민감한 정보는 DBMS에 암호화하여 저장하기도 한다.

보안 관련 영역 중에서 웹 어플리케이션 개발자의 코딩과 직결된 세 가지를 꼽자면 다음과 같은 것들이 있다.

	- 인증(Authentication) 처리 : 현재 사용자가 누구인지 확인하는 과정으로, 일반적인 웹 어플리케이션은 아이디/암호를 이용해서 인증을 처리한다.
	- 인가(Authorization) 처리 : 현재 사용자가 특정 대상(URL, 기능 등)을 사용(접근)할 권한이 있는지 검사한다.
	- UI 처리 : 권한이 없는 사용자가 접근했을 때, 알맞은 에러 화면을 보여주거나 로그인 폼과 같이 인증을 위한 화면으로 이동시킨다.
	
보통 웹 어플리케이션에서는 로그인을 통해 인증을 수행한다. 로그인에 성공하면 인증 정보를 세션이나 쿠키 같은 곳에 보관하고, 이후 요청에서는 동일 인증 정보를 이용해서
사용자가 누구인지 식별한다.

일단 사용자가 누군지 식별하면, 그 사용자가 현재 기능을 사용할 수 있는지 여부를 검사한다.
웹에서는 단순하게 URL별로 접근 권한을 부여하는 방법을 사용할 수 있다. 예를 들어, 현재 사용자가 고객 관리 기능을 위한 "/admin/member/list"라는 URL에 접근해서
회원 목록을 조회할 수 있는지 여부를 검사할 수 있다. 이를 검사할 수 있으려면 사용자가 접근 가능한 URL 목록을 갖고 있어야 하는데, 보통 이를 위해 역할(role)이란 개념을 도입한다.
예를 들어, "/admin/member/list", "admin/board/list"는 '관리자'라는 역할이 접근할 수 있다고 가정하고,
'사용자1'이 '관리자'라는 역할을 갖는다고 해보자. 이 경우 '사용자1'이 "/admin/member/list"에 접근하면, '관리자'가 접근할 수 있는 URL이므로 접근을 허용한다.

만약 접근 권한이 없으면 권한이 없다는 메시지를 보여주거나, 아직 인증 전이면 인증을 거치도록 로그임 폼을 보여주기도 한다.

지금까지 설명한 세 가지 -인증, 인가, 권한 없을 때 UI 처리- 는 각 웹 어플리케이션마다 매우 유사한 구조를 갖는다. 따라서, 매번 새롭게 구현하기 보다는
기본 틀을 만들고 어플리케이션마다 다른 부분만 알맞게 구현함으로써 설계, 코드 작성 등에 드는 시간을 줄일 수 있을 것이다. 
그리고, 스프링 시큐리티(Spring Security) 프로젝트는 정확히 이러한 목적으로 만들어졌다.

스프링 시큐리티는 보편적인 인증, 인가, UI 처리에 대한 기본 구현을 제공하고 있으며, 일부 변경할 수 있는 확장 지점을 제공하고 있다.
따라서, 프로그래머는 처음부터 인증과 인가를 위한 코드를 만들기보다는 스프링 시큐리티가 제공하는 틀을 재사용하고 필요한 부분만 커스터마이징함으로써,
보다 빠르게 인증과 인가 부분의 구현을 마무리 할 수 있다.

또한, 스프링 시큐리티는 암호화 기능도 제공하고 있다. 따라서, 암호화 기능에 대한 특별한 제약이 없다면, 스프링 시큐리티가 제공하는 암호화 기능을 사용해서,
비밀번호, 결제 정보 등을 암호화해서 보관할 수 있다.

스프링 시큐리티를 사용하는 것이 대단히 어려운 것은 아니지만, 모든 것이 그렇듯 스프링 시큐리티에 대한 기본적인 지식은 있어야 스프링 시큐리티를 잘 사용할 수 있다.
이 장에서는 비교적 단순한 웹 어플리케이션에서 필요로 하는 기본적인 인증/인가 기능을 스프링 시큐리티를 이용해서 구현하는 방법을 살펴보고, 
일부 기능을 커스터마이징하는 방법에 대해 알아볼 것이다. 그리고, 그 과정에서 설명하는 데 필요한 만큼 스프링 시큐리티 구조에 대해 설명할 것이다.

[지금 시점에서는 스프링 시큐리티 버전은 3.2.4이므로 이 버전을 기준으로 설명할 것이다.]