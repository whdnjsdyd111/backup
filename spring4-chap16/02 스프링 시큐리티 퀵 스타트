처음부터 스프링 시큐리티 전체를 이해하는 것은 매우 힘들기 때문에, 스프링 시큐리티의 간단한 예를 작성해보고 필요한 부분을 구현해 나가면서 점진적으로 구조를 이해하는 방식이 좋을 것 같다.
그래서, 간단한 예제를 먼저 작성해보고 점진적으로 필요한 부분을 구현해보면서 구조를 알아나가 보도록 하자.


	2.1 퀵 스타트 예제의 보안 요구
	
만들어 볼 예제는 다음과 같이 사용자의 접근을 제어하는 웹 어플리케이션이다.

	- 역할의 종류
		~ ROLE_ADMIN, ROLE_MANAGER 권한 존재
		
	- 경로별 접근 제한
		~ /member 로 시작하는 경로 : 인증된 사용자만 접근 가능
		~ /manager 로 시작하는 경로 : ROLE_MANAGER 권한을 가진 사용자만 접근 가능
		~ /admin 으로 시작하는 경로 : ROLE_ADMIN 역할을 가진 사용자만 접근 가능
		~ 나머지 경로 : 누구나 접근 가능
		
	- 권한 없는 접근 시 처리 방법
		~ 인증을 거치지 않은 사용자가 /member, /manager, /admin 으로 접근할 때 로그인 화면으로 이동
		~ ROME_ADMIN 권한이 없는 인증된 사용자가 /admin 경로에 접근할 경우 403 응답(권한 없음) 보여줌
		~ ROLE_MANAGER 권한이 없는 인증된 사용자가 /manager 경로에 접근할 경우 403 응답(권한 없음) 보여줌
		
	- 인증
		~ 폼 기반 로드인 : ID/암호를 입력받아 인증 처리
		~ 인증 상태 유지 : HTTP 세션 사용해서 유지
		
스프링 시큐리티를 이용하면 위에 서술한 요구사항을 처리하기 위한 기본 뼈대를 빠르게 구성할 수 있다. 퀵 스타트 예제에서는 위의 요구를 충족하는 뼈대를 만들어보고,
이후 좀 더 현실에 맞게 점진적으로 변경해 볼것이다.


	2.2 메이븐 의존 설정
	
먼저 웹을 위한 메이븐 프로젝트는 7장을 참고해서 만든다. artifacId와 finalName, Jetty 플러그인의 컨텍스트 경로를 다음과 같이
spring-chap16으로 설정해서 이 책의 다른 프로젝트와 이름이 충돌되지 않도록 하는 데 주의하자.


	<project ...>
		<modelVersion>4.0.0</modelVersion>
		<groupId>net.madvirus.spring4</groupId>
		<artifactId>spring4-chap16</artifactId>
		<packaging>war</packaging>
		<version>0.0.1-SNAPSHOT</version>
	
		<dependencies>
			<dependency>
				<groupId>javax.servlet.jsp</groupId>
				<artifactId>jsp-api</artifactId>
				<version>2.2</version>
				<scope>provided</scope>
			</dependency>
			...spring-webmvc 등 웹 관련 의존 설정 생략
		</dependencies>
	
		<build>
			<finalName>spring4-chap16</finalName>
			...
		</build>
	</project>

	
스프링 시큐리티를 사용하려면 다음과 같이 스프링 시큐리티 관련 모듈을 의존으로 추가해주어야 한다.
완전한 메이븐 pom.xml 파일은 예제 코드의 /mvnprj/spring4-chap16/pom.xml에서 확인할 수 있다.


	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-framework-bom</artifactId>
				<version>4.0.4.RELEASE</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	
	<dependencies>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-taglibs</artifactId>
		</dependency>
		<!-- 웹 관련 다른 의존 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<!-- 스프링 버전은 dependencyManagement 에서 설정함 -->
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.0.1</version>
			<scope>provided</scope>
		</dependency>
		...
	</dependencies>
	
	
위 코드는 spring-security-web 모듈, spring-security-config 모듈, spring-security-taglibs 모듈의 3.2.4 RELEASE 버전을 의존으로 추가했다.
위 코드에서 낯선 코드인 <dependencyManagement> 태그를 볼 수 있는데, 이 태그를 사용한 이유는 스프링 버전을 좀 더 쉽게 맞추기 위함이다.
스프링 시큐리티 3.2.4 버전의 경우 스프링 3.2.8 RELEASE 버전에 대해 의존을 갖고 있다.

이 책에서 사용하는 스프링 버전은 4.0.4 RELEASE이기 때문에, 일부 스프링 모듈의 버전에서 충돌이 발생할 수 있다. 
이런 충돌을 없애려면 스프링 시큐리티에서 의존하는 스프링 모듈을 모두 맞춰야 하는데, 이를 좀 더 쉽게 하는 방법이 바로 
<dependencyManagement> 태그에서 버전을 맞춰주는 것이다. spring-framework-bom 모듈은 스프링 버전을 하나로 통일할 때 사용할 수 있는
모듈로 위 설정에서는 스프링 모듈은 4.0.4 RELEASE로 맞춰주게 된다.


	2.3 스프링 시큐리티 XML 설정
	
이제 웹 보안을 위한 스프링 시큐리티 설정을 만들어보자. 앞서 요구사항을 충족하기 위한 스프링 시큐리티 설정 코드는 다음과 같다.


	resources/spring-security.xml		657쪽
	
	
라인 04와 라인 08-09는 스프링 시큐리티를 위한 네임스페이스를 설정한다. 'security' 라고 긴 이름을 사용할 수도 있지만,
간단한 입력을 위해 'sec'로 네임스페이스를 짧게 설정했다.

라인 11의 <http> 태그가 스프링 시큐리티 설정의 핵심이다. 이 태그에서 스프링 시큐리티와 관련된 거의 모든 설정을 처리한다.
<http> 태그의 use-expression 속성의 값을 true로 지정했는데, 이는 <intercept-url> 태그의 access 속성에서 스프링 시큐리티가 제공하는
SqEL(스프링 표현식)을 사용할 수 있도록 만들어준다. 표현식을 사용하면 접근 IP 제한과 같이 좀 더 풍부한 접근 제한을 설정할 수 있다.

<intercept-url> 태그는 접근 권한을 설정할 때 사용한다. pattern 속성은 접근 경로를 Ant 패턴으로 설정하며, 
access 속성은 해당 경로 패턴에 누가 접근 가능한지를 설정한다. 예를 들어, 라인 12-13의 <intercept-url> 태그는 "/admin/"으로 시작하는 경로는
'ROLE_ADMIN' 권한을 가진 사용자가 접근할 수 있다고 설정하고 있다. 라인 13의 hasAuthority()와 라인 15의 hasRole()은 같은 의미를 갖는다.
즉, 라인 15의 hasRole('ROLE_MANAGER')는 ROLE_MANAGER 권한을 가진 사용자가 접근 가능하게 설정한다.
라인 16의 isAuthenticated()는 인증된 사용자만 접근 가능하도록 설정하며, 라인 17의 permitAll은 누구나 접근 가능하다는 것을 뜻한다.

<intercept-url> 태그는 순서대로 적용된다. 예를 들어, '/manager/main' 경로로 접근할 경우, 라인 14-15에 설정한 <intercept-url> 태그 설정이 적용되며,
뒤에 위치한 라인 17의 <intercept-url> 태그 설정은 적용되지 않는다. 반면에 '/home/main' 경로로 접근할 경우, 라인 12-16 사이에 있는
<intercept-url> 태그의 경로 패턴에 모두 일치하지 않으므로 마지막에 위치한 라인 17의 설정이 적용된다.

라인 18의 <form-login> 태그는 다음의 두 기능을 제공한다.

	- 인증된 사용자만 허용되는 자원(경로)에 접근할 때, 로그인 폼을 보여준다.
	- 로그인 폼에서 아이디/암호를 전송하면, 로그인(인증) 처리를 한다.
	
라인 19의 <logout> 태그는 로그아웃 처리를 위한 기능을 추가한다.

일단, 지금은 이 정도만 알고 넘어가자. 각 태그에 대한 내용은 이 장의 내용을 진행하면서 보다 자세히 설명할 것이다.

사용자에 대한 인증을 수행하는 가장 일반적인 방법은 사용자 이름(아이디 또는 이메일 등)과 암호를 사용하는 것이다.
사용자는 본인이 등록한 이름과 암호를 폼에 입력해서 시스템에 전송하고, 시스템은 그 정보를 이용해서 인증을 처리한다. 이름과 암호를 비롯한 사용자와
관련된 정보는 보통 DB에 보관하지만, 처음 예제부터 DB에 있는 사용자 정보를 사용해서 인증을 처리하는 코드를 보여주기엔 알아야 할 것이 너무나도 많다.
그래서, 일단 이번 예제에서는 스프링 시큐리티가 제공하는 인메모리 사용자 DB 기능을 이용해서 사용자 정보를 설정했다.

테스트 목적으로 생성한 사용자 정보는 라인 22-23 부분인데, 여기서 한 사용자를 설정하는데 사용한 <user> 태그는 다음과 같이 세 개의 속성을 값으로 갖는다.


	<sec:user name="admin" password="asdf" authorities="ROLE_ADMIN, ROLE_USER" />
	
	
name 속성은 사용자 이름을, password 속성은 암호를, authorities 속성은 사용자가 갖는 권한 목록을 지정한다.
authorities 속성에 명시한 권한 이름을 앞서 설정한 <intercept-url> 태그에 사용하게 된다. 예를 들어, 위 <user> 태그에서 설정한
'admin' 사용자는 'ROLE_ADMIN' 권한을 갖고 있는데, 이 경우 다음 설정에 따라 '/admin/'으로 시작하는 모든 경로에 접근할 수 있는 권한을 갖는다.


	<sec:intercept-url pattern="/admin/**" access="hasAuthority('ROLE_ADMIN')" />
	
	
	2.4 스프링 MVC 및 관련 설정
	
웹 어플리케이션을 만들 것이므로 스프링 MVC 설정을 추가해보자. 단순히 웹 요청 경로에 따라 접근 제한이 제대로 적용되는지 확인할 것이므로,
컨트롤러를 만들지 않고 라인 23-26 처럼 경로별로 뷰를 바로 매핑했다.


	resources/spring-mvc.xml		659쪽
	
	
	2.5 DispatcherServlet 설정과 스프링 시큐리티 위한 web.xml 설정
	
스프링 시큐리티와 스프링 MVC를 위한 설정을 작성했으니, 이제 남은 작업은 DispatcherServlet을 설정하는 일이다.
예제에서 사용할 web.xml 설정을 다음과 같이 작성해보았다.


	/WEB-INF/web.xml		660쪽
	
	
위에서 눈여겨 볼 부분은 다음의 두 가지다.

	- 라인 08-17 : 스프링 시큐리티와 관련된 설정은 루트 어플리케이션 컨텍스트에서 사용한다.
	- 라인 38-47 : 이름이 "springSecurityFilterChain"인 DelegatingFilterProxy를 서블릿 필터로 등록한다.
	
먼저 첫 번째로 스프링 시큐리티를 위한 스프링 설정은 루트 어플리케이션 컨텍스트에서 사용해야 한다. 뒤에서 설명하겠지만, 
스프링 시큐리티가 제공하는 JSP용 커스텀 태그 라이브러리가 정상 동작하려면 스프링 시큐리티의 주요 구성 요소가 루트 어플리케이션에 위치해야 한다.
이런 이유로 루트 어플리케이션 컨텍스트에 스프링 시큐리티 관련 빈을 생성했다.

두 번째로 눈여겨볼 부분은 라인 38-47에서 생성한 DelegatingFilterProxy다. 이 필터는 스프링 빈객체를 필터로 쓰고 싶을 때 사용하는데, 위 설정에서 사용할 스프링 빈의 이름을
"springSecurityFilterChain"로 설정했다. 여기서 "springSecurityFilterChain"이라는 이름을 갖는 스프링 빈을 설정한 적이 없는데
이 필터가 왜 출현했는지 궁금한 독자가 있을 것이다. 앞서 작성했던 spring-security.xml 설정이나 spring-mvc.xml 설정 모두
"springSecurityFilterChain"이라는 이름의 빈을 설정하고 있지 않기 때문이다.

실제 "springSecurityFilterChain" 이라는 이름의 스프링 빈은 spring-security.xml 설정의 스프링 시큐리티 네임스페이스를 처리하는 과정에서 등록된다.
스프링 시큐리티 네임스페이스를 사용하면 내부적으로 FilterChainProxy 객체를 스프링 빈으로 등록하는데, 이 FilterChainProxy 빈의 이름이 "springSecurityFilterChain"이다.
스프링 시큐리티의 웹 모듈은 여러 서블릿 필터를 이용해서 접근 제어, 로그인/로그아웃 등의 기능을 제공하는데, FilterChainProxy은 이들 보안 관련 서블릿 필터들을
묶어서 실행해주는 기능을 제공한다.

FilterChainProxy 프록시가 여러 보안 관련 서블릿 필터를 묶어서 실행한다고 했는데, 그렇다면 보안 관련 서블릿 필터는 또 어디에 있을까?
사실 이미 앞에서 보안 관련 서블릿 필터를 빈으로 등록하기 위한 설정을 했다. 바로 앞서 설정했던 spring-security.xml 파일에서
보안 관련 서블릿 필터를 생성하기 위한 설정을 했다. spring-security.xml 파일에서 관련 부분을 다시 보자.


	<sec:http use-expressions="true">
		<sec:intercept-url pattern="/admin/**" 
		                   access="hasAuthority('ROLE_ADMIN')" />
		<sec:intercept-url pattern="/manager/**" 
		                   access="hasRole('ROLE_MANAGER')" />
		<sec:intercept-url pattern="/member/**" access="isAuthenticated()" />
		<sec:intercept-url pattern="/**" access="permitAll"/>
		<sec:form-login />
		<sec:logout />
	</sec:http>
	
	
스프링 시큐리티 네임스페이스 핸들러는 입력받은 설정 정보를 이용해서 보안 관련 서블릿 필터 체인을 생성한다. 예를 들어, <intercept-url> 태그로 입력 받은 설정을 사용해서
FilterSecurityInterceptor 필터를 생성하고, <form-login> 설정을 이용해서 폼 기반 로그인 요청을 처리하는 UsernamePasswordAuthenticationFilter를 생성한다.
비슷하게 <logout> 설정은 LogoutFilter 필터를 생성하는데 사용된다. 이렇게 생성한 필터는 체인을 형성하고, FilterChainProxy는 클라이언트의 웹 요청이 들어오면
이 체인을 이용해서 접근 제어를 하게 된다.


		FilterChainProxy	────────>	보안 필터 체인
									(SecurityFilterChain)
									
										LogoutFilter
											↓
								UsernamePasswordAuthenticationFilter
											↓
									FilterSecurityInterceptor
									
									
실제 스프링 시큐리티가 생성하는 보안 필터는 더 많은데, 보안 필터 및 FilterChainProxy 클래스에 대한 내용은 '기본 구조' 절에서 좀 더 살펴보도록 하겠다.


	2.6 예제에서 사용할 JSP 코드
	
이제 접근 제어가 올바르게 동작하는지 확인해보기 위한 간단한 JSP 코드를 만들어보자. 만들 JSP 페이지는 다음과 같다.

	- WEB-INF/view/index.jsp			/index 경로 요청에 대한 뷰 페이지
	- WEB-INF/view/adminMain.jsp		/admin/main 경로 요청에 대한 뷰 페이지
	- WEB-INF/view/homeMain.jsp			/home/main 경로 요청에 대한 뷰 페이지
	- WEB-INF/view/managerMain.jsp		/manager/main 경로 요청에 대한 뷰 페이지
	- WEB-INF/view/memberMain.jsp		/member/main 경로 요청에 대한 뷰 페이지
	
먼저, index.jsp 코드는 다음과 같다.


	view/index.jsp		663쪽
	
	
라인 03은 스프링 시큐리티가 제공하는 커스텀 태그 라이브러리를 설정한다. <sec:authorize> 커스텀 태그는 현재 사용자가 특정 권한이 있으면 몸체 내용을 보여주는 기능을 제공한다.
예를 들어, 라인 09-11 에서는 현재 사용자가 인증된 경우에 한해 라인 10의 내용을 출력한다.

<sec:authentication> 태그는 현재 접속한 사용자의 인증 정보를 보여준다. property 속성을 이용해서 보여줄 인증 정보를 선택했다.
라인 10의 경우 인증 정보 중 name 프로퍼티의 값을 출력하라고 설정했는데, 이 인증 정보 프로퍼티는 뒤에서 설명할 Authentication 객체의 프로퍼티와 연결된다.

라인 17-20은 <sec:authorize> 태그를 이용해서 인증된 경우에만, 즉 로그인한 경우에만, 로그아웃 링크를 출력하도록 했다.
라인 18에서 로그아웃을 실행하기 위해 사용된 폼의 링크 값은 "/j_spring_security_logout" 임을 알 수 있다. 이 경로를 실제로 어떻게 처리하는지는 뒤에서 설명한다.

나머지 JSP 파일은 단순하다. 예를 들어, memberMain.jsp 파일은 다음처럼 단순히 페이지 이름과 로그인 한 사용자의 이름을 출력한다.


	view/memberMain.jsp		664쪽
	
	
다른 JSP 페이지도 비슷하므로 생략.


	2.7 접근 제어 적용 확인
	
이제 예제를 실행해서 실제로 스프링 시큐리티가 웹 요청에 대한 접근 제어를 해주는지 확인해보자. 톰캣이나 제티를 이용해서 웹 어플리케이션을 실행한 뒤에, 웹 브라우저에
http://localhost:8001/spring4-chap16/index	를 입력한다.	[첫 화면에는 로그아웃 링크가 없다]


	http://localhost:8001/spring4-chap16/index
	
	
위 결과를 보면 로그아웃을 위한 /j_spring_security_logout 링크가 표시되지 않은 것을 알 수 있다.
아직 사용자가 인증(로그인)을 하지 않아서 아래 코드의 <sec:authorize> 태그가 몸체 내용을 처리하지 않았기 때문에,
/j_spring_security_logout 링크가 출력되지 않은 것이다.

	
	-- index.jsp 파일의 일부 코드 : 인증된 경우만 <sec:authorize>의 몸체를 출력
	<sec:authorize access="isAuthenticated()">
	<li><a href="j_spring_security_logout">/j_spring_security_logout</a></li>
	</sec:authorize>
	
	
이제 접근 제한이 있는 경로에 접근해보자. spring-security.xml 설정에서 다음처럼 경로별 접근 가능한 권한을 제한했었다.


	<sec:http use-expressions="true">
		<sec:intercept-url pattern="/admin/**" 
		                   access="hasAuthority('ROLE_ADMIN')" />
		<sec:intercept-url pattern="/manager/**" 
		                   access="hasRole('ROLE_MANAGER')" />
		<sec:intercept-url pattern="/member/**" access="isAuthenticated()" />
		<sec:intercept-url pattern="/**" access="permitAll"/>
		<sec:form-login />
		<sec:logout />
	</sec:http>
	
	
위 설정에 따르면, /manager/main 경로는 ROLE_MANAGER 권한을 가진 사용자만 접근할 수 있다.
로그안하지 않은 상태에서 /manager/main 링크를 클릭해보자. 스프링 시큐리트는 아직 인증되지 않은 사용자가 특정 권한을 요구하는 경로에 접근하면 인증을 먼저 하도록 로그인 화면을 보여준다.
실제로 /manager/main 경로를 클릭해보면 다음의 과정을 거쳐서 화면 이동이 발생한다.

	- 1. 로그인 전에 /mamager/main 경로 요청
	- 2. /manager/main은 ROLE_MANAGER 권한을 가진 사용자만 접근 가능한데, 아직 로그인 전이므로 로그인 폼 경로(/spring_security_login)로 이동
	- 3. ROLE_MANAGER 권한을 가진 계정의 아이디/암호를 입력하고, 로그인 시도
	- 4. 로그인(인증)에 성공하면 1번 과정에 요청했던 /manager/main 경로로 이동
	
ROLE_MANAGER 권한을 갖지 않은 사용자 계정으로 로그인 한 뒤에 /manager/main 경로에 접근해보자.
또는, ROLE_ADMIN 권한을 갖지 않은 계정으로 /admin/main 경로에 접근해보자. 그러면 접근 금지를 뜻하는 403 응답 결과를 받게 된다.

로그인 성공한 상태에서 첫 화면인 /index 경로로 이동해보자. 인등된 상태이기 때문에 로그아웃을 위한 링크가 출력된 것을 알 수 있다.

/logout 경로를 클릭하면, 로그아웃 처리를 한 뒤에 웹 어플리케이션 컨텍스트 내에서의 루트 경로(이 예의 경우 /spring4-chap16)로 이동한다.
이 예제의 루트 경로를 처리하는 index.jsp는 단순히 '/index'로 리다이렉트하도록 구현했으므로 로그아웃 처리 후에는 로그아웃 링크가 없는 첫 화면을 보여주게 된다.

예제를 실행하는 과정에서 다음과 같은 것들이 궁금해할 수도 있다.

	- 로그인 폼은 어디서 만들어지는지?
	- 로그인 폼 전송 및 /j_spring_security_logout 경로는 누가 처리하는지?
	- 인증 처리 과정은 어떻게 되는지?
	- 그리고 권한이 없을 때 로그인 폼으로 이동시키거나 403 응답을 보여주는 건 누가 하는지?
	
이런 궁금증을 풀려면 스프링 시큐리티의 구조에 대한 지식이 필요로 한다. 이어지는 절에서 바로 스프링 시큐리티의 주요 구성 요소 및 그들의 구조에 대해 살펴본다.


	<sec:authentication-manager>
		<sec:authentication-provider>
			<sec:user-service>
				<sec:user name="bkchoi" password="1234" 
				          authorities="ROLE_USER" />
				<sec:user name="manager" password="qwer" 
				          authorities="ROLE_MANAGER" />
				<sec:user name="admin" password="asdf" 
				          authorities="ROLE_ADMIN,ROLE_USER" />
			</sec:user-service>
		</sec:authentication-provider>
	</sec:authentication-manager>
	
	
실제 환경에서는 메모리가 아닌 DB를 사용해서 인증 정보를 읽어올 것이다. 이에 대한 내용은 뒤에서 다시 살펴보자.


	3.4 FilterSecurityInterceptor와 AccessDecisionManager의 인가 처리
	
권한 검사를 위한 설정 코드를 다시 보자.


	<sec:http use-expressions="true">
		<sec:intercept-url pattern="/admin/**" 
		                   access="hasAuthority('ROLE_ADMIN')" />
		<sec:intercept-url pattern="/manager/**" 
		                   access="hasRole('ROLE_MANAGER')" />
		<sec:intercept-url pattern="/member/**" access="isAuthenticated()" />
		<sec:intercept-url pattern="/**" access="permitAll"/>
		<sec:form-login />
		<sec:logout />
	</sec:http>
	
	
<intercept-url> 태그는 지정한 경로 패턴별로 접근 권한을 지정해주는데, 스프링 시큐리티는 이 설정을 이용해서 다음의 세 구성 요소를 설정한다.

	- FilterSecurityInterceptor
	- FilterInvocationSecurityMetadataSource
	- AccessDecisionManager
	
앞서 보안 필터 체인에서 FilterSecurityInterceptor는 체인의 가장 마지막에 위치 했었다.
체인의 앞쪽에 위치한 SecurityContextPersistenceFilter나 AnonymousAuthenticationFilter 등의 필터가 SecurityContextHolder에
SecurityContext를 설정하면, 마지막에 위치한 FilterSecurityInterceptor는 SecurityContext에 보관된 Authentication가 요청 경로(보안 대상)에 접근할 수 있는지 여부를 검사하게 된다.

FilterSecurityInterceptor가 접근 기능 여부를 검사하는 과정은 다소 복잡한데, 이 과정에서 앞서 언급한 세 개의 구성 요소가 사용된다.
이 과정을 간략하게 정리하면 다음과 같이 표현할 수 있다.

				
						2: getAttribute(FilterInvocation)
						→
	필터체인의 이전 필터			┌───────	:FilterInvocationSecurityMetadataSource
		│					│
		│ 1: 체인 실행			│	3: return Collection<ConfigAttribute>
		│ ↓					│	↓
		V					│
	: FilterSecurityInterceptor
							│
							│	4: decide(authenticated, FilterInvocation, attributes)
							│	↓
							└───────	:AccessDecisionManager
							
							
	- 1. 위에서 보안 필터 체인을 거쳐 Authentication 객체를 SecurityContext에 저장하게 되고, FilterSecurityInterceptor가 실행된다.
	- 2. FilterSecurityInterceptor는 요청 경로(FilterInvocation)에 대한 보안 설정(ConfigAttribute) 정보를
		FilterInvocationSecurityMetadataSource에 요청한다.
	- 3. FilterInvocationSecurityMetadataSource는 보안 설정 목록을 리턴한다.
	- 4. FilterSecurityInterceptor는 AccessDecisionManager의 decide() 메소드를 호출해서 Authentication이 요청 경로(FilterInvocation)에 대해
		보안 설정(ConfigAttribute)을 충족하는지 검사한다.
		
위의 4번 과정에서 AccessDecisionManager는 현재 사용자(Authentication)가 지정한 자원에 대한 접근 권한이 없다면 AccessDeniedException을 발생시킨다.
AccessDeniedException이 발생하면 FilterSecurityInterceptor는 익셉션을 재발생해서 필터 체인의 앞쪽에 위치한 필터에서 익셉션을 처리하도록 한다.

AccessDecisionManager가 익셉션을 발생하지 않으면 권한이 있는 것으로 간주하고 FilterSecurityInterceptor는 사용자가 요청한 경로를 실행한다.

	(1) AccessDecisionManager와 AccessDecisionVoter
	
AccessDecisionManager 인터페이스는 다음과 같이 정의되어 있다.

	
	public interface cAccessDecisionManager {
		void decide(Authentication authentication,
				Object object, Collection<ConfigAttribute> configAttribute)
			throws AccessDeniedException, InsufficientAuthenticationException;
			
		boolean supports(ConfigAttribute attribute);
		boolean supports(Class<?> clazz);
	}
	
	
decide() 메소드는 현재 사용자를 표현하는 authentication 객체가 보안 대상 객체인 object에 대해 configAttribute에 지정한 권한을 갖고 있는지 검사한다.
만약 권한을 갖고 있지 않다면 AccessDeniedException을 발생시키고, 권한을 갖고 있으면 익셉션을 발생하지 않고 리턴한다.

실제 스프링이 기본으로 사용하는 AccessDecisionManager 구현 클래스는 AffirmativeBased 클래스인데,
이 클래스는 접근 권한을 가졌는지의 여부를 직접 판단하지 않고 AccessDecisionVoter 타입의 객체에 한 번 더 위임한다. 이들 간의 관계는 다음과 같다.


			<< interface >>
			AccessDecisionManager
			
			+ decide()
															<< interface >>
					↑										AccessDecisionVoter
		AbstractAccessDecisionManager	────────────────>
															+ ACCESS_GRANTED = 1
	- decisitionVoters : List<AccessDecisionVoter>			+ ACCESS_ABSTAIN = 0
															+ ACCESS_DENIED = -1
					↑
			AffirmativeBased								+ vote()
			
			+ decide()												↑
															WebExpressionVoter
															
															
AccessDecisionVoter 인터페이스는 다음과 같이 정의되어 있다. 이 인터페이스의 vote() 메소드는 authentication이 보안 대상 object에 대해 attributes 권한을 갖고 있으면
ACCESS_GRANTED를 리턴하고 권한이 없으면 ACCESS_DENIED를 리턴한다. AccessDecisionVoter가 권한을 가졌는지 여부를 판단할 수 없으면
(예, 지원하지 않는 ConfigAttribute 타입이나 보안 대상 객체 타입), ACCESS_ABSTRAIN을 리턴한다.


	public interface AccessDecisionVoter<S> {
		int ACCESS_GRANTED = 1;
		int ACCESS_ABSTAIN = 0;
		int ACCESS_DENIED = -1;
		
		boolean supports(ConfigAttribute attribute);
		boolean supports(Class<?> clazz);
		int vote(Authentication authentication, S object,
			Collection<ConfigAttribute> attributes);
	}
	
	
AffirmativeBased 클래스의 decide() 메소드는 등록된 AccessDecisionVoter 객체들의 vote() 메소드를 차례대로 호출하고 결과에 따라 다음과 같이 동작한다.

	- 등록된 AccessDecisionVoter 객체의 vote() 메소드 중 하나라도 ACCESS_GRANTED를 리턴하면, 권한이 있는 것으로 간주해서 정상 리턴한다.
	- 한 개의 AccessDecisionVoter 객체도 ACCESS_GRANTED를 리턴하지 않으면 권한이 없는 것으로 판단해 AccessDeniedException이 발생한다.
	
앞서 spring-security.xml의 설정을 보면 다음과 같이 <http> 태그의 use-expressions 속성의 값을 true로 지정했는데,
이 경우 AccessDecisionVoter의 구현체로 WebExpressionVoter 클래스를 사용한다.

	
	<sec:http use-expressions="true>
		<sec:intercept-url pattern="/admin/**"
				access="hasAuthority('ROLE_ADMIN')" />
	</sec:http>
	
	
위 코드에 표시한 "hasAuthority('ROLE_ADMIN')" 이나 "hasRole()", "authenticated" 등은 스프링 시큐리티가 제공하는 스프링 표현식(SpEL)인데,
WebExpressionVoter는 이 SpEL로 설정한 권한을 가졌는지 검사한다.

스프링 시큐리티가 제공하는 AccessDecisionManager 구현 클래스에는 AffirmativeBased 클래스를 포함해 다음의 세 클래스가 존재한다.

	- AffirmativeBased : 한 개의 AccessDecisionVoter라도 ACCESS_GRANTED를 리턴하면 접근 허용으로 간주한다. 기본으로 사용된다.
	
	- ConsensusBased : 각 AccessDecisionVoter가 리턴한 ACCESS_GRANTED의 개수가 ACCESS_DENIED 보다 크거나 같으면
		접근 허용으로 간주한다. (같을 때 접근 금지로 처리할지 여부를 설정 가능하다.)
		
	- UnanimousBased : 한 개의 AccessDecisionVoter라도 ACCESS_DENIED를 리턴하면, 접근 금지로 결정한다.