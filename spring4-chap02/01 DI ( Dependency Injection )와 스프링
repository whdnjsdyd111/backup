DI는 Dependency Injection의 약자로서, 우리말로는 '의존 주입'이라는 단어이다.
'의존'이란 단어에서 알 수 있듯이 DI는 의존을 처리하는 방법에 대한 내용이다. 스프링은 기본적으로 DI를 기반으로 동작하기 때문에, 스프링을 잘 사용하려면 DI에 대한 이해가 필수적이다.
이 절에서는 스프링을 설명하기에 앞서 DI에 대해 살펴볼 것이며, 이를 통해 스프링 사용을 위해 필요한 기본 지식을 익히도록 하겠다.

	1.1	의존 ( Dependency ) 이란?
	
DI는 의존(Dependency)에 대한 설계 패턴이므로, 의존의 의미를 간단하게 알아보자. 소프트웨어를 개발할 때, 단 한개의 클래스에 모든 코드를 몰아넣는 경우는 없다.
예를 들어, 파일의 내용을 출력해주는 간단한 프로그램을 생각해보면, 이 프로그램에서 파일의 내용을 출력해주는 클래스는 다음과 같이 작성할 수도 있다.


	public class FilePrinter {
		public void print(String filePath) throws IOException {
			// 의존하는 타입을 로컬 변수(br 변수)로 정의
			try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
				String line = null;
				while((line = br.readLine()) != null) {
					System.out.print(line);
				}
			}
		}
	}
	
	
위 코드에서 FilePrinter 클래스의 print() 메소드는 내부적으로 BufferedReader 클래스를 사용하고 있다. 즉, print() 메소드를 실행하기 위해서는 BufferedReader 클래스가 필요한데,
이렇게 기능을 실행하기 위해 다른 클래스(또는 타입)를 필요로 할 때 이를 의존(dependency)한다고 말한다. 위 코드는 FilePrinter 클래스가 BufferedReader 클래스에 의존한다고 말할 수 있다.

앞서 FilePrinter 클래스에서는 print() 메소드 내부에서 의존하는 타입의 객체를 직접 생성해서 로컬 변수로 보관했는데, 아래 코드처럼 의존하는 타입을 필드로 정의하기도 한다.


	public class FileEncryptor {
		// 의존 객체를 필드(encryptor 필드)로 정의
		private Encryptor encryptor = new Encryptor();
		
		public void encryptor(File src, File target) throws IOException {
			try (FileInputStream is = new FileInputStream(src);
					FileOutputStream out = new FileOutputStream(target)) {
				byte[] data = new byte[512];
				int len = -1;
				while((len = is.read(data)) != -1) {
					encryptor.encrypt(data, 0, len);
					out.write(data, 0, len);
				}
			}
		}
	}
	
	
타입에 의존한다는 것은 다른 말로 해당 타입의 객체를 사용한다는 것을 뜻한다. 예를 들어, 앞서 FilePrinter 클래스와 FileEncryptor 클래스에서는 의존하는 타입의 객체를 직접해서 사용하고 있다.

의존하는 타입의 객체를 직접 생성하지 않고 외부에서 전달받을 수도 있을 것이다. 예를 들어, FileEncryptor 클래스는 아래 코드처럼 생성자의 파라미터를 이용해서 의존하는 타입의 객체를 전달받을 수 있다.


	public class FileEncryptor {
		private Encryptor encryptor;
		
		// 의존하는 타입의 객체를 생성자의 파라미터를 통해서 전달받음
		public FileEncryptor(Encryptor enc) {
			this.encryptor = enc;
		}
		...
		
		
위와 같이 생성자를 통해서 의존 객체를 전달받는 경우, FileEncryptor 객체를 생성할 때 의존하는 객체를 생성자의 파라미터로 전달해야 한다.


	public static void main(String[] args) {
		Encryptor enc = new Encryptor();
		
		FileEncryptor fileEncryptor = new FileEncryptor(enc);
		
		try {
			fileEncryptor.encrypt(new File(args[0], new File(args[1]));
		} catch(IOException ex) {
			// 예외 처리
		}
	}
	
	
	1.2 의존 객체를 직접 생성하는 방식의 단점
	
앞서 의존하는 타입의 객체를 직접 생성하는 방식의 코드를 보자.


	public class FileEncryptor {
		// 의존 객체를 필드(encryptor 필드)로 정의
		private Encryptor encryptor = new Encryptor();
		
		public void encryptor(File src, File target) throws IOException {
			try (FileInputStream is = new FileInputStream(src);
					FileOutputStream out = new FileOutputStream(target)) {
				...
			}
		}
	}
	
	
위 코드는 Encryptor 객체를 직접 생성하고 있다. 이 상황에서 요구사항의 변화로 Encryptor 클래스의 하위 클래스인 FastEncryptor 클래스를 사용해야 하는 상황이 발생했다고 하자.
이 경우 FileEncryptor 클래스의 코드를 변경해주어야 한다.


	public class FileEncryptor {
		// Encryptor 대신에 FastEncryptor를 사용하려면 FileEncryptor를 변경해주어야 함
		private Encryptor encryptor = new Encryptor();
		
		
사실 FileEncryptor 클래스는 사용할 객체의 타입이 Encryptor 클래스인지 FastEncryptor 클래스인지는 중요하지 않음에도, FastEncryptor 클래스의 객체를 사용하기 위해
FileEncryptor 클래스의 코드를 변경해야 하는 상황이 발생했다. 만약 Encryptor 클래스 대신에 FastEncryptor 클래스의 객체를 사용해야 하는 코드가 많다면,
그에 비례해서 변경해주어야 하는 코드의 양도 증가하게 될 것이다.

의존하는 객체를 직접 생성하는 방식은 개발 효율을 낮추는 상황을 만들기도 한다. 예를 들어, Encryptor 클래스의 encrypt() 메소드가 아직 완성되지 않았고 현재 소스 버전 관리 시스템에
등록된 Encryptor 클래스의 encrypt() 메소드는 UnsupportedOperationException을 발생시키도록 구현되어 있다고 해보자.

	
	public class Encryptor {
		public void encrypt(byte[] data, int offset, int len) {
			throw new UnsupportedOperationException();
		}
	}
	
	
Encryptor 객체를 직접 생성해서 사용하도록 FileEncryptor 클래스를 구현할 경우, Encryptor의 encrypt() 메소드가 UnsupportedOperationException을 발생하기 때문에
Encryptor 클래스가 완성되기 전까지는 FileEncryptor 클래스를 테스트할 수 없게 된다.


	public class FileEncryptor {
		// 의존 객체를 필드(encryptor 필드)로 정의
		private Encryptor encryptor = new Encryptor();
		
		public void encryptor(File src, File target) throws IOException {
			try (FileInputStream is = new FileInputStream(src);
					FileOutputStream out = new FileOutputStream(target)) {
				...
				// 아래 코드에서 항상 UnsupportedOperationException 발생
				encryptor.encrypt(data, 0, len);
				...
			}
		}
	}
	
	
만약 Encryptor 클래스를 사용하는 곳이 FileEncryptor 클래스 한 곳이 아니라면 어떻게 될까?
Encryptor 클래스로 때문에 많은 코드의 테스트 즉, 코드 완성이 늦어지게 된다. 다시 말해서, 개발 생산성이 전체적으로 낮아지는 상황이 발생하는 것이다.


	1.3 DI를 사용하는 방식의 코드 : 의존 객체를 외부에서 조립함
	
의존 객체를 직접 생성하는 방식과 달리 DI(Dependency Injection)는 의존 객체를 외부로부터 전달받는 구현 방식이다.
우리는 이미 이 방식에 대해 언급했다. 바로 생성자를 이용해서 의존 객체를 전달받는 방식이 DI에 따라 구현한 것이기 때문이다.


	public class FileEncryptor {
		private Encryptor encryptor;
	
		public FileEncryptor(Encryptor encryptor) {
			// 생성자로 전달받은 객체를 필드에 할당
			this.encryptor = encryptor;
		}
		
		public void encrypt(File src, File target) throws Exception {
			...
			// DI 방식으로 전달받은 객체를 사용
			encryptor.encrypt(data, 0, len);
			...
		}
	}
	
	
위 코드에서 FileEncryptor 클래스는 Encryptor 타입의 객체를 필요로 하는데, 생성자를 통해서 Encryptor 타입의 객체를 전달받고 있다.
이는 FileEncryptor 객체를 생성하는 부분에서 Encryptor 객체를 전달해주어야 함을 의미한다.


	// 다른 코드에서 의존 객체를 생성하고,
	Encryptor enc = new Encryptor();
	// 의존 객체를 전달해 줌
	FileEncryptor fileEnc = new FileEncryptor(enc);
	
	
여기서 FileEncryptor가 스스로 의존하는 객체를 생성하지 않고 외부의 누군가가 의존하는 객체를 FileEncryptor에 넣어준다는 의미로, 이런 방식을 DI(의존 주입)라고 부른다.
또 다른 말로는 객체를 연결한다는 표현을 쓰기도 한다. 예를 들어, FileEncryptor 객체에 Encryptor 객체를 연결한다고 말하기도 한다.

그럼, 여기서는 누가 객체를 생성하고 객체들을 서로 연결해줄까? 그런 역할을 수행하는 것이 바로 조립기이다.
다음은 간단한 조립기의 구현 코드 예를 보여주고 있다.


	public class Assembler {
		private FileEncryptor fileEnc;
		private Encryptor enc;
		
		public Assembler() {
			enc = new Encryptor();
			fileEnc = new FileEncryptor(enc);
		}
		
		public FileEncryptor fileEncryptor() {
			return fileEnc;
		}
	}
	
	
이제 FileEncryptor가 필요한 곳에서는 조립기를 이용해서 FileEncryptor를 구하면 된다.


	Assembler assembler = new Assembler();
	FileEncryptor fileEnc = assembler.fileEncryptor();
	fileEnc.ecrypt(srcFile, targetFile);
	
	
만약 FileEncryptor가 사용해야 할 Encryptor 객체의 타입이 FastEncryptor로 변경되면 어떻게 될까? 이 경우 FileEncryptor 코드를 변경하는 대신 조립기의 코드를 바꾸게 된다.


	public class Assembler {
		private FileEncryptor fileEnc;
		private Encryptor enc;
		
		public Assembler() {
			enc = new FastEncryptor();
			fileEnc = new FileEncryptor(enc);
		}
		...
		
		
FastEncryptor 객체를 사용하도록 변경해주어야 하는 곳이 많더라도 변경되는 부분은 조립기로 제한된다.
예를 들어, FileEncryptor 뿐만 아니라 다른 클래스에서도 Encryptor 대신 FastEncryptor 객체를 사용해야 한다고 해보자. 이 경우, 변경되는 코드는 조립기의 역할을 하는 클래스뿐이며,
FastEncryptor 객체를 필요로하는 코드는 변경되지 않게 된다.


	public class Assembler {
		private FileEncryptor fileEnc;
		private OtherClass other;
		private Encryptor enc;
		
		public Assembler() {
			enc = new FastEncryptor();
			// enc를 Encryptor에서 FastEncryptor로 변경해도
			// Encryptor 객체를 DI로 전달받는 코드는 영향을 받지 않는다.
			fileEnc = new FileEncryptor(enc);
			other = new Other(enc);
		}
		..
		
		
스프링이 바로 이 조립기에 해당하는데, 스프링을 어떻게 조립기로 사용하는지에 대한 내용은 뒤에 자세히 알아보자.

DI를 사용할 때의 또 다른 장점은 의존하는 클래스의 구현이 완성되어 있지 않더라도 테스트를 할 수 있다는 점이다. 다시한번 Encryptor 클래스의 encrypt() 메소드의 구현이 아직 완성되지 않은 상황으로 돌아가 보자.
Encryptor 클래스의 개발자는 encrypt() 메소드가 구현되지 않았다는 점을 명확히 하기 위해 encrypt() 메소드가 UnsupportedOperationException을 발생시키도록 코드를 작성하고
코드 관리 시스템에 커밋(commit)했다고 가정해보자.


	public class Encryptor {
		public void encrypt(byte[] data, int offset, int len) {
			throw new UnsupportedOperationException();
		}
	}
	
	
이 상태에서 Encryptor 클래스를 사용하는 FileEncryptor 클래스를 테스트 하고 싶다.
만약 FileEncryptor 클래스가 Encryptor 객체를 직접 생성한다면, Encryptor 클래스의 코드가 완성될 때까지 FileEncryptor 클래스를 테스트할 수 없을 것이다.
하지만, DI 방식을 사용하고 있다면 얘기가 달라진다.

DI는 의존하는 객체를 외부에서 넣어주는 방식이다. 이는 FileEncryptor 객체를 생성할 때 진짜 Encryptor 대신에 가짜 Encryptor 객체를 넣어줄 수 있다는 의미이다.
예를 들어 다음과 같이 가짜 Encryptor 객체를 이용해서 FileEncryptor 클래스를 실행해볼 수 있는 것이다.


	public void testFileEncryptor() {
		Encryptor fakeEncryptor = new Encryptor() {
			// Encryptor.encrypt() 메서드 가짜 구현
			@Override
			public void encrypt(byte[] data, int offset, int len) {
				for(int i = offset; i < len; i++)
					data[i] = data[i] + (byte) 10;
			}
		};
		
		// 진짜 Encryptor 없이 FileEncryptor를 테스트
		FileEncryptor fileEncryptor = new FileEncryptor(fakeEncryptor);
		
		try {
			// 가짜 구현인 fakeEncryptor를 이용
			fileEncryptor.encrypt(srcFile, targetFile);
			// ... targetFile에 생성된 데이터 내용 확인
		} catch(IOException ex) {
			// 예외처리
		}
	}
	
	
위 코드에서 fakeEncryptor는 encrypt() 메소드를 재정의(오버라이딩)한 임의 클래스의 객체이다. 이 임의 클래스의 encrypt() 메소드는 암호화라고 하기에는 민망한 구현이지만,
FileEncryptor 클래스를 테스트하는데 필요한 만큼은 encrypt() 메소드를 재정의하고 있다. 이 가짜 구현을 통해 Encryptor 클래스의 구현이 완료되었는지 여부에 상관없이
FileEncryptor 클래스를 테스트할 수 있게 되었고 이를 가능하게 해주는 것이 바로 DI이다.

DI 방식을 사용한 덕분에 가짜 객체를 통해서 FileEncryptor 클래스를 테스트할 수 있게 되었는데, 이는 다른 두 명의 개발자가 Encryptor 클래스와 FileEncryptor 클래스를
동시에 구현할 수 있다는 것을 뜻한다. 즉, 개발 효율이 향상될 수 있다는 것이다.

[이런 테스트 프레임워크 중 Mockito 가 있는데, 	http://javacan.tistory.com/entry/MocktestUsingMockito		를 참고]


	1.4	생성자 방식과 프로퍼티 설정 방식
	
DI에서 의존 객체를 전달하는 방법은 크게 생성자 방식과 프로퍼티 설정 방식으로 구분된다. 생성자 방식은 앞서 실퍄봤듯이 생성자를 통해서 의존 객체를 전달받는 방식이다.


	public class FileEncryptor {
		private Encryptor encryptor;
		
		// 생성자를 통해서 의존 객체를 전달받음
		public FileEncryptor(Encryptor encryptor) {
			this.encryptor = encryptor;
		}
		
		
프로퍼티 설정 방식은 의존 객체를 전달받기 위해 메소드를 이용한다. 자바빈(JavaBean)의 영향으로 프로퍼티 설정 방식은 setPropertyName() 형식의 메소드를 주로 사용한다.
아래 코드는 의존 객체를 전달받기 위해 프로퍼티 설정 방식을 이용하는 예를 보여주고 있다.


	public class FileEncryptor {
		private Encryptor encryptor;
	
		// set 메소드를 통해서 의존 객체를 전달받음
		public setEncryptor(Encryptor encryptor) {
			this.encryptor = encryptor;
		}
		
		
위 코드에서처럼 메소드 이름이 setEncryptor()인 경우 프로퍼티 이름은 "set" 접두어를 빼고 첫 글자를 소문자로 바꾼 "encryptor"가 된다.

생성자 방식과 프로퍼티 설정 방식은 각각 장단점이 서로 다르다. 먼저 생성자 방식의 장점은 객체를 생성하는 시점에 의존하는 객체를 모두 전달받을 수 있다는 점이다.
전달받은 파라미터가 정상인지 확인하는 코드를 생성자에 추가할 경우, 객체 생성 이후에는 그 객체가 사용 가능 상태임을 보장할 수 있다.


	// 객체 생성 시점에 의존 객체가 정상인지 확인
	public class FileEncryptor {
		public FileEncryptor(Encryptor enc) {
			if(enc == null) throw IllegalArgumentException();
			this.encryptor = enc;
		}
		...
	
	// FileEncryptor가 정상적으로 생성되면, FileEncryptor 객체는 사용 가능한 상태가 됨
	FileEncryptor fileEnc = new FileEncryptor(enc);
	fileEnc.encrypt(src, target);
	
	
프로퍼티 설정 방식의 장점은 어떤 의존 객체를 설정하는지 메소드 이름으로 알 수 있다는 점이다. 예를 들어, 아래 코드에서 enc 파라미터의 타입을 확인하지 않더라도
setEncryptor()라는 프로퍼티 설정 메소드의 이름을 통해 enc가 Encryptor 객체임을 유추할 수 있다.


	FileEncryptor fileEnc = new FileEncryptor();
	// enc 파라미터의 타입을 확인하지 않아도 enc가 Encryptor임을 알 수 있다.
	fileEnc.setEncryptor(enc);
	
	
생성자 방식과 프로퍼티 방식의 장점이 다른 방식의 단점이 되기도 한다. 즉, 생성자 방식에서는 생성자에 전달되는 파라미터의 이름만으로는 실제 타입을 알아내기 힘들고,
생성자에 전달되는 파라미터의 개수가 증가할수록 코드 가독성이 떨어지는 단점이 있다.
반대로 프로퍼티 설정 방식에서는 객체를 생성한 뒤에 의존 객체가 모두 설정되었다고 보장할 수 없어서 사용가능하지 않은 상태일 수도 있다.

[어느 방식이 더 좋은지는 취향 문제이므로 필요에 따라 한쪽을 쓰거나 섞어 쓸 수 있다.]


	1.5	스프링은 객체를 생성하고 연결해주는 DI 컨테이너
	
지금까지 DI가 무엇인지, 조립기가 무엇인지, 그리고 DI를 위한 두 가지 방식인 생성자 방식과 프로퍼티 설정 방식을 살펴봤다. 그러면, 스프링은 DI와 무슨 관계가 있을까?
스프링을 떠받치고 있는 핵심 기능 중의 하나가 바로 DI다. 스프링은 객체를 생성하고 각 객체를 연결해주는 조립기 역할을 하게 된다.
앞서 1장에서한 스프링 예제를 다시 살펴보자.


	String configLocation = "classpath:applicationContext.xml";
	AbstractApplicationContext ctx = 
			new GenericXmlApplicationContext(configLocation);
	Project project = ctx.getBean("sampleProject", Project.class);
	project.build();
	ctx.close();
	
	
여기서 GenericXmlApplicationContext가 조립기 기능을 구현한 클래스다. 조립기에서 생성자 객체가 무엇인고, 각 객체를 어떻게 연결하는지에 대한 정보는 XML 파일에 정의되어 있다.
GenericXmlApplicationContext 클래스는 이 XML 파일에 정의된 설정 정보를 읽어와 객체를 생성하고 각각의 객체를 연결한 뒤에 내부적으로 보관한다.
이렇게 생성한 객체를 보관하기 때문에 스프링을 객체 컨테이너(Object Container)라고도 부른다.

XML을 이용한 스프링 설정을 보면 컨테이너가 생성할 객체를 지정하기 위해 <bean> 태그를 사용하는데, 이 이름에서 알 수 있듯이 스프링 컨테이너가 생성해서 보관하는 객체를 스프링 빈(Spring Bean) 객체라고 부른다.
물론, 스프링 빈 객체라고 해서 특별한 객체는 아니고 일반적인 자바 객체와 동일하다.

스프링 컨테이너는 생성한 빈 객체를 <이름, 빈 객체> 쌍으로 보관한다. 스프링 컨테이너가 보관하고 있는 객체를 사용하고 싶을 경우,
빈 객체와 연결된 이름을 이용해서 객체를 참조하게 된다. 1장의 예제 커드에서 getBean() 메소드를 사용할 때 첫 번째 파라미터로 문자열을 전달했는데 이 문자열이 스프링 빈의 이름에 해당한다.


	AbstractApplicationContext ctx = 
				new GenericXmlApplicationContext(configLocation);
	Project project = ctx.getBean("sampleProject", Project.class);