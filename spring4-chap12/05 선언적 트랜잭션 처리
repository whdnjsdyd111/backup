선언적 트랜잭션(Declarative Transaction)은  TransactionTemplate와 달리 트랜잭션 처리를 코드에서 직접 수행하지 않고,
설정 파일이나 어노테이션을 이용해서 트랜잭션의 범위, 롤백 규칙 등을 정의하게 된다. 선언적 트랜잭션은 담으과 같은 두 가지 방식으로 정의할 수 있다.

	- <tx:advice> 태그를 이용한 트랜잭션 처리
	- @Transactional 어노테이션을 이용한 트랜잭션 설정
	
이 두 가지 트랜잭션 설정 방법에 대해 차례대로 살펴보도록 하자.


	5.1 tx 네임스페이스를 이용한 트랜잭션 설정
	
<tx:advice> 태그를 이용해서 트랜잭션 속성을 정의하기 위해서는 먼저 tx 네임스페이스를 추가해주어야 한다.
tx 네임스페이스를 <beans> 태그에 추가한 뒤, <tx:advice> 태그, <tx:attributes> 태그, 그리고 <tx:method> 태그를 이용해서 트랜잭션 속성을 정의할 수 있다.


	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:aop="http://www.springframework.org/schema/aop" 
		xmlns:tx="http://www.springframework.org/schema/tx" 
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans   
	       http://www.springframework.org/schema/beans/spring-beans.xsd
	       http://www.springframework.org/schema/aop
	       http://www.springframework.org/schema/aop/spring-aop.xsd
	       http://www.springframework.org/schema/tx
	       http://www.springframework.org/schema/tx/spring-tx.xsd">
	       
		<bean id="transactionManager"
			class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
			p:dataSource-ref="dataSource" />
		
		<tx:advice id="txAdvice" transaction-manager="transactionManager">
			<tx:attributes>
				<tx:method name="order" propagation="REQUIRED" />
				<tx:method name="get* read-only="true" />
			</tx:attributes>
		</tx:advice>
		...
	</beans>
	
	
먼저, <tx:advice> 태그는 트랜잭션을 적용할 때 사용될 Advisor를 생성한다. id 속성은 생성될 트랜잭션 Advisor의 식별 값을 입력하며, 
transaction-manager 속성에는 스프링의 PlatformTransactionManager 빈을 설정한다.

<tx:method> 태그는 <tx:attributes> 태그의 자식 태그로 설정하며, 트랜잭션을 적용할 메소드 및 트랜잭션 속성을 설정한다.
<tx:method>의 속성은 다음과 같다.


	속성 이름			설명
	
	name			트랜잭션이 적용될 메소드 이름을 명시한다. '*'을 사용한 설정이 가능하다. 예를 들어, 'get*'으로 설정할 경우 이름이 get으로 시작하는 메소드를 의미한다.
	
	propagation		트랜잭션 전파 규칙을 설정한다. REQUIRED(기본값), MANDATORY, REQUIRES_NEW, SUPPORTS, NOT_SUPPORTED, NEVER, NESTED를 값으로 갖는다.
		
	isolaction		트랜잭션 격리 레벨을 설정한다. DEFAULT, READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE을 값으로 갖는다.
	
	read-only		읽기 전용 여부를 설정한다.
	
	no-rollback-for	트랜잭션을 롤백하지 않을 익셉션 타입을 지정한다.
	
	rollback-for	트랜잭션을 롤백할 익셉션 타입을 지정한다.
	
	timeout			트랜잭션의 타임아웃 시간ㅇ늘 초 단위로 지정한다.
	
	
<tx:advice> 태그는 Advisor만 생성하는 것이다. 실제로 트랜잭션을 적용하는 것은 아니다. 실제로 트랜잭션을 적용하는 것은 AOP를 통해서 이루어 진다.
아래 코드는 설정 예이다.


	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="order" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut id="servicePublicMethod"
			expression="execution(public * net.madvirus.spring4..*Service.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="servicePublicMethod" />
	</aop:config>
		
		
위 코드는 <aop:config> 태그를 이용해서 net.madvirus.spring4 패키지의 하위 패키지에 있는 *Service의 public 메소드에 
<tx:advice>로 설정한 트랜잭션 Advisor를 적용하도록 설정하고 있다. <tx:method> 태그에서 이름이 "order"인 메소드에 대해 트랜잭션을 적용하도록 설정했으므로,
실제로는 *Service의 public 메소드 중에서 order 메소드를 호출할 때에 트랜잭션이 적용된다.

	(1) <tx:method> 태그의 rollback-for 속성과 no-rollback-for 속성을 통한 롤백 처리
	
스프링 트랜잭션은 기본적으로 RuntimeException 및 Error에 대해서만 롤백 처리를 수행한다.
따라서, Throwable이나 Exception 타입의 익셉션이 발생하더라도 롤백되지 않고, 익셉션이 발생하기 전까지의 작업이 커밋된다.

익셉션 발생 시 트랜잭션의 롤백 규칙을 좀 더 정교하게 정의하고 싶다면 rollback-for 속성과 no-rollback-for 속성을 사용하면 된다.
rollback-for 속성은 익셉션 발생 시 롤백 작업을 수행할 익셉션 타입을 설정하며, no-rollback-for 속성은 익셉션이 발생하더라도 롤백하지 않을 익셉션 타입을 설정한다.

명시할 익셉션 타입이 한 개 이상인 경우 각각의 익셉션은 콤바로 구분한다.
익셉션 클래스는 완전한 이름을 입력하거나 또는 패키지 이름을 제외한 클래스 이름만 입력해도 된다.

Exception 및 하위 타입의 익셉션이 발생할 경우 롤백 작업을 수행하고, MemberNotFountException이 발생하는 경우에는 롤백 작업을 수행하지 않는다고 하자.
이 경우 다음과 같이 설정할 수 있다.


	<tx:method name="regist"
			rollback-for="Exception" no-rollback-for="MemberNotFoundException" />
			
			
스프링은 익셉션 발생 시 좀더 정확하게 일치하는 타입을 기준으로 롤백 규칙을 적용한다.
따라서, MemberNotFoundException이 Exception 클래스를 상속받았다고 하더라도 MemberNotFoundException이 발생하면 롤백을 수행하지 않게 된다.


	5.2 어노테이션 기반 트랜잭션 설정
	
@Transactional 어노테이션을 사용해서 트랜잭션을 설정할 수도 있다. @Transactional 어노테이션은 다음 코드와 같이 메소드나 클래스에 적용되며 관련 트랜잭션 속성을 설정한다.


	import org.springframework.transaction.annotation.Transactional;
	
	public class PlaceOrderServiceAnnotImpl implements PlaceOrderService {
	
		...
		
		@Override
		@Transactional
		public PurchaseOrderResult order(PurchaseOrderRequest orderRequest)
				throws ItemNotFoundException {
			Item item = itemDao.findById(orderRequest.getItemId());
			if (item == null)
				throw new ItemNotFoundException(orderRequest.getItemId());
	
			PaymentInfo paymentInfo = new PaymentInfo(item.getPrice());
			paymentInfoDao.insert(paymentInfo);
	
			PurchaseOrder order = new PurchaseOrder(item.getId(), orderRequest
					.getAddress(), paymentInfo.getId());
			purchaseOrderDao.insert(order);
	
			return new PurchaseOrderResult(item, paymentInfo, order);
		}
	
	}
	
	
@Transactional 어노테이션은 propagation 속성을 비롯하여 다음에 표시한 속성을 이용해서 트랜잭션 속성을 정의한다.


	속성				설명
	
	propagation		트랜잭션 전파 규칙을 설정한다. o.s.transaction.annotation.Propagation 열거 타입에 값이 정의되어 있다. 기본값은 Propagation.REQUIRED다.
	
	isolation		트래잭션 격리 레벨을 설정한다 o.s.transaction.annotation.Isolation 열거형 타입에 값이 정의되어 있다.
	
	readOnly		읽기 전용 여부를 설정한다. boolean 값을 설정하며, 기본값은 false이다.
	
	rollbackFor		트랜잭션을 롤백할 익셉션 타입을 설정한다. 예, rollbackFor={Exception.class}
	
	noRollbackFor	트랜잭션을 롤백하지 않을 익셉션 타입을 설정한다. 예, noRollbackFor={ItemNotFoundException.class}
	
	timeout			트랜잭션의 타임아웃 시간을 초 단위로 설정한다.
	

@Transactional 어노테이션이 적용된 스프링 빈에 트랜잭션을 실제로 적용하려면 다음과 같이 <tx:annotation-driven> 태그를 설정해주어야 한다.


	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<bean id="placeOrderService"
			class="madvirus.spring.chap09.store.domain.PlaceOrderServiceAnnotImpl"
			... />
			
			
<tx:annotation-driven> 태그가 제공하는 속성은 다음과 같다.


	속성						설명														기본값
	
	transaction-manager		사용할 PlatformTransaction Manager 빈의 이름					transactionManager
	
	proxy-target-class		클래스에 대해서 프록시를 생성할 지의 여부. true일 경우 CGLIB를 이용해서		false
							프록시를 생성하며, false인 경우 자바 다이나믹 프록시를 이용해서 프록시를 생성한다.
	
	order					Advice 적용 순서											int의 최댓값(가장 낮은 순위)
	
	
자바 코드 설정을 사용한다면 @EnableTransactionManagement 클래스를 이용해서 @Transactional 어노테이션을 적용할 수 있다.


	import org.springframework.transaction.annotation.EnableTransactionManagement;
	
	@Configuration
	@EnableTransactionManagement
	@ImportResource("classpath:dataSource.xml")
	public class Config {
	
		@AutoWired
		private DataSource dataSource;
		
		@Override
		public PlatformTransactionManager annotationDrivenTransactionManager() {
			DataSourceTransactionManager txMgr = new DataSourceTransactionManager();
			txMgr.setDataSource(dataSource());
			return txMgr;
		}
		
		@Bean
		public PlaceOrderService placeOrderService() {
			PlaceOrderServiceAnnotImpl svc = new PlaceOrderServiceAnnotImpl();
			svc.setItemDao(itemDao());
			svc.setPaymentInfoDao(paymentInformationDao());
			svc.setPurchaseOrderDao(purchaseOrderDao());
			return svc;
		}
		
		
@EnableTransactionManagement 어노테이션과 <tx:annotation-driven> 태그와의 차이점이 있다면, <tx:annotation-driven> 태그는 사용할
PlatformTransactionManager 빈의 이름을 지정하는 반면에 @EnableTransactionManagement 어노테이션은
PlatformTransactionManager 타입의 빈을 PlatformTransactionManager로 사용한다는 점이다.

만약 @EnableTransactionManagement 어노테이션을 이용할 때, 사용할 PlatformTransactionManager를 직접 지정하고 싶다면
TransactionManagementConfigurer 인터페이스를 상속받은 자바 설정 코드를 구현해주어야 한다.
다음은 이 인터페이스의 사용 예이다.


import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.transaction.annotation.TransactionManagementConfigurer;

@Configuration
@EnableTransactionManagement
public class Config implements TransactionManagementConfigurer {

	@Override
	@Bean
	public PlatformTransactionManager annotationDrivenTransactionManager() {
		DataSourceTransactionManager txMgr = new DataSourceTransactionManager();
		txMgr.setDataSource(dataSource());
		return txMgr;
	}

	@Bean(destroyMethod = "close")
	public DataSource dataSource() {
		ComboPooledDataSource ds = new ComboPooledDataSource();
		
		try {
			ds.setDriverClass("com.mysql.jdbc.Driver");
		} catch (PropertyVetoException e) {
			throws new RuntimeException(e);
		}
		...
		return ds;
	}

	
위 코드에서 annotationDrivenTransactionManager()는 TransactionManagerConfigurer 인터페이스에 정의되어 있는 메소드로서,
TransactionManagerConfigurer 타입을 가진 @Configuration 설정 클래스의 annotationDrivenTransactionManager() 메소드가 생성한
PlatformTransactionManager 빈을 트랜잭션 관리자로 사용한다.

@EnableTransactionManagement 어노테이션은 다음의 속성을 갖는다.


	속성					설명
	
	proxyTargetClass	클래스를 이용해서 프록시를 생성할지 여부를 지정한다. 기본값은 false로서 인터페이스를 이용해서 프록시를 생성한다.
	
	order				AOP 적용 순서를 지정한다. 기본 값은 가장 낮은 우선순위에 해당하는 int의 최대값이다.
	
	
	(1) 트랜잭션 관리자 지정하기
	
한 개의 어플리케이션에서 두 개 이상의 DB를 사용할 때가 있다. 예를 들어, 회원 관리 기능과 주문 관리 기능을 하나의 웹 어플리케이션에서 제공하는데,
회원 DB와 주문 DB가 분리되어 있다고 해보자. 만약 두 개의 DB에 동시에 변경을 가할 일이 없다면 글로벌 트랜잭션을 사용할 필요 없으며, 이 경우 각 DB 별로 트랜잭션 관리자를 따로 지정하는 것이
성능면에서 유리하다. 예를 들면 다음과 같이 DataSource별로 PlatformTransactionManager를 지정할 수 있을 것이다.

	<bean id="memTxMgr"
		class="org.springframeowork.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="memDataSource" />
	</bean>
	
	<bean id="orderTxMgr"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="orderDataSource" />
	</bean>
	
	<tx:annotation-driven transaction-manager="memTxMgr" />
	
	
위 코드의 경우 <tx:annotation-driven> 태그의 transaction-manager 속성 값으로 "memTxMgr" 빈을 지정했다.
따라서, @Transactional 어노테이션을 만나면, memTxMgr이 관리하는 트랜잭션 범위 내에서 코드를 실행하게 된다.
여기서 문제는 orderTxMgr이 관리하는 트랜잭션 범위 내에서 동작해야 하는 코드에서 @Transactional을 사용하면, orderTxMgr이 아닌 memTxMgr이 관리하는 트랜잭션 범위 내에서
동작하게 된다는 것이다.

이처럼 PlatformTransactionManager를 두 개 이상 정의한 상태에서 코드에 따라 @Transactional 어노테이션이 속할 트랜잭션 범위를 다르게 설정하려면,
@Transactional 어노테이션의 value 속성 값으로 사용할 PlatformTransactionManager 빈의 이름을 지정하면 된다.


	@Transactional(value="orderTxMgr")
	public PurchaseOrderResult order(PurchaseOrderRequest orderRequest)
		throws ItemNotFoundException {
		...
	}
	
	
빈 이름 대신 한정자(qualifier)를 이용해도 된다.


	<bean id="orderTxMgr"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
		<qualifier value="orderTx" />
	</bean>
	
	
위 코드처럼 한정자 값을 "orderTx"로 지정했다면, @Transactional 어노테이션에서 "orderTx"를 값으로 사용해서 orderTxMgr을 트랜잭션 관리자로 사용할 수 있다.


	5.3 트랜잭션과 프록시
	
선언적 트랜잭션은 스프링의 AOP를 이용하고 있다. @Transactional이나 tx 네임스페이스를 이용하면, 트랜잭션을 처리하기 위해 빈 객체에 대한 프록시 객체를 생성한다.
이 프록시 객체는 PlatformTransactionManager를 이용해서 트랜잭션을 시작한 뒤에, 실제 객체의 메소드를 호출하고, 
그 다음에 PlatformTransactionManager을 이용해서 트랜잭션을 커밋한다. 이 일련의 과정은 다음과 같다.


	내 코드					     프록시					    실제 객체			:PlatformTransactionManager
	ㅣ							ㅣ						ㅣ					ㅣ
	│ ─ 1: someMethod() ─────>	│						ㅣ					ㅣ
	│							│ ─ 1.1: getTransaction() ─────────────────>│
	│							│						ㅣ					ㅣ
	│							│ ─ 1.2: someMethod() ─>│					ㅣ
	│							│						ㅣ					ㅣ
	│							│ - 1.3: commit() ─────────────────────────>│
	│ <── 1.4: return ──────────│						ㅣ					ㅣ
	ㅣ							ㅣ						ㅣ					ㅣ
	
	
TransactionTemplate의 동작 방식(3.1의 그림)과 비교해보보면, TransactionTemplate이 처리하는 작업을 프록시가 대신 처리하는 것을 알 수 있다.

선언적 트랜잭션은 AOP를 사용하므로, 하나의 객체에 대해 두 개 이상의 프록시 객체가 생성될 수 있다. (예, 트랜잭션을 위한 프록시와 개발자가 직접 구현한 AOP 프록시) 
이때, 프록시가 실행되는 순서가 중요하다면, 원하는 순서로 프록시가 적용되도록 명시적으로 AOP 순서를 지정해야 한다.