	1.1 MailSender와 JavaMailSender를 이용한 메일 발송
		
스프링은 메일 발송 기능을 위한 MailSender 인터페이스를 제공하고 있으며, 다음과 같이 정의되어 있다.


	package org.springframework.mail;
	
	public interface MailSender {
		void send(SimpleMailMessage simpleMessage) throws MailException;
		void send(SimpleMailMessage[] simpleMessage) throws MailException;
	}
	
	
MailSender 인터페이스를 상속받은 JavaMailSender는 Java Mail API의 MimeMessage를 이용해서 메일을 발송하는 기능을 추가적으로 정의하고 있다.
JavaMailSender 인터페이스는 다음과 같이 정의되어 있다.


	package org.springframework.mail.javamail;
	
	import java.io.InputStream;
	import javax.mail.internet.MimeMessage;
	import org.springframework.MailException;
	import org.springframework.MailSender;
	
	public interface JavaMailSender extends MailSender {
		MimeMessage createMimeMessage();
		MimeMessage createMimeMessage(InputStream contentStream)
			throws MailException;
		void send(MimeMessage mimeMessage) throws MailException;
		void send(MimeMessage[] mimeMessage) throws MailException;
		void send(MimeMessagePreparator mimeMessagePreparator) throws MailException;
		void send(MimeMessagePreparator[] mimeMessagePreparator) throws MailException;
	}
	
	
MailSender 인터페이스와 JavaMailSender 인터페이스의 메소드들이 발생하는 MailException은 RuntimeException이므로, 익셉션 처리가 필요한 경우에만 catch 블록에서 처리해주면 된다.

스프링은 JavaMailSender 인터페이스의 구현체로 JavaMailSenderImpl 클래스를 제공하고 있으므로, 이 클래스를 이용해서 빈 설정을 하게 된다.

	(1) JavaMailSender 빈 설정
	
JavaMailSender를 이용하려면 먼저 메이븐 설정에 다음의 의존을 추가해야 한다.


	<dependencies>
		<!-- 메일 발송 지원 기능 포함 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>4.0.4.RELEASE</version>
		</dependency>
		<!-- Java Mail API -->
		<dependency>
			<groupId>javax.mail</groupId>
			<artifactId>mail</artifactId>
			<version>1.4.7</version>
		</dependency>
	</dependencies>
	
	
JavaMailSenderImpl 클래스는 Java Mail API를 이용해서 메일을 발송하며 기본적으로 SMTP 프로토콜을 사용한다.
SMTP 서버를 이용해서 메일을 발송하므로 SMTP 서버 주소와 포트 번호를 필요로 한다. 이 두 정보는 각각 host 프로퍼티와 port 프로퍼티를 이용해서 입력 받는다.


	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="mail.host.com" />
		<property name="port" value="25" />
		<property name="defaultEncoding" value="utf-8" />
	</bean>

	<bean id="simpleNotifier" class="...">
		<property name="mailSender" ref="mailSender" />
	</bean>
	
	
port 프로퍼티의 기본 값은 25이므로, 포트 번호가 25가 아닌 경우에만 port 속성을 설정하면 된다. defaultEncoding 프로퍼티는 발송된 메일의 기본 인코딩을 설정한다.
JavaMailSenderImpl은 내부적으로 Java Mail API의 MimeMessage를 이용하기 때문에, 인코딩을 지정하지 않은 SimpleMailMessage를 이용할 경우에
defaultEncoding 프로퍼티의 속성 값을 알맞게 입력해주는 것이 좋다.

만약, SMTP 서버에서 인증을 필요로 한다면 다음과 같이 username 프로퍼티와 password 프로퍼티를 이용해서 인증에 사용되는 정보를 입력한다.


	<bean id="mailSender" 
		class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="localhost" />
		<property name="port" value="25" />
		<property name="username" value="system" />
		<property name="password" value="syspass" />
		<property name="defaultEncoding" value="utf-8" />
	</bean>
	
	
	(2) SimpleMailMessage를 이용한 메일 발송
	
단순히 텍스트로만 구성된 메일 메시지를 생성할 때에는 SimpleMailMessage를 이용한다. 메일 내용을 구성하는데 사용되는 SimpleMailMessage의 메소드는 다음과 같다.


	메소드						설명
	
	getFrom(String from)		발신자 설정
	setReplyTo(String replyTo)	응답 주소 설정
	setTo(String to)			수신자 설정
	setTo(String[] to)			수신자 목록 설정
	setCc(String cc)			참조자 설정
	setCc(String[] cc)			참조자 목록 설정
	setBcc(String bcc)			숨은 참조자 설정
	setBcc(String[] bcc)		숨은 참조자 목록 설정
	setSentDate(Date sentDate)	메일 발송일 설정
	setSubject(String subject)	메일 제목(주제) 설정
	setText(String text)		메일 내용 설정
	

아래 코드는 SimpleMailMessage를 이용해서 메일 메시지를 생성한 뒤 MailSender를 이용해서 메일을 발송하는 예제 코드이다.


	import org.springframework.mail.MailException;
	import org.springframework.mail.MailSender;
	import org.springframework.mail.SimpleMailMessage;
	
	public class SimpleRegisterationNotifier implements RegistrationNotifier {
		
		private MailSender mailSender;
		
		public void setMailSender(MailSender mailSender) {
			this.mailSender = mailSender;
		}
		
		@Override
		public void sendMail(Member member) {
			SimpleMailMessage message = new SimpleMailMessage();
			message.setSubject("[Simple] 회원 가입 안내");
			message.setFrom("no-reply@madvirus.net");
			message.setText("회원 가입을 환영합니다.");
			message.setTo(member.getEmail());
			try {
				mailSender.send(message);
			} catch (MailException ex) {
				ex.printStackTrace();	// 알맞게 익셉션 처리
			}
			
		}
	}
	
	
	(3) SimpleMailMessage의 재사용
	
SimpleMailMessage 클래스는 다른 SimpleMailMessage 클래스로부터 내용을 복사해서 사용하는 기능을 제공하고 있다.
아래 코드와 같이 생성자를 통해 SimpleMailMessage 객체를 전달하면, 설정 정보를 모두 복사한다.


	SimpleMailMessage anotherMailMessage = new SimpleMailMessage();
	anotherMailMessage.setFrom(...);
	...
	SimpleMailMessage message = new SimpleMailMessage(anotherMailMessage);
	
	
이 기능을 이용하면 SimpleMailMessage를 스프링 설정 파일에서 설정하고 필요로 하는 빈에서 재사용할 수 있게 된다.
아래 코드는 설정 예를 보여주고 있다.


	<bean id="templateMailMessage" class="org.springframework.mail.SimpleMailMessage">
		<property name="from" value="no-reply@madvirus.net" />
		<property name="subject" value="[템플릿]회원 가입 안내" />
		<property name="text" value="[템플릿] 회원 가입을 환영합니다." />
	</bean>

	<bean id="simpleNotifier2"
		class="net.madvirus.spring4.chap17.mail.SimpleRegistrationNotifier2">
		<property name="mailSender" ref="mailSender" />
		<property name="templateMailMessage" ref="templateMailMessage" />
	</bean>
	
	
templateMailMessage 빈을 전달받은 클래스에서는 templateMailMessage 객체를 이용해서 SimpleMailMessage 객체를 생성하고 추가적으로 필요한 정보만 설정하면 되므로
메일 메시지를 생성하는 코드가 좀 더 간단해진다. 다음 코드는 재사용의 예를 보여주고 있다.


	public class SimpleRegistrationNotifier2 implements RegistrationNotifier {
	
		private MailSender mailSender;
		private SimpleMailMessage templateMailMessage;
	
		public void setMailSender(MailSender mailSender) {
			this.mailSender = mailSender;
		}
	
		public void setTemplateMailMessage(SimpleMailMessage templateMailMessage) {
			this.templateMailMessage = templateMailMessage;
		}
	
		@Override
		public void sendMail(Member member) {
			SimpleMailMessage message = new SimpleMailMessage(templateMailMessage);
			message.setTo(member.getEmail());	// 나머지 값은 템플릿의 값을 그대로 사용
			try {
				mailSender.send(message);
			} catch (MailException ex) {
				ex.printStackTrace();	// 실제는 알맞게 익셉션 처리
			}
	
		}
	}
	
	
	(4) Java Mail API의 MimeMessage를 이용한 메시지 생성
	
SimpleMailMessage는 단순히 텍스트 기반의 메시지를 발송하는 데에는 적합하지만, 메일 내용이 HTML로 구성되어 있다던가, 파일을 첨부해야 하는 경우에는 사용할 수 없다.
이런 기능이 필요할 경우에는 Java Mail API가 제공하는 MimeMessage를 직접 사용해서 메일을 발송해주어야 한다.

JavaMailSender 인터페이스는 MimeMessage 객체를 생성해주는 createMimeMessage() 메소드를 제공하고 있으며, 이 메소드가 리턴한 MimeMessage 객체를 이용해서
메시지를 구성한 뒤 메일을 발송하면 된다. 다음은 MimeMessage를 이용해서 메일 메시지를 구성한 뒤 JavaMailSender를 이용해서 메일을 발송하는 예제 코드이다.


	import javax.mail.Message.RecipientType;
	import javax.mail.MessagingException;
	import javax.mail.internet.InternetAddress;
	import javax.mail.internet.MimeMessage;
	
	import org.springframework.mail.MailException;
	import org.springframework.mail.javamail.javaMailSender;
	
	public class MimeRegistrationNotifier implements RegistrationNotifier {
	
		private JavaMailSender mailSender;
		
		public void setMailSender(JavaMailSender mailSender) {
			this.mailSender = mailSender;
		}
		
		@Override
		public void sendMail(Member member) {
			MimeMessage message = mailSender.createMimeMessage();
			
			try {
				message.setSubject("[Mime] 회원 가입 안내", "utf-8");
				String htmlContent = "<strong>안녕하세요</strong>, 반갑습니다.";
				message.setText(htmlContent, "utf-8", "html");
				message.setFrom(new InternetAddress("no-reply@madvirus.net"));
				message.addRecipient(
						RecipientType.TO, new InternetAddress(member.getEmail()));
			} catch (MessagingException e) {
				// 실제로 익셉션 발생 내지 로그 남김
				e.printStackTrace();
				return;
			}
			try {
				mailSender.send(message);
			} catch (MailException e) {
				// 실제로 익셉션 발생 내지 로그 남김
				e.printStackTrace();
			}
		}
	}
	
	
	1.2 MimeMessageHelper를 이용한 파일 첨부
	
Java Mail API의 MimeMessage를 이용하면 파일을 첨부할 수 있긴 하지만, 처리해주어야 할 코드가 많기 때문에 꽤 성가신데,
스프링이 제공하는 MimeMessageHelper 클래스를 사용하면 파일 첨부를 비교적 간단한 코드로 처리할 수 있다.

MimeMessageHelper 클래스는 MimeMessage 클래스를 직접 사용하지 않고 MimeMessageHelper 클래스가 제공하는 기능을 이용해서 메일 메시지를 생성할 수 있도록 돕는 클래스다.
MimeMessageHelper 클래스는 setSubject(), setTo(), setFrom(), setText() 등의 메소드를 제공하고 있어 메일 내용을 구성할 수 있으며,
addAttachment() 메소드를 사용해서 파일을 첨부할 수 있다.

	(1) MimeMessageHelper를 이용한 첨부 파일 추가

다음 코드는 MimeMessageHelper 클래스를 이용하여 파일 첨부된 메일을 발송하는 방법을 보여 주고 있다.


	package net.madvirus.spring4.chap17.mail;
	
	import javax.activation.DataSource;
	import javax.activation.FileDataSource;
	import javax.mail.internet.InternetAddress;
	import javax.mail.internet.MimeMessage;
	import javax.mail.internet.MimeUtility;
	
	import org.springframework.mail.MailException;
	import org.springframework.mail.javamail.JavaMailSender;
	import org.springframework.mail.javamail.MimeMessageHelper;
	
	public class MimeAttachmentNotifier implements RegistrationNotifier {
	
		private JavaMailSender mailSender;
	
		public void setMailSender(JavaMailSender mailSender) {
			this.mailSender = mailSender;
		}
	
		@Override
		public void sendMail(Member member) {
			MimeMessage message = mailSender.createMimeMessage();
			try {
				MimeMessageHelper messageHelper = 
						new MimeMessageHelper(message, true, "utf-8");
				messageHelper.setSubject("회원 가입 안내 [Attachemtn]");
				String htmlContent = "<strong>안녕하세요</strong>, 반갑습니다.";
				messageHelper.setText(htmlContent, true);
				messageHelper.setFrom("no-reply@madvirus.net", "운영자");
				messageHelper.setTo(new InternetAddress(member.getEmail(), "utf-8"));
	
				DataSource dataSource = new FileDataSource("안내문.docx");
				messageHelper.addAttachment(
						MimeUtility.encodeText("안내문.docx", "utf-8", "B"), dataSource);
				mailSender.send(message);
			} catch (Throwable e) {
				e.printStackTrace();	// 실제로는 알맞게 익셉션 처리
			}
		}
	
	}
	
	
MimeMessageHelper 객체를 생성할 때에는 메일 메시지를 구성할 때 사용되는 MimeMessage 객체를 전달한다.
MimeMessageHelper 생성자의 두 번째 파라미터는 MultiPart 여부를 설정하며 true로 지정해야 첨부 파일을 추가할 수 있다.


	MimeMessage message = mailSender.createMimeMessage();
	MimeMessageHelper messageHelper = new MimeMessageHelper(message, 
			true /* MultiPart 여부 */, "utf-8");
			
			
파일 첨부를 하기 위해서는 먼저 파일 정보를 제공할 javax.activation.DataSource를 생성해주어야 한다.
Activation API는 파일을 데이터로 사용하는 FileDataSource 클래스를 제공하고 있으므로 이 클래스를 사용하면 파일을 메일에 첨부할 수 있다.

FileDataSource를 만들었다면 MimeMessageHelper.addAttachment() 메소드를 이용해서 파일을 첨부한다.

	
	DataSource dataSource = new FileDataSource("c:\\안내문.doc");
	messageHelper.addAttachment(MimeUtility.encodeText("안내문.doc", "utf-8", "B"), dataSource);
	
	
[위 코드에서 MimeUtility 클래스는 Java Mail API에서 제공하는 클래스로서 ASCII 이외의 문자로 구성된 문장을 알맞게 인코딩할 때 사용된다.]

MimeMessageHelper가 생성한 메일 메시지는 생성자를 통해 전달받은 MimeMessage 객체에 전달되므로, MimeMessageHelper로 메일 내용을 구성한 후에는 
JavaMailSender의 send() 메소드에 MimeMessage 객체를 전달해서 메일을 발송하면 된다.

	(2) MimeMessageHelper를 이용한 인라인 자원 추가
	

	package net.madvirus.spring4.chap17.mail;

	import javax.activation.FileDataSource;
	import javax.mail.internet.InternetAddress;
	import javax.mail.internet.MimeMessage;
	
	import org.springframework.mail.MailException;
	import org.springframework.mail.javamail.JavaMailSender;
	import org.springframework.mail.javamail.MimeMessageHelper;
	
	public class MimeInlineNotifier implements RegistrationNotifier {
	
		private JavaMailSender mailSender;
	
		public void setMailSender(JavaMailSender mailSender) {
			this.mailSender = mailSender;
		}
	
		@Override
		public void sendMail(Member member) {
			MimeMessage message = mailSender.createMimeMessage();
			try {
				MimeMessageHelper messageHelper = 
						new MimeMessageHelper(message, true, "utf-8");
				messageHelper.setSubject("[Inline] 회원 가입 안내");
				String htmlContent = "<strong>안녕하세요</strong>, 반갑습니다."
	                    + "<img src='cid:signature' />";
				messageHelper.setText(htmlContent, true);
				messageHelper.setFrom("no-reply@madvirus.net", "운영자");
				messageHelper.setTo(new InternetAddress(member.getEmail(), "utf-8"));
	
				messageHelper.addInline("signature", new FileDataSource("sign.jpg"));
				mailSender.send(message);
			} catch (Exception e) {
				e.printStackTrace();
			}
	
		}
	
	}