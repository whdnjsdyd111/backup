HTTP 기반의 오픈 API가 증가하고, 내부 서비스 간에도 HTTP를 기반으로 통신하는 경우가 증가하고 있다. 이런 이유로 HTTP에 기반한 클라이언트 코드를 작성해야 할 때가 많은데,
스프링은 HTTP 클라이언트를 구현하는데 필요한 기능을 구현한 RestTemplate 클래스를 제공하고 있다.

	
	3.1 RestTemplate의 기본 사용법
	
o.s.web.client.RestTemplate 클래스의 사용방법은 매우 간단하다. 다음과 같이 RestTemplate 객체를 생성하고 필요한 방식으로 접근하는 메소드를 사용해서 결과를 받기만 하면 된다.


	RestTemplate restTemplate = new RestTemplate();
	String body = restTemplate.getForObject("http://www.daum.get", String class);
	
	
getForObject() 메소드는 HTTP GET 방식으로 http://www.daum.net 에 연결해서 응답 결과를 String 타입으로 구한다.
String 타입 외에 HttpMessageConverter를 사용하면 JSON이나 XML 응답을 바로 자바 객체로 변환할 수 있는데,
이에 대한 내용은 뒤에서 다시 살펴볼 것이다.

getForObject() 에서 get은 HTTP GET 방식(method)을 의미하는 것으로, postForObject(), put(), delete(), headForHeaders() 등
각 HTTP 방식별로 메소드가 존재한다.

RESTful 방식의 API는 URL이 "http://host/stores/스토어ID/items/아이템ID"와 같이 자원을 중심으로 경로를 구성하는데,
RestTemplate는 이런 구조의 URL을 좀 더 쉽게 구성할 수 있도록 경로 변수를 사용할 수 있는 메소드를 함께 제공하고 있다.


	String response = restTemplate.getForObject(
			"http://localhost:8080/spring4-chap17-s/stores/{storeId}", String.class, "1");
			
			
위 코드는 경로 변수 storeId의 값으로 "1" 이 사용되어 실제 사용하는 URL은 "http://localhost:8080/spring4-chap17-s/store/1"이 된다.
경로 변수를 두 개 이상 사용할 수 있으며, 이 경우 각 경로 변수의 위치에 해당하는 인자가 경로 변수의 값으로 사용된다.(위 메소드의 마지막 인자는 가변인자이다.)


	String response = restTemplate.getForObject(
			"http://localhost:8080/spring4-chap17-s/stores/{storeId}/items/{itemId}", 
			String.class, "1", "I100");
			
			
다음과 같이 가변인자 대신 Map을 사용해서 경로 변수의 값을 지정할 수도 있다.


	Map<String, Object> pathVariableMap = new HashMap<>();
	pathVariableMap.put("storeId", 1L);
	
		String response = restTemplate.getForObject(
			"http://localhost:8080/spring4-chap17-s/stores/{storeId}", String.class, 
			pathVariableMap);
			
RestTemplate 객체를 매번 생성해서 사용할 수 있지만, 그것보다는 다음과 같이 필드로 설정해서 사용한다.


	public class ExternalServiceClient {
		// 보통 필드로 정의
		private RestTemplate restTemplate = new RestTemplate();
		
		public void sendOrder(Order order) {
			URI uri = restTemplate.postForObject(
				"http://localhost:8080/spring4-chap17-s/stores/{storeId}", store3);
			...
		}
	}
	
	
	(1) 서버 에러 응답 처리

RestTemplate은 서버와 통신하는 과정에서 문제가 발생하면 o.s.web.client.RestClientExeption을 발생시킨다.
상황별로 발생하는 RestClientExeption의 하위 타입은 다음과 같다.

	- HttpStatusCodeException : 응답 코드가 에러에 해당할 경우 발생한다.
		~ HttpClientErrorException : 응답 코드가 4XX일 때 발생한다.
		~ HttpServerErrorException : 응답 코드가 5XX일 때 발생한다.
	- ResourceAccesssException : 네트워크 연결에 문제가 있을 경우 발생한다.
	- UnknownHttpStatusCodeException : 알 수 없는 상태 코드일 때 발생한다.
	
서버에서 에러 응답이 온 경우를 처리하고 싶다면 다음과 같이 익셉션을 잡아야 한다.


	try {
		String response = restTemplate.getForObject(
				"http://localhost:8080/spring4-chap17-s/stores/{storeId}/items/{items}",
				String.class, "1", "I100");
		...
	} catch (HttpStatusCodeException e) {
		if(e.getStatusCode() == HttpStatus.NOT_FOUND) {
			... 알맞은 익셉션 처리
		}
	}
	

HttpStatusCodeException 및 그 하위 타입 두 개는 상태 코드를 구할 수 있도록 다음의 메소드를 제공하고 있다.

	- HttpStatus getStatusCode() : o.s.http.HttpStatus 열거 타입을 리턴한다.
	
UnknownHttpStatusCodeException 클래스가 제공하는 메소드는 다음과 같다.

	- int getRawStatusCode() : 서버에서 전송한 응답 코드를 구한다.
	
다음 메소드는 ResourceAccessException을 제외한 나머지 익셉션 타입이 동일하게 제공한다.

	- String getStatusText() : HTTP 상태 문자값을 리턴한다.
	- HttpHeaders getResponseHeaders() : 응답 헤더를 o.s.http.HttpHeader로 리턴한다
	- String getResponseBodyAsString() : 응답 몸체를 문자열로 구한다.
	
	
	3.2 RestTemplate의 주요 메소드 : GET, POST, PUT, DELETE 처리
	
RestTemplate 클래스는 각 HTTP 방식(method)별로 메소드를 제공하고 있는데, 이 중 GET 방식과 관련된 메소드는 다음과 같다.

	- T getForObject(String url, Class<T> responseType, Object... urlVariables)
	- T getForObject(String url, Class<T> responseType, Map<String, ?> urlVariables)
	- T getForObject(URI url, Class<T> responseType)
	- ResponseEntity<T> getForEntity(String url, Class<T> responseType, Object... urlVariables)
	- ResponseEntity<T> getForEntity(String url, Class<T> responseType, Map<String, ?> urlVariables)
	- ResponseEntity<T> getForEntity(URI url, Class<T> responseType)
	
각 파라미터는 다음과 같다.

	- String 타입 url 파라미터 : URL을 지정한다. 경로 변수를 포함할 수 있다.
	- URI 터입 url 파라미터 : URI를 이용해서 연결할 URL을 지정한다.
	- urlVariables : 경로 변수에 사용될 값을 지정한다.
	- responsesType : 응답 결과를 변환할 타입
	
getForObject() 메소드는 응답 결과를 responseType으로 지정한 타입으로 바로 변환해서 리턴하며, getForEntity() 메소드는 o.s.http.ResponseEntity 타입으로 리턴한다.
상태 코드나 헤더 등의 값에 접근해야 할 경우 ResponseEntity를 사용할 수 있다. ResponseEntity가 제공하는 주요 메소드는 다음과 같다.

	- HttpStatus getStatusCode() : 응답 상태 코드를 구한다.
	- HttpHeaders getHeaders() : 헤더 값을 구한다.
	- T getBody() : 몸체를 구한다.
	
다음은 객체와 ResponseEntity를 리턴받는 두 경우의 사용 예를 보여주고 있다.

	
	Store store1 = restTemplate.getForObject(
			"http://localhost:8080/spring4-chap17-s/stores/{storeId}", Store.class, "1");
	ResponseEntity<Store> response = restTemplate.getForEntity(
			"http://localhost:8080/spring4-chap17-s/stores/{storeId}", Store.class, "2");
	Store store2 = response.getBody();
	

POST 방식을 위한 메소드는 다음과 같다.
	
	- T postForObject(String url, Object request, Class<T> responseType, Object...uriVariables)
	- T postForObject(String url, Object request, Class<T> responseType, Map<String, ?> uriVariables)
	- T postForObject(UrI url, Object request, Class<T> responseType)
	- ResponseEntity<T> postForEntity(String url, Object request, Class<T> responseType, Object... uriVariables)
	- ResponseEntity<T> postForEntity(String url, Object request, Class<T> responseType, Map<String, ?> uriVariables)
	- ResponseEntity<T> postForEntity(UrI url, Object request, Class<T> responseType)
	- URI postForLocation(String url, Object request, Object... urlVariables)
	- URI postForLocation(String url, Object request, Map<String, ?> urlVariables)
	- URI postForLocation(UrI url, Object request)
	
request 파라미터는 요청 몸체로 전송되며, 나머지 파라미터는 GET의 경우와 동일하다.
postForObject()와 postForEntity()는 응답의 몸체 내용을 구할 때 사용되고, URI를 리턴하는 postForLocation() 메소드는
응답 결과로 응답의 Location 헤더 값을 구할 때 사용된다.

[RESTful 방식 API에서 POST는 새로운 데이터를 추가하는 목적으로 사용되는데, 이때 서버는 응답으로 새로 생성된 데이터에 접근할 수 있는 URL을 'Location' 응답 헤더에 담아 주는 경우가 많다.
이를 위해 RestTemplate은 postForLocation() 메소드를 추가로 제공하고 있다.]

PUT 방식을 위한 메소드는 다음과 같다. 이들 메소드는 리턴 타입이 모두 void다.

	- void put(String url, Object... urlVariables)
	- void put(String url, Map<String, ?> urlVariables)
	- void put(UrI url)
	
	
	3.3 HttpMessageConverter를 이용한 타입 변환
	
GET이나 POST를 위한 메소드는 몸체 내용을 특정 타입의 객체로 변환해서 리턴한다. 비슷하게 POST나 PUT을 위한 메소드는 메소드에 전달한 객체를 요청 몸체로 알맞게 변환한다.
예를 들어, 다음 코드에서 getForObject() 메소드는 JSON 형식의 응답 몸체 내용을 Store 타입의 객체로 변환해서 리턴하며, postForLocation() 메소드는
store3 객체를 JSON 형식의 요청 몸체로 변환해서 전송한다.


	Store store = restTemplate.getForObject(
		"http://localhost:8080/spring4-chap17-s/stores/{storeId}", Store.class, "1");
		
	Store store3 = new Store3("새로운 가게");
	URI uri = restTemplate.getForObject(
		"http://localhost:8080/spring4-chap17-s/stores", store3);
		
		
RestTemplate은 자바 객체와 요청/응답 몸체 사이의 변환 처리를 위해 9장에서 살펴본 HttpMessageConverter를 사용한다.
RestTemplate이 기본으로 사용하는 HttpMessageConverter는 다음과 같다.

	- ByteArrayHttpMessageConverter
	- StringHttpMessageConverter
	- ResourceHttpMessageConverter
	- SourceHttpMessageConverter<Source>
	- AllEncompassingFormHttpMessageConverter
	- AtomFeedHttpMessageConverter (Rome 라이브러리 존재시)
	- RssChannelHttpMessageConverter (Rome 라이브러리 존재시)
	- Jaxb2RootElementHttpMessageConverter
	- MappingJackson2HttpMessageConverter (Jackson2 라이브러리 존재시)
	
MappingJackson2HttpMessageConverter와 Jaxb2RootElementHttpMessageConverter가 기본으로 사용되기 때문에, JSON이나 XML 형식의 응답을 자바 객체로 받거나 반대의 경우
쉽게 처리할 수 있다.

만약 RestTemplate이 사용하는 MessageConverter 구현체 목록을 변경하고 싶다면, 다음의 메소드를 이용해서 교체하면 된다.

	- setMessageConverter(List<HttpMessageConverter<?>> messageConverters)
	
	
	3.4 exchange() 메소드를 이용한 요청 헤더 설정
	
요청 헤더를 직접 설정하고 싶다면 다음의 exchange() 메소드를 사용한다.

	- ResponseEntity<T> exchange(String url, HttpMethod method,
			HttpEntity<?> requestEntity, Class<T> responseType,
			Object... uriVariables)
			
	- ResponseEntity<T> exchange(String url, HttpMethod method,
			HttpEntity<?> requestEntity, Class<T> responseType,
			Map<String, ?> uriVariables)
			
	- ResponseEntity<T> exchange(URL url, HttpMethod method,
			HttpEntity<?> requestEntity, Class<T> responseType)
			
			
o.s.http.HttpMethod 열거 타입은 전송 방식을 정한다. 이 열거 타입에는 GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE의 값이 정의되어 있다.

o.s.http.HttpEntity는 요청 헤더와 요청 몸체를 설정할 때 사용되는 타입으로 주된 사용방법은 다음과 같다.

	
	// getForEntity의 기능을 exchange를 이용해서 구현한 코드
	HttpHeaders headers = new HttpHeaders();
	headers.add("AUTHKEY", "mykey");
	headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
	HttpEntity<Void> requestEntity = new HttpEntity<>((Void) null, headers);

	ResponseEntity<Item> itemResponse = restTemplate.exchange(
			"http://localhost:8080/spring4-chap17-s/stores/{storeId}/items/{itemId}", 
			HttpMethod.GET, requestEntity, Item.class, "1", "I100");
	Item item = itemResponse.getBody();
	System.out.println(item);

	// postForLocation을 exchage를 이용해서 구현한 코드
	HttpEntity<Store> requestEntity2 =
			new HttpEntity<>(new Store("새로운 가게 2"), headers);

	ResponseEntity<Void> postResponse = restTemplate.exchange(
			"http://localhost:8080/spring4-chap17-s/stores",
			HttpMethod.POST, requestEntity2, Void.class);
	URI newStoreUri = postResponse.getHeaders().getLocation();
	System.out.println(newStoreUri);
	
	
	3.5 URIBuilder를 이용한 URI 생성
	
RestTemplate 클래스는 java.net.URI 타입을 이용해서 연결할 URL을 지정하는 메소드를 함께 제공하고 있다. URI 객체를 직접 생성할 수도 있지만,
스프링이 제공하는 UriComponentsBuilder 클래스를 이용하면 경로 변수를 사용하는 URL을 포함한 URL 객체를 생성할 수 있다.
아래 코드는 작성 예이다.


	import org.springframework.web.util.UriComponentsBuilder;
	import org.springframework.web.util.UriComponents;
	...
	UriComponentsBuilder uriCompBuilder = UriComponentsBuilder.newInstance();
	UriComponentsBuilder uriComp = uriCompBuilder.scheme("http")
			.host("localhost")
			.port(8080)
			.path("/상점/{storeId}/items/{itemId}")
			.build();
	uriComp = uriComp.expand("1", "품001").encode();
	URI uri = uriComp.toUri();
	
	
UriComponentsBuilder 클래스는 scheme(), host(), port(), path() 메소드를 이용해서 URI를 구성할 수 있다.
port()나 path() 등을 지정하지 않으면 생성되는 URI에 포함되지 않는다. path()로 지정하는 값은 위 코드에서 보듯 경로 변수를 사용할 수 있다.

UriComponentsBuilder의 build() 메소드를 호출하면 UriComponents 객체를 생성한다.
UriComponents의 expand() 메소드는 경로 변수의 값을 설정할 때 사용된다. 위 코드처럼 가변 인자로 경로 변수의 각 값을 설정해도 되고, Map을 이용해서 설정해도 된다.

UriComponents의 encode() 메소드는 URI 각 구성 요소를 UTF-8 캐릭터셋을 이용해서 인코딩한다.
예를 들어, 위 코드의 경우 경로에 '상점', '품001'이 경로에 포함되는데, encode() 메소드를 실행하면 다음과 같은 URI를 생성한다.


	http://localhost:8080/%EC%83.../1/items/%ED%92%88001
	
	
encode() 메소드를 사용하지 않을 때 생성되는 URI 값은 다음과 같은 원본을 그대로 포함한다.


	http://localhost:8080/상점/1/items/품001
	
	
UriComponentsBuilder와 UriComponents는 모두 메소드 체이닝 방식을 사용할 수 있기 때문에, 다음과 같이 연속된 메소드 호출로 URI를 생성할 수도 있다.


	URI uri = UriCompBuilder.newInstance()
			.scheme("http")
			.host("localhost")
			.port(8080)
			.path("/상점/{storeId}/items/{itemId}")
			.build()
			.expand("1", "품001")
			.encode()
			.toUri();
			
			
	3.6 AsyncRestTemplate을 이용한 비동기 응답 처리
	
o.s.web.client.AsyncRestTemplate 클래스는 RestTemplate과 동일한 메소드를 제공하고 있다.
차이점이 있다면, 결과 객체를 바로 받는 대신 ListenableFuture를 리턴 타입으로 갖는다는 점이다. 다음 코드는 AsyncRestTemplate의 사용 예이다.


	AsyncRestTemplate asyncTemplate = new AsyncRestTemplate();
	ListenableFuture<ResponseEntity<String>> future = 
			asyncTemplate.getForEntity("http://www.daum.net", String.class);
	
	future.addCallback(new ListenableFutureCallback<ResponseEntity<String>>() {
		@Override
		public void onSuccess(ResponseEntity<String> s) {
			String content = s.getBody();
			System.out.println(content.substring(0, 100));
		}
		@Override
		public void onFailure(Throwable t) {
			// 익셉션 처리
		}
	});
	
	
비동기로 결과를 처리하기 위해 AsyncRestTemplate의 메소드는 ListenableFuture 타입을 리턴하고, 결과 타입으로는 ResponseEntity를 사용한다.

ListenableFuture.addCallback()에 ListenableFutureCallback 타입의 객체를 전달해서 처리 결과를 받을 수 있다.
성공적으로 처리되면 콜백 객체의 onSuccess() 메소드가 호출되고, 익셉션이 발생하면 onFailure() 메소드가 호출된다.
onSuccess() 메소드는 ResponseEntity를 이용해서 필요한 값을 구할 수 있으며, onFailure() 메소드는 파라미터로 전달된 Throwable 객체를 이용해서 알맞은 익셉션 처리를 하면 된다.