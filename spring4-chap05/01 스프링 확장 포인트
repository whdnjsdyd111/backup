스프링은 다음의 두 가지 방법을 이용해서 기능을 확장하는 방법을 제공하고 있다.

	- BeanFactoryPostProcessor를 이용한 빈 설정 정보 변경
	- BeanPostProcessor를 이용한 빈 객체 변경
	
두 가지는 적용되는 시점이 각각 다른데, 한 방법은 빈 객체를 생성하기 전에 적용되고 다른 하나는 빈 객체를 생성한 이후에 적용된다.
이 절에서는 이 두 기능이 어떻게 스프링 기능을 확장하는지 알아보도록 하자.


	1.1 BeanFactoryPostProcessor를 이용한 빈 설정 정보 변경
	
4장에서 외부 프로퍼티 파일을 이용하기 위해 PropertySourcesPlaceholderConfigurer 클래스를 사용한다고 배웠다.


	-- XML 기반 설정
	<beans ...>
		<!-- context:property-placeholder 태그는
			내부적으로 PropertySourcesPlaceholderConfigurer 객체를
			스프링 빈으로 등록 -->
		<context:property-placeholder location="classpath:/db.properties" />
		
		<bean id="connProvider"
			class="net.madvirus.spring4.chap04.ConnectionProvider"
			init-method="init">
			<property name="driver" value="{db.driver}" />
			...
		</beans>
			
	-- 자바 기반 설정
	@Configuration
	public class ConfigByProp {
		@Value("${db.driver}")
		private String driver;
		
		@Bean
		public static PropertySourcesPlaceholderConfigurer properties() {
			PropertySourcesPlaceholderConfigurer configurer - 
				new PropertySourcesPlaceholderConfigurer();
			configurer.setLocation(new ClassPathResource("db.properties"));
			return configurer;
		}
		
		
PropertySourcesPlaceholderConfigurer 클래스는 BeanFactoryPostProcessor 인터페이스를 구현하고 있는데,
스프링은 빈 객체를 실제로 생성하기 전에 설정 메타 정보를 변경하기 위한 용도로 BeanFactoryPostProcessor 인터페이스를 사용한다.
예를 들어, PropertySourcesPlaceholderConfigurer는 스프링 설정 정보에서 플래이스홀더를 프로퍼티 값으로 변경해주는 기능을 제공한다.


	<bean id="connProvider" class="net.madvirus.spring4.chap04.ConnectionProvider"
		init-method="init">
		<!-- PropertySourcesPlaceholderConfigurer가 ${db.driver}를 실제 값으로 변경 -->
		<property name="driver" value="${db.driver}" />
		
		
살제로 BeanFactoryPostProcessor는 설정 정보의 값을 변경할 수 있을 뿐만 아니라 다음과 같이 새로운 빈 설정을 추가할 수도 있다.


				최초 스프링 설정
				
		<bean id="a" class="A">
			<property name="prop1" value="b" />
		</bean>
		
			
					↓
					
		BeanFactoryPostProcessor
		
					↓
					
		<bean id="a" class="A">
			<property name="prop1" value="b2" />
		<bean>
		
		<bean id="b" class="B"></bean>
		
		
BeanFacotryPostProcessor 인터페이스는 다음과 같다.

		
	package org.springframework.beans.factory.config;
	
	import org.springframework.beans.BeansException;
	
	public interface BeanFactoryPostProcessor {
		void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)
			throws BeansException;
	}
	
	
BeanFactoryPostProcessor 인터페이스를 구현한 클래스는 postProcessorBeanFactory() 메소드에 전달되는 ConfigurableListableBeanFactory를 이용해서
설정 정보를 읽어와 변경하거나 새로운 설정 정보를 추가할 수 있다.

간단한 예제 코드를 이용해서 BeanFactoryPostProcessor 인터페이스의 사용 방법을 살펴보자.
만들어볼 기능은 아래와 같다.

	
	- ThresholdRequired 인터페이스를 구현한 빈 객체가 threshold 프로퍼티의 값을 설정하지 않는 경우 threshold 프로퍼티의 값을 10으로 설정한다.

예를 들어, 다음과 같은 설정이 있다고 하자.


	<bean id="collector1" class="net.madvirus.spring4.chap05.DataCollector">
		<property name="threshold" value="5" />
	</bean>
	
	<bean id="collector2" class="net.madvirus.spring4.chap05.DataCollector">
	</bean>
	
	
DataCollector는 뒤에서 만들 ThresholdRequired란 인터페이스를 상속받는 클래스인데, 위 설정을 보면
collector2 빈은 threshold 프로퍼티 값을 설정하지 않았다. 여기서 만들어 볼 BeanFactoryPostProcessor는 collector2처럼 threshold 프로퍼티를 설정하지 않은 빈이 있을 경우,
threshold 프로퍼티의 값을 지정한 값으로 설정하도록 만들 것이다.

예제에서 사용할 ThresholdRequired 인터페이스와 DataCollector 클래스는 각각 다음과 같다.


	package net.madvirus.spring4.chap05;

	public interface ThresholdRequired {
	
		public void setThreshold(int threshold);
	}
	
	
	package net.madvirus.spring4.chap05;
	
	public class DataCollector implements ThresholdRequired {
	
		private int threshold;
	
		@Override
		public void setThreshold(int threshold) {
			this.threshold = threshold;
		}
	
		public int getThreshold() {
			return threshold;
		}
	
	}
		
		
빈 설정에서 threshold 프로퍼티를 설정하지 않을 경우 기본값으로 설정해주기 위한 BeanFactoryPostProcessor 구현 클래스는 다음과 같다.


	package net.madvirus.spring4.chap05;
	
	import org.springframework.beans.BeansException;
	import org.springframework.beans.FatalBeanException;
	import org.springframework.beans.MutablePropertyValues;
	import org.springframework.beans.factory.config.BeanDefinition;
	import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
	import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
	
	public class ThresholdRequiedBeanFactoryPostProcessor implements BeanFactoryPostProcessor {
	
		private int defaultThreshold;
	
		public void setDefaultThreshold(int defaultThreshold) {
			this.defaultThreshold = defaultThreshold;
		}
	
		@Override
		public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {
			String[] beanNames = beanFactory.getBeanDefinitionNames();
			for (String name : beanNames) {
				BeanDefinition beanDef = beanFactory.getBeanDefinition(name);
				Class<?> beanClass = getClassFromBeanDef(beanDef);
				if (beanClass != null && ThresholdRequired.class.isAssignableFrom(beanClass)) {
					MutablePropertyValues prop = beanDef.getPropertyValues();
					if (!prop.contains("threshold")) {
						prop.add("threshold", defaultThreshold);
					}
				}
			}
		}
	
		private Class<?> getClassFromBeanDef(BeanDefinition beanDef) {
			System.out.println(beanDef.toString());
			if (beanDef.getBeanClassName() == null)
				return null;
			try {
				return Class.forName(beanDef.getBeanClassName());
			} catch (ClassNotFoundException e) {
				throw new FatalBeanException(e.getMessage(), e);
			}
		}
	
	}
	
	
ThresholdRequiredBeanFactoryPostProcessor 클래스의 postProcessorBeanFactory() 메소드는 다음과 같은 처리를 한다.

	- 라인 20 : 빈 이름 목록을 구한다.
	- 라인 22 : 지정한 이름을 가진 빈의 설정 정보(BeanDefinition)를 구한다.
	- 라인 23 : 설정 정보에서 빈의 클래스 타입을 구하기 위해 BeanDefinition.getBeanClassName()을 사용한다.
	- 라인 24 : 빈의 클래스 타입이 ThresholdRequired 인터페이스를 구현했는지 검사한다.
	- 라인 25 : 빈의 프로퍼티 설정 정보(MutablePropertyValues)를 구한다.
	- 라인 26-27 : 빈의 프로퍼티 설정 정보 중에 'threshold' 프로퍼티의 값이 없을 경우, defaultThreshold를 값으로 갖는 'threshold' 프로퍼티를 추가한다.
	
ConfigurableListableBeanFactory는 설정 정보를 구할 수 있는 두 개의 메소드를 제공하고 있다.

	- String[] getBeanDefinitionNames() : 설정된 모든 빈의 이름을 구한다.
	- BeanDefinition getBeanDefinition(String beanName) throws NoSuchBeanDefinitionException : 지정한 이름을 갖는 빈의 설정 정보를 구한다.
	
이 두 메소드를 이용해서 각 빈의 설정 정보를 담고 있는 BeanDefinition을 구할 수 있는데, 이 BeanDefinition을  통해서 설정 정보를 확인하고 변경할 수 있다.
예제 코드에서는 BeanDefinition의 getPropertyValues() 메소드를 구한 MutablePropertyValues를 이용해서 프로퍼티 값을 확인하고 추가하였다.

스프링이 BeanFactoryPostProcessor 구현 클래스를 사용하도록 만들려면, BeanFacotryPostProceossor 구현 클래스를 스프링 빈으로 등록해주어야 한다.
다음은 ThresholdRequiredBeanFactoryPostProcessor 클래스를 스프링 빈으로 설정한 예를 보여주고 있다.


	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
	       http://www.springframework.org/schema/beans/spring-beans.xsd">
	
		<bean
			class="net.madvirus.spring4.chap05.ThresholdRequiedBeanFactoryPostProcessor">
			<property name="defaultThreshold" value="10" />
		</bean>
	
		<bean id="collector1" class="net.madvirus.spring4.chap05.DataCollector">
			<property name="threshold" value="5" />
		</bean>
	
		<bean id="collector2" class="net.madvirus.spring4.chap05.DataCollector">
		</bean>
	</beans>
	
	
위에서 collector2 빈 설정의 threshold 프로퍼티를 설정하지 않았으므로, 위 코드에서 기대하는 것은 collector2빈의 threshold 프로퍼티 값이 10으로 설정되는 것이다.
실제 위 설정을 이용해서 스프링 컨테이너를 생성하는 코드를 다음과 같이 작성했다.


	package net.madvirus.spring4.chap05;
	
	import org.springframework.context.support.GenericXmlApplicationContext;
	
	public class Main {
	
		public static void main(String[] args) {
			GenericXmlApplicationContext ctx = new GenericXmlApplicationContext("classpath:applicationContext.xml");
			DataCollector collector1 = ctx.getBean("collector1", DataCollector.class);
			DataCollector collector2 = ctx.getBean("collector2", DataCollector.class);
			System.out.println("collector1.threshold = " + collector1.getThreshold());
			System.out.println("collector2.threshold = " + collector2.getThreshold());
			ctx.close();
		}
	}
	
	
위 코드의 실행 결과는 다음과 같다.

	
	collector1.threshold = 5
	collector2.threshold = 10
	
실행 결과를 보면 collector2 빈의 threshold 프로퍼티 값이 10으로 출력되었다. 
이 결과를 통해, ThresholdRequiredBeanFactoryPostProcessor가 빈의 설정 정보를 변경한 것을 확인할 수 있다.

BeanFactoryPostProcessor는 빈의 설정 정보를 변경하는 방법을 사용하는데, 이런 이유로 @Configurer 어노테이션을 이용해서 생성한 빈 객체에는 적용되지 않는다.
예를 들어, 아래와 같은 코드를 작성했다고 하자.


	@Configuration
	public class Config {
	
		@Bean
		public static ThresholdRequiedBeanFactoryPostProcessor processor() {
			ThresholdRequiedBeanFactoryPostProcessor p = new ThresholdRequiedBeanFactoryPostProcessor();
			p.setDefaultThreshold(10);
			return p;
		}
	
		@Bean
		public DataCollector collector1() {
			DataCollector collector = new DataCollector();
			collector.setThreshold(5);
			return collector;
		}
	
		@Bean
		public DataCollector collector2() {
			DataCollector collector = new DataCollector();
			return collector;
		}
	}
	
	
위 코드를 보면 collector2() 메소드가 생성하는 DataCollector는 threshold 프로퍼티를 설정하지 않고 있다.
ThresholdRequiredBeanFacotryPostProcessor를 빈으로 등록했기 때문에 위 설정을 사용하면 collector2에 해당하는 빈의 threshold 프로퍼티 값이 10으로 설정될 거라고 생각하기 쉽지만,
실제로 프로퍼티 값은 변경되지 않는다. 그 이유는 @Configuration을 이용해서 생성하는 빈 객체는 빈 설정 정보를 만들지 않기 때문이다.
빈 설정 정보가 없으므로 ThresholdRequiredBeanFactoryPostProcessor에서 변경할 수도 없을 것이다.

	(1) BeanFactoryDefinition의 주요 메소드
	
BeanFactoryDefinition 인터페이스는 빈 설정 정보를 구하거나 수정할 때 필요한 메소드를 정의하고 있는데, 주요 메소드는 다음과 같다.


			메소드										설명
		
	String getBeanClassName()						생성할 빈의 클래스 이름을 구하거나 저장한다.
	setBeanClassName(String beanClassName)
	
	String getFactoryMethodName()					팩토리 메소드 이름을 구하거나 지정한다.
	setFactoryMethodName(String factoryMethodName)
	
	ConstructorArgumentValues getConstructorArgumentValues()	생성자 인자 값 설정 정보를 구한다.
	
	MutablePropertyValues getPropertyValues()		프로퍼티 설정 정보를 구한다.
	
	boolean isSingleton()							싱글톤 또는 프로토타입 범위를 갖는지 여부를 확인한다.
	boolean isPrototype()
	
	String getScope()								빈의 범위를 문자열로 구하거나 설정한다.
	setScope(String scope)


생성자 인자 설정과 프로퍼티 설정을 변경하려면 다음의 두 클래스를 이용하면 된다.

	- o.s.beans.factory.config.ConstructorArgumentValues
	- o.s.beans.MutablePropertyValues
	
앞서 ThresholdRequiredBeanFactoryPostProcessor 예에서는 MutablePropertyValues 클래스를 이용해서 프로퍼티 설정을 추가했었다.
이외에 프로퍼티 설정 조회/추가/수정/삭제 및 생성자 인자 설정 조회/추가/수정/삭제 등의 처리를 할 수 있다.
위 두 클래스에 대한 자세한 사용 방법이 알고 싶은 독자는 API 문서(http://docs.spring.io/spring/docs/4.0.4.RELEASE/javadoc-api/)를 참고하기 바란다.


	1.2 BeanPostProcessor를 이용한 빈 객체 변경
	
스프링의 기능을 확장하는 또 다른 방법은 BeanPostProcessor를 사용하는 것이다. 앞서 살펴본 BeanFactoryPostProcessor가 빈의 설정 정보를 변경하는 방법을 사용한다면,
BeanPostProcessor는 생성된 빈 객체를 변경하는 방법을 사용한다.
BeanPostProcessor 인터페이스는 빈 객체를 변경할 때 사용될 메소드를 다음과 같이 정의하고 있다.


	package org.springframework.beans.factory.config;
	
	import org.springframework.beans.BeansException;
	
	public interface BeanPostProcessor {
		Object postProcessorBeforeInitialization(Object bean, String beanName)
			throws BeansException;
		
		Object postProcessorAfterInitialization(Object bean, String beanName)
			throws BeansException;
	}
	
	
스프링은 빈 객체를 초기화하는 과정에서 BeanPostProcessor의 두 메소드를 호출하고, 이 메소드가 리턴한 객체를 빈 객체로 사용한다.
따라서, 실제 사용할 빈 객체를 교체하고 싶다면 메소드로 전달받은 원래 빈 객체(bean 파라미터)가 아닌 새로운 객체를 생성해서 리턴하면 된다.

스프링 컨테이너는 빈 객체를 생성한 뒤에, 다음처럼 빈을 초기화하기 전/후에 BeanPostProcessor의 두 메소드를 호출한다.


					●
					↓
				빈 객체 생성
					↓
				빈 프로퍼티 설정
					↓
		BeanNameAware.setBeanName()
					↓
		ApplicationContextAware.setApplicationContext()
					↓
		BeanPostProcessor.postProcessBeforeInitialization()
					↓
		┌───────────────────────────────────────┐
		│초기화									│
		│		@PostConstruct 메소드				│
		│			↓							│
		│InitializingBean.afterPropertiesSet()	│
		│			↓							│
		│		커스텀 init 메소드					│
		└───────────────────────────────────────┘
					↓
		BeanPostProcessor.postProcessAfterInitialization()
					↓
				빈 객체 사용
	
	
스프링은 등록된 빈 중에서 BeanPostProcessor 인터페이스를 구현하고 있는 빈 객체를 BeanPostProcessor로 사용한다.
따라서, BeanPostProcessor를 구현했다면, 스프링 빈으로 등록해주면 된다.

BeanPostProcessor 인터페이스의 사용 방법을 알아보기 위해 두 개의 코드를 만들었다.


	package net.madvirus.spring4.chap05;
	
	import java.util.Date;
	
	public interface StockReader {
	
		public int getClosePrice(Date date, String code);
	}
	
	
	package net.madvirus.spring4.chap05;

	import java.util.Date;
	
	public class StockReaderImpl implements StockReader {
	
		@Override
		public int getClosePrice(Date date, String code) {
			System.out.println("StockReaderImpl: " + code);
			// 가짜 구현
			try { // 시간이 걸림을 나타내기 위한 300 밀리초 슬립
				Thread.sleep(300);
			} catch (InterruptedException e) {
			}
			return 500;
		}
	
	}
		
		
StockReaderImpl 클래스는 예제를 위해 만든 가짜 구현으로 300 밀리초만큼 스레드 실행을 멈춰서 실행 시간이 비교적 오래 걸리도록 만들었다.

특정 날짜에 특정 종목의 주식 종가는 변하지 않는 특징이 있으므로, 한번 읽어온 데이터는 메모리에 보관하도록 만들고 이후 같은 요청에 대해 메모리에 보관한 값을 리턴하도록 만들면 실행 속도가 빨라질 것이다.
그런데, (위 예제 코드에서는 아니지만) 기존 코드를 직접 변경하는 것이 쉽지 않은 상황이라면 어떻게 할 수 있을까?
그러면서도 스프링 설정은 복잡하지 않게 유지하고 싶다면? 바로 이런 경우에 사용할 수 있는 BeanPostProcessor이다.
여기서 만들 BeanPostProcessor는 다음과 같은 설정만 추가하면 기존에 등록된 StockReader 타입의 빈에 캐시 기능을 확장하게 구현할 것이다.

	
	<!-- StockReader 타입의 빈에 캐시 기능을 확장해주는 BeanPostProcessor -->
	<bean class="net.madvirus.spring4.chap05.CacheStockReaderBeanPostProcessor">
	</bean>

	<bean id="stockReader" class="net.madvirus.spring4.chap05.StockReaderImpl">
	</bean>
	
	
먼저 캐시 기능을 제공하는 StockReader 구현 클래스를 작성하자.
이 예제에서는 다음과 같이 Map을 이용해서 간단하게 캐시를 구현했다.


	package net.madvirus.spring4.chap05;
	
	import java.text.SimpleDateFormat;
	import java.util.Date;
	import java.util.HashMap;
	import java.util.Map;
	
	public class CacheStockReader implements StockReader {
	
		private Map<String, Integer> cache = new HashMap<>();
		private StockReader delegate;
	
		public CacheStockReader(StockReader delegate) {
			this.delegate = delegate;
		}
	
		@Override
		public int getClosePrice(Date date, String code) {
			String key = createKey(date, code);
			System.out.println("CacheStockReader: " + key);
			if (cache.containsKey(key))
				return cache.get(key);
	
			int value = delegate.getClosePrice(date, code);
			cache.put(key, value);
			return value;
		}
	
		private String createKey(Date date, String code) {
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
			return dateFormat.format(date) + "-" + code;
		}
	
	}
	
	
CacheStockReader의 getClosePrice() 메소드는 data와 code 파라미터의 값을 조합해서 Map을 위한 키를 만든다.
(라인 19)이 키에 해당하는 값이 이미 Map(cache)에 있으면 그 값을 리턴하고(라인 21-22), 아니면 delegate.getClosePrice()를 실행한 뒤에
그 값을 Map에 넣고 리턴한다.(라인 24-26)

이제 만들 코드는 BeanPostProcessor 이다. BeanPostProcessor 구현 클래스는 postProcessAfterInitialization() 메소드에서 파라미터로 전달받은
빈 객체의 타입이 StockReader인 경우, 빈 객체 대신에 새로운 CacheStockReader 객체를 생성해서 리턴하도록 구현하면 된다.
빈 객체 대신에 새로운 CacheStockReader 객체를 생성해서 리턴하도록 구현하면 된다. 구현 클래스는 다음과 같다.


	package net.madvirus.spring4.chap05;
	
	import org.springframework.beans.BeansException;
	import org.springframework.beans.factory.config.BeanPostProcessor;
	
	public class CacheStockReaderBeanPostProcessor implements BeanPostProcessor {
	
		@Override
		public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
			System.out.println("CacheStockReaderBeanPostProcessor:before-" + beanName);
			return bean;
		}
	
		@Override
		public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
			System.out.println("CacheStockReaderBeanPostProcessor:after-" + beanName + ":" + bean.getClass().getName());
			if (StockReader.class.isAssignableFrom(bean.getClass()))
				return new CacheStockReader((StockReader) bean);
			else
				return bean;
		}
	}
	
	
스프링은 BeanPostProcessor가 리턴한 객체를 빈 객체로 사용한다.
위 코드에서는 postProcessorAfterInitialization() 메소드가 리턴한 CacheStockReader를 빈 객체로 사용하게 된다.
다음 코드는 CacheStockReaderBeanPostProcessor를 사용한 스프링 설정 예이다.


	<beans ...>
		<bean class="net.madvirus.spring4.chap05.CacheStockReaderBeanPostProcessor">
		</bean>

		<bean id="stockReader" class="net.madvirus.spring4.chap05.StockReaderImpl">
		</bean>
	</beans>
	
	
위 설정을 이용해서 스프링 컨테이너를 생성하고 stockReader 빈 객체를 구하면, StockReaederImpl 객체가 아닌 CacheStockReaderBeanPostProcessor가 생성한
CacheStockReader 객체를 구하게 된다.


	public class MainStockReader {
	
		public static void main(String[] args) {
			GenericXmlApplicationContext ctx = new GenericXmlApplicationContext("classpath:stockreader.xml");
			// CacheStockReader 클래스의 객체를 리턴
			StockReader stockReader = ctx.getBean("stockReader", StockReader.class);
			Date date = new Date();
			printClosePrice(stockReader, date, "0000");
			printClosePrice(stockReader, date, "0000");
	
			ctx.close();
		}
	
		private static void printClosePrice(StockReader stockReader, Date date, String string) {
			long before = System.currentTimeMillis();
			int stockPrice = stockReader.getClosePrice(new Date(), "0000");
			long after = System.currentTimeMillis();
			System.out.println("읽어온 값 = " + stockPrice + ", 실행 시간 = " + (after - before));
		}
	}
	
	
위 MainStockReader는 "stockReader"빈의 getClosePrice() 메소드를 두 번 실행하는데, 실행 결과는 다음과 같다.

	
	CacheStockReader: 20200810-0000
	StockReaderImpl: 0000
	읽어온 값 = 500, 실행 시간 = 305
	
	CacheStockReader: 20200810-0000
	읽어온 값 = 500, 실행 시간 = 1
	
	
두 번째 실행 시간은 매우 짧아졌는데, 그 이유는 CacheStockReader가 첫 번째 실행 결과를 메모리(Map)에 보관했다가 두 번째 실행할 때는 그 값을 바로 리턴했기 때문이다.
출력 내용을 보면 실제로 두 번째 실행 결과에서는 StockReaderImpl이 실행되지 않은 것을 알 수 있다.


	StockReaderImpl stockReader = ctx.getBean("stockReader", StockReaderImpl.class);
	
	
하지만, 위 코드를 실행하면 스프링은 StockReaderImpl 타입을 가진 stockReader 빈은 존재하지 않는다는 익셉션을 발생시킨다.
그 이유는 CacheStockReaderBeanPostProcessor에 의해 "stockReader" 빈이 CacheStockReader 타입의 객체로 교체되었기 때문이다.


	1.3 Ordered 인터페이스 / @Order 아노테이션 적용 순서 지정
	
두 개 이상의 BeanPostProcessor가 존재할 경우, o.s.core.Ordered 인터페이스를 이용해서 순서를 정할 수 있도록 ㅎ야 한다.
이를 설명하기 위해 새로운 BeanPostProcessor를 만들어보자. 새로 만들 BeanPostProessor 구현 클래스는 다음과 같다.


	package net.madvirus.spring4.chap05;
	
	import java.lang.reflect.InvocationHandler;
	import java.lang.reflect.Method;
	import java.lang.reflect.Proxy;
	
	import org.springframework.beans.BeansException;
	import org.springframework.beans.factory.config.BeanPostProcessor;
	import org.springframework.core.annotation.Order;
	
	public class TraceBeanPostProcessor implements BeanPostProcessor, Ordered {
	
		private int order;
	
		@Override
		public int getOrder() {
			return order;
		}
	
		public void setOrder(int order) {
			this.order = order;
		}
		
		@Override
		public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
			System.out.println("TraceBeanPostProcessor:before-" + beanName);
			return bean;
		}
	
		@Override
		public Object postProcessAfterInitialization(final Object bean, String beanName) throws BeansException {
			System.out.println("TraceBeanPostProcessor:after-" + beanName+":"+bean.getClass().getName());
			Class<?>[] interfaces = bean.getClass().getInterfaces();
			if (interfaces.length == 0)
				return bean;
			InvocationHandler handler = new InvocationHandler() {
				@Override
				public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
					long before = System.currentTimeMillis();
					Object result = method.invoke(bean, args);
					long after = System.currentTimeMillis();
					System.out.println(method.getName() + " 실행 시간 = " + (after - before));
					return result;
				}
			};
			return Proxy.newProxyInstance(getClass().getClassLoader(), interfaces, handler);
		}
	}

	
Ordered 인터페이스는 getOrder() 메소드를 정의하고 있다.
라인 17-20의 getOrdered() 메소드가 Ordered 인터페이스를 구현한 것으로, 이 메소드는 order 필드의 값을 리턴하고 있다.

[위 코드는 리플렉션 API를 이용하는데, 이에 익숙하지 않으면 이해가 어렵기 때문에	http://javacan.tistory.com/entry/21	문서로 기초 정보를 얻자.]

간단하게 위 코드의 postProcessAfterInitialization() 메소드가 하는 내용을 설명하면 아래와 같다.

	- 라인 36 : bean 객체가 구현한 인터페이스를 구한다.
	- 라인 42-44 : 인터페이스에 정의된 메소드가 호출될 때, 이전/이후 시간을 기록한다.
	- 라인 45 : 실행 시간을 출력한다.
	- 라인 49 : 라인 42-45에 정의된 기능을 적용한 프록시 객체를 리턴한다.
	
원래 알아보려던 것은 BeanPostProcessor와 Order 인터페이스에 대한 것이므로, 다시 이 부분에 대해서 살펴보자.
스프링은 BeanPostProcessor가 여러 개 존재할 때, 다음의 방법을 이용해서 적용 순서를 정한다.

	- BeanPostProcessor 구현 클래스가 Ordered 인터페이스를 구현한 경우, getOrder() 메소드를 이용해서 적용 순서 값을 구한다.
	- getOrder()로 구한 순서 값이 작은 BeanPostProcessor를 먼저 적용한다.
	- Ordered 인터페이스를 구현하지 않은 BeanPostProcessor는 나중에 적용된다.
	
적용 순서를 확인하기 위해 앞서 작성했던 CacheStockReaderBeanPostProcessor 클래스가 Ordered 인터페이스를 구현하도록 변경하자.

	
	public class TraceBeanPostProcessor implements BeanPostProcessor, Ordered {

		private int order;
	
		@Override
		public int getOrder() {
			return order;
		}
	
		public void setOrder(int order) {
			this.order = order;
		}
		...
		
		
두 개의 BeanPostProcessor를 구현했으니, 이 두 BeanPostProcessor를 사용하는 설정을 다음과 같이 작성해보자.


	<beans ...>
	
		<bean class="net.madvirus.spring4.chap05.CacheStockReaderBeanPostProcessor">
			<property name="order" value="1" />
		</bean>
	
		<bean class="net.madvirus.spring4.chap05.TraceBeanPostProcessor">
			<property name="order" value="2" />
		</bean>
	
		<bean id="stockReader" class="net.madvirus.spring4.chap05.StockReaderImpl">
		</bean>
	
	</beans>
	
	
위 코드에서 두 BeanPostProcessor의 우선순위 값을 각각 1과 2로 지정하였다.
이는 빈 객체의 초기화 과정에서 CacheStockReaderBeanPostProcessor가 먼저 적용되고 그 다음에 TraceBeanPostProcessor가 적용된다는 것을 뜻한다.
다음은 이를 그림으로 표현한 것이다.


				StockReader 빈
			[StockReaderImpl]
					↓
				CacheStockReader
				BeanPostProcessor		order1
					↓
				StockReader빈
			[CacheStockReader]
					↓
			TraceBeanPostProcessor		order2
					↓
				stockReader 빈
				[런타임프록시]
				
				
위 그림을 보면 최종적으로 "stockReaer" 빈은 TraceBeanPostProcessor가 생성한 프록시 객체임을 알 수 있다.
실제 적용 여부를 확인하기 위해 다음과 같은 코드를 작성해보았다.


	package net.madvirus.spring4.chap05;
	
	import java.util.Date;
	
	import org.springframework.context.support.GenericXmlApplicationContext;
	
	public class MainOrder {
	
		public static void main(String[] args) {
			GenericXmlApplicationContext ctx = new GenericXmlApplicationContext("classpath:order.xml");
			StockReader stockReader = ctx.getBean("stockReader", StockReader.class);
			System.out.println("stockReader = " + stockReader.getClass().getName());
			Date date = new Date();
			int value1 = stockReader.getClosePrice(date, "0000");
			int value2 = stockReader.getClosePrice(date, "0000");
			ctx.close();
		}
	}
	
	
MainOrder를 실행하면 다음과 같은 결과를 얻을 수 있다.

	-- 라인 13에 출력한 내용
	stockReader = com.sun.proxy.$Proxy1
	
	-- 첫 번째 stockReader.getClosePrice(data, "0000"); 실행 결과로 출력된 내용
	CacheStockReader: 20200810-0000
	StockReaderImpl: 0000
	getClosePrice 실행 시간 = 306
	
	-- 두 번째 stockReader.getClosePrice(data, "0000");	실행 결과로 출력된 내용
	CacheStockReader: 20200810-0000
	getClosePrice 실행 시간 = 1
	
	
첫 번째 줄은 MainOrder의 라인 13 코드에서 출력한 결과이다.
이 결과를 보면 stockReader 빈의 타입이 "$Proxy1"이라고 출력되었는데, 이는 자바의 리플렉션 API를 통해 생성한 객체의 타입으로 
TraceBeanPostProcessor가 CacheStockReaderBeanPostProcessor보다 나중에 적용된 것을 알 수 있다.
아래와 같이 order 순서를 변경해보자.


	<beans ...>
	
		<bean class="net.madvirus.spring4.chap05.CacheStockReaderBeanPostProcessor">
			<property name="order" value="2" />
		</bean>
	
		<bean class="net.madvirus.spring4.chap05.TraceBeanPostProcessor">
			<property name="order" value="1" />
		</bean>
	
		<bean id="stockReader" class="net.madvirus.spring4.chap05.StockReaderImpl">
		</bean>
	
	</beans>
	
	
적용 순서를 변경한 뒤에 다시 MainOrder 클래스를 실행해보면 다음과 같은 결과가 출력된다.


	-- 라인 13에 출력한 내용
	stockReader = net.madvirus.spring4.chap05.CacheStockReader
	
	-- 첫 번째 stockReader.getClosePrice(data, "0000"); 실행 결과로 출력된 내용
	CacheStockReader: 20200810-0000
	StockReaderImpl: 0000
	getClosePrice 실행 시간 = 306
	
	-- 두 번째 stockReader.getClosePrice(data, "0000");	실행 결과로 출력된 내용
	CacheStockReader: 20200810-0000
	getClosePrice 실행 시간 = 1
	
	
이 결과를 보면 stockReader 빈의 타입이 CacheStockReader임을 알 수 있는데, 이는 TraceBeanPostProcessor보다
CacheStockReaderBeanPostProcessor가 나중에 적용되었음을 확인해준다.

Ordered 인터페이스 대신에 @Order 어노테이션을 사용해도 된다.
Order 어노테이션의 경우 다음과 같이 클래스에 적용되며, 적용 순서를 값으로 갖는다.


	import org.springframework.core.annotation.Order;
	
	@Order(2)
	public class TraceBeanPostProcessor implements BeanPostProcessor {