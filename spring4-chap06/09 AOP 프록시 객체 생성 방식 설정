AOP를 사용할 때에 주의할 점이 한 가지 있는데, 그것은 바로 AOP가 생성하는 프록시와 관련된 것이다. 관련 내용을 확인하기 먼저 코드부터 만들어 보자.

	// 인터페이스
	public interface MemberService {
		void regist(MemberRegRequest memberRegReq);
		boolean update(String id, UpdateInfo updateInfo);
	}
	
	// 구현 클래스
	public class MemberServiceImpl implements MemberService {
		@Override
		void regist(MemberRegRequest memberRegReq) {...}
		@Override
		boolean update(String id, UpdateInfo updateInfo) {...}
	}
	
	
MemberServiceImpl을 사용하기 위해 스프링 설정을 다음과 같이 작성하였다.


	@Configuration
	public class NoAopConfig {
		
		@Bean
		public MemberServiceImpl memberService() {
			return new MemberServiceImpl();
		}
	}
	
	
이제 위 스프링 설정을 이용해서 컨테이너를 생성하는 코드를 작성해보자.
이 코드는 다음과 같을 것이다.


	AnnotationConfigApplicationContext ctx = 
		new AnnotationConfigApplicationContext(NoAopConfig.class);
	
	MemberService ms = ctx.getBean("memberService", MemberService.class);
	System.out.println(ms instanceof MemberService);	// true
	System.out.println(ms instanceof MemberServiceImpl);	// true
	
	
위 코드에서 이름이 memberService인 빈 객체를 MemberService 타입으로 구해서 ms 변수에 할당했는데, 이때 instanceof 연산자를 이용해서 ms의 타입을 확인해보면
MemberService 인터페이스 타입도 되고 MemberServiceImpl 클래스 타입도 되는 것을 알 수 있다.
빈 설정에서 MemberServiceImpl 클래스를 사용했으니 당연한 결과다.

그런데, 이 당연한 결과가 AOP를 적용하면 다르게 나타난다. 스프링 설정에 AOP를 적용해보자.


	@Configuration
	@EnableAspectJAutoProxy
	public class AopConfig {
		
		@Bean
		public UpdateMemberInfoTraceAspect traceAspect() {
			return new UpdateMemberInfoTraceAspect();
		}
		
		@Bean
		public MemberServiceImpl memberService() {
			return new MemberServiceImpl();
		}
	}
	
	
UpdateMemberInfoTraceAspect에 구현한 Advice가 memberService 빈 객체에 적용될 경우, 스프링은 memberService 빈 객체에 대해서 프록시 객체를 생성하고
원본 memberService 빈 대신에 새롭게 생성한 프록시 객체를 memberService 빈 객체로 사용하게 된다.
즉, 다음과 같은 방식으로 memberService 빈을 생성한다고 생각하면 된다. (참고로 아래 코드에서 ProxyFactory는 스프링이 프록시 객체를 생성할 때 사용하는 클래스이다.)


	@Bean
	public MemberService memberService() {
		ProxyFactory factory = new ProxyFactory(memberServiceOrigin());
		...
		return (MemberService) factory.getFactory();
	}
	
	@Bean
	public MemberServiceImpl memberServiceOrigin() {
		return new MemberServiceImpl();
	}
	
	
위 코드를 자세히 보면 memberService() 메소드의 리턴 타입이 MemberService인데, 그 이유는 빈 객체가 인터페이스를 구현하고 있는 경우 스프링은 인터페이스를 이용해서 프록시 객체를 생성하기 때문이다.
실제로 AOP를 적용한 상태에서 객체의 타입을 검사해보면 memberService 빈 객체의 타입이 MemberServiceImpl 타입이 아닌 것을 확인 할 수 있다.


	// AOP를 사용하는 스프링 설정
	AnnotationConfigApplicationContext ctx = 
		new AnnotationConfigApplicationContext(AopConfig.class);
	
	// ms는 AOP가 적용된 프록시 객체
	MemberService ms = ctx.getBean("memberService", MemberService.class);
	System.out.println(ms instanceof MemberService);	// true
	System.out.println(ms instanceof MemberServiceImpl);	// false
	System.out.println(ms.getClass().getName());
	
	
위 코드를 실행해보면 다음과 같이 출력된다. 여기서 두 번째 출력 결과를 보면 ms 변수의 타입이 설정에서 사용한 MemberServiceImpl 타입이 아닌 것을 알 수 있다.
실제 타입은 세 번째 출력 결과인 $Proxy11이다.


	true
	false
	com.sun.proxy.$Proxy11
	
	
스프링 AOP 인터페이스를 이용해서 프록시 객체를 생성하는 것은 많은 경 문제가 발생되지 않는다. 하지만, 다음 처럼 실제 빈 객체의 타입을 직접 이용하는 경우에 문제가 발생한다.


	public class MemberServiceLocator {
	
		private MemberServiceImpl memberService;
	
		public MemberServiceImpl getMemberService() {
			return memberService;
		}
	
		public void setMemberService(MemberServiceImpl memberService) {
			this.memberService = memberService;
		}
	
	}
	
	
스프링 설정에서 MemberServiceLocator는 MemberServiceImpl 타입의 빈 객체를 이용해서 설정할 것이다.


	<aop:aspectj-autoproxy />
	
	<bean id="updateMemberAspect"
		class="net.madvirus.spring4.chap06.aop.UpdateMemberInfoTraceAspect" />
		
	<bean id="ms" class="net.madvirus.spring4.chap06.member.MemberServiceImpl" />
	
	<bean id="memnberServiceLocator"
		class="net.madvirus.spring4.chap06.member.MemberServiceLocator">
		<property name="memberService" ref="ms" />
	</bean>
	
	
위 설정에서 ms 빈 객체에 AOP가 적용된다. (updateMemberAspect가 ms 빈에 적용된다.) MemberServiceImpl은 MemberService 인터페이스를 상속받고 있으므로,
MemberService 인터페이스를 이용해서 AOP 프록시 객체를 만들게 된다. 따라서, ms 빈의 실제 타입은 MemberService 인터페이스를 상속받은 프록시 객체의 타입이 된다.
(앞서 봤던 $Proxy11과 비슷한 이름의 타입)

문제는 memberServiceLocator 빈의 memberService 프로퍼티 타입이 MemberServiceImpl 이라는 것이다.
ms 빈의 실제 타입은 MemberService 인터페이스를 상속받은 다른 타입이기 때문에, 
위 설정과 같이 ms 빈을 MemberServiceImpl 타입인 프로퍼티에 할당하면 타입 변환을 할 수 없다는 익센션이 발생하게 된다.

MemberServiceLocator가 클래스 타입이 아닌 인터페이스 타입을 사용하도록 변경하면 문제를 해결할 수 있다.
하지만, MemberServiceLocator가 MemberServiceImpl 클래스 타입을 무조건 사용해야 한다면, 인터페이스가 아닌 클래스를 기준으로 프록시를 생성하도록 설정해주어야 한다.
설정 방법은 다음과 같다.


	<aop:config proxy-target-class="true">
	
	<aop:aspectj-autoproxy proxy-target-class="true" />
	
	@EnableAspectJAutoProxy(proxyTargetClass = true)
	
	
각 설정 방식에서 프록시 대상을 클래스로 사용할지 여부를 true로 지정해주면 실제 생성되는 프록시는 인터페이스가 아닌 클래스를 상속받아 생성된다.