Around Advice를 제외한 나머지 Advice 타입을 구현한 메소드는 org.aspectj.lang.JoinPoint 객체를 선택적으로 사용할 수 있다.
단, JoinPoint를 파라미터로 사용할 때에는 반드시 첫 번째 파라미터로 지정해주어야 한다.
만약, JoinPoint를 다음과 같이 두 번째나 그 뒤에 위치한 파라미터로 지정하면 스프링은 익셉션을 발생시킨다.


	// JoinPoint이 첫 번째 파라미터가 아닌 경우 익셉션 발생
	public void afterLogging(Object retVal, JoinPoint joinPoint) {
		...
	}
	
	
JoinPoint 인터페이스는 호출되는 대상 객체, 메소드 그리고 전달되는 파라미터 목록에 접근할 수 있는 메소드를 제공하고 있으며, 이는 다음과 같다.

	- Signature getSignature()
	- Object getTarget() : 대상 객체를 구한다.
	- Object[] getArgs() : 파라미터 목록을 구한다.
	
org.aspectj.lang.Signature 인터페이스는 호출되는 메소드와 관련된 정보를 제공하기 위해 다음과 같은 메소드를 정의하고 있다.

	- String getName() : 메소드의 이름을 구한다.
	- String toLongString() : 메소드를 완전하게 표현한 문장을 구한다. (메소드의 리턴 타입, 파라미터 타입이 모두 표시된다.)
	- String toShortString() : 메소드를 축약해서 표현한 문장을 구한다. (기본 구현은 메소드의 이름만을 구한다.)
	
Around Advice의 경우 org.aspectj.lang.ProceedingJoinPoint를 첫 번째 파라미터로 전달받는데,
ProceedingJoinPoint 인터페이스는 프록시 대상 객체를 호출할 수 있는 proceed() 메소드를 제공하고 있다.
ProceedingJoinPoint는 JoinPoint 인터페이스를 상속받고 있으므로 Around Advice 역시 앞서 설명한 메소드와 Signature를 이용하여 대상 객체,
메소드 및 전달되는 파라미터에 대한 정보를 구할 수 있다.