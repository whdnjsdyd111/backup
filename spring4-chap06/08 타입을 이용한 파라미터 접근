JoinPoint의 getArgs() 메소드를 이용하면 대상 객체의 메소드를 호출할 때 사용한 인자에 접근할 수 있다고 했는데,
Advice 메소드에서 직접 파라미터를 이용해서 메소드 호출 시 사용된 인자에 접근할 수도 있다. 
파라미터를  이용해서 대상 객체의 메소드를 호출할 때 사용한 인자에 접근하려면 다음과 같이 두 가지 작업을 진행해주면 된다.

	- Advice 구현 메소드에 인자를 전달받을 파라미터를 명시한다.
	- Pointcut 표현식에서 args() 명시자를 사용해서 인자 목록을 지정한다.
	
먼저 Advice 구현 메소드에 다음 코드와 같이 사용할 파라미터를 명시한다. 다음 코드는 대상 객체의 메소드 호출 시 사용되는 인자가 두 개이고
각각 String 타입과 UpdateInfo 타입인 경우에 적용될 Advice 메소드가 된다.


	public class UpdateMemberInfoTraceAdvice {
		
		public void traceReturn(String memberId, UpdateInfo info) {
			System.out.println("[TA] 정보 수정 : 대상회원=%s, 수정정보=%s\n", memberId, info);
		}
		
	}
	
	
그 다음에 할 작업은 XML 설정 파일에서 args() 명시자를 이용해서 인자 목록을 지정해주는 것이다.
다음은 설정 예를 보여주고 있다.


	<bean id="memberUpdateTraceAdvice"
		class="net.madvirus.spring4.chap06.aop.UpdateMemberInfoTraceAdvice" />
		
	<aop:config>
		<aop:aspect id="memberUpdateTraceAspect" ref="memberUpdateTraceAdvice">
			<aop:after-returning pointcut="args(memberId, info)"
				method="traceReturn" />
		</aop:aspect>
	</aop:config>
	
	
위 설정에서 args() 명시자가 의미하는 것은 다음과 같다.

	- 대상 객체의 메소드 호출 시 인자가 두 개 전달되고,
	- 이 중 첫 번째 인자는 traceReturn 메소드의 memberId 파라미터와 타입이 같고, 두 번째 인자는 info 파라미터와 타입이 같다.
	
Advice 구현 메소드인 traceReturn()의 memberId 파라미터와 info 파라미터는 각각 타입이 String과 UpdateInfo이므로,
위 Pointcut 설정은 다음 코드의 update() 메소드에 Advice를 적용하게 된다.


	public interface MemberService {
		boolean update(String id, UpdateInfo updateInfo);
	}
	
	
args() 명시자의 경우 메소드 정의에 있는 타입이 아닌  실제 메소드 호출 시 전달되는 인자의 타입에 따라서 적용 여부가 결정된다.
예를 들어, update() 메소드가 다음과 같이 정의되어 있다고 해보자.


	public interface MemberService {
		boolean update(String id, Object updateInfo);
	{
	
	
update() 메소드의 두 번째 파라미터 타입은 Object인데, 이렇게 메소드 선언에서 사용된 타입이 args() 명시자와 매칭되는 타입과 다르다 하더라도,
실제로 메소드에 전달되는 인자의 타입이 args() 명시자를 통해서 지정한 것과 동일하다면 Advice가 적용된다.


	MemberService service = context.getBean("memberService", MemberService.class);
	UpdateInfo updateInfo = new UpdateInfo();
	...
	// 실제로 전달되는 객체의 타입이 UpdateInfo이므로 Aspect 적용됨
	service.update("madvirus", updateInfo);
	
	
@Aspect 어노테이션을 사용하는 경우에도 XML 스키마를 사용할 때처럼 Pointcut 표현식에 args() 명시자를 사용하면 된다.


	@Aspect
	public class UpateMemberInfoTraceAdvice {
		
		@AfterReturning(pointcut="args(memberId, info)", returning="result")
		public void traceReturn(String memberId, UpdateInfo info, boolean result) {
			...
		}
	}
	
	
	8.1 인자의 이름 매핑 처리
	
앞서 args() 명시자를 이용해서 메소드 호출 시 사용된 인자를 파라미터로 전달받을 수 있다고 했다.
args() 명시자에 지정한 이름과 Advice 구현 메소드의 파라미터 이름이 일치하는 지의 여부를 확인하는 순서는 다음과 같다.

	- 1. Advice 어노테이션 태그의 argNames 속성이나 Advice 설정 XML 스키마의 argnames 속성에서 명시한 파라미터 이름을 사용한다.
	- 2. argName 속성이 없을 경우, 컴파일할 때 생성되는 디버그 정보를 이용해서 파라미터 이름이 일치하는 지의 여부를 확인한다.
	- 3. 디버그 옵션이 없을 경우 파라미터 개수를 이용해서 일치 여부를 유추한다.
	
argNames 속성은 Advice 구현 메소드의 파라미터 이름을 입력할 때 사용된다. 아래 코드는 사용 예를 보여주고 있다.
argNames 속성은 모든 파라미터의 이름을 순서대로 표시해서 Pointcut 표현식에서 사용된 이름이 몇 번째 파라미터인지 검색할 수 있도록 한다.

	@AfterReturning(pointcut="args(memberId, info)", argNames="memberId, info")
	public void traceReturn(String memberId, UpdateInfo info) {
		System.out.println("[TA] 정보 수정 : 대상 회원 = %s, 수정정보 = %s \n", memberId, info);
	}
		
	
만약 첫 번째 파라미터의 타입이 JoinPoint나 ProceedingJoinPoint라면, JoinPoint 타입의 파라미터 이름을 포함하지 않는다.


	@AfterReturning(pointcut="args(memberId, info)", argNames="memberId, info")
	public void traceReturn(String memberId, UpdateInfo info) {
		...
	}

	
XML 스키마를 사용하는 경우 다음과 같이 arg-names 속성을 이용해서 파라미터 이름을 지정한다.


	<aop:after-returning
		pointcut="args(memberId, info)" method="traceReturn"
		returning="result" arg-names="joinPoint, memberId, info" />
		
	
argNames 속성 또는 arg-names 속성을 지정하지 않을 경우에는 디버그 정보를 이용한다.

마지막으로 디버그 정보도 없는 경우에는 파라미터 개수를 이용해서 유추한다. 예를 들어, Pointcut 표현식에서 사용한 파라미터 개수가 1개이고 실제 Advice 구현 메소드의 파라미터 개수가 1개라면
일치한다고 판단한다. 만약 Pointcut 표현식에서 사용된 파라미터 개수와 실제 구현 메소드의 파라미터 개수가 다르다면 익셉션이 발생한다.

1번부터 3번까지 모두 해당되지 않는다면 IllegalArgumentException을 발생한다.