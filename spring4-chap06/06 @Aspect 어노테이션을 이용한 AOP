@Aspect 어노테이션을 이용한 AOP 구현은 XML 스키마를 이용한 AOP 구현과 크게 다르지 않다.
차이점이라면 XML 스키마 설정 대신에 @Aspect 어노테이션이 적용된 클래스를 사용한다는 것 뿐이다.


	6.1	Advice 타입별 클래스 작성
	
XML 스키마 방식을 사용할 경우 <aop:around>, <aop:before>와 같은 태그를 이용해서 Advice 타입을 지정했는데,
@Aspect 어노테이엿ㄴ을 사용할 경우에는 @Before나 @Around와 같은 어노테이션을 이용해서 Aspect 구현 메소드에 Advice 타입을 직접 지정한다.

	(1) Before Advice
	
Before Advice를 구현할 때에는 @Before 어노테이션을 사용한다. 아래 코드는 @Before 어노테이션의 사용 예를 보여주고 있다.


	import org.aspectj.lang.annotation.Aspect;
	import org.aspectj.lang.annotation.Before;
	
	@Aspect
	public class LoggingAspect {
		
		@Before("execution(public * net.madvirus.spring4.chap06..*(..))")
		public void before() {
			System.out.println("[LA] 메소드 실행 전 전처리 수행");
		}
	}
	
	
위 코드는 @Before 어노테이션을 적용한 before() 메소드를 Before Advice가 구현된 메소드로 사용한다.

@Before 어노테이션의 값으로는 AspectJ의 Pointcut 표현식이나 또는 @Pointcut 어노테이션이 적용된 메소드 이름이 올 수 있다.
위 코드에서는 직접 Pointcut 표현식을 사용한 예를 보여주고 있으며, 이 Before Advice 구현 메소드는 net.madvirus.spring4.chap06 패키지 또는 그 하위 패키지에 있는
모든 public 메소드가 호출되기 이전에 호출된다.

앞서 XML 스키마 기반의 Before Advice 구현 메소드와 동일하게 JoinPoint 타입의 파라미터를 첫 번째 파라미터로 가질 수 있다.


	@Before("execution(public * net.madvirus.spring4.chap06..*(..))")
	public void before(JoinPoin joinPoint) {
		// 대상 객체의 메소드 실행 이전에 적용할 기능 구현
		...
	}
	
	
(2) After Returning Advice After Returning Advice를 구현하려면 @AfterReturning 어노테이션을 Advice 구현 메소드에 적용하면 된다.
다음 코드를 보면 afterReturning() 메소드에 @AfterReturning 어노테이션이 적용되어 있는데, 이 경우 afterReturning() 메소드가 After Returning Advice가 된다.


	import org.aspectj.lang.annotation.Aspect;
	import org.aspectj.lang.annotation.Before;
	
	@Aspect
	public class LoggingAspect {
		
		@AfterReturning("net.madvirus.spring4.chap06.aop.PublicPointcut.publicMethod()")
		public void afterReturning() {
			System.out.println("[LA] 메소드 실행 후 후처리 수행");
		}
	}
	
	
만약 Advice 구현 메소드 내에서 Advice 대상 객체가 리턴한 값을 사용하고 싶다면, 다음과 같이 returning 속성을 이용해서 리턴 값을 전달받을 파라미터의 이름을 지정해주면 된다.


	@AfterReturning(
		pointcut = "net.madvirus.spring4.chap06.aop.PublicPointcut.publicMethd()",
		returning = "ret")
	public void afterReturning(Object ret) {
		System.out.println("[LA] 메소드 실행 후 후처리 수행, 리턴값=" + ret);
	}
	
	
만약 리턴 된 객체가 특정 타입인 경우에 한해서 메소드를 실행하고 싶다면 한정하고 싶은 타입의 파라미터를 사용하면 된다.


	@AfterReturning(
		pointcut = "net.madvirus.spring4.chap06.aop.PublicPointcut.publicMethd()",
		returning = "ret")
	public void afterReturning(Article ret) {
		// 대상 객체의 메소드가 정상적으로 실행된 이후에 적용할 기능 구현
	}
	
	
대상 객체 및 호출되는 메소드에 대한 정보나 전달되는 파라미터에 대한 정보가 필요한 경우 org.aspectj.lang.JoinPoint를 파라미터로 추가한다.


	@AfterReturning(
		pointcut = "net.madvirus.spring4.chap06.aop.PublicPointcut.publicMethd()",
		returning = "ret")
	public void afterReturning(JoinPoint joinPoint, Object ret) {
		// 대상 객체의 메소드가 정상적으로 실행된 이후에 적용할 기능 구현
	}
	
	
	(3) After Throwing Advice
	
@AfterThrowing 어노테이션을 사용하면 After Throwing Advice 메소드를 구현할 수 있다.
아래 코드는 구현 예를 보여주고 있다.

	
	import org.aspectj.lang.annotation.AfterThrowing;
	import org.aspectj.lang.annotation.Aspect;
	
	@Aspect
	public class LoggingAspect {
		
		@AfterThrowing("net.madvirus.spring4.chap06.aop.PublicPointcut.publicMethod()")
		public void afterThrowing() {
			System.out.println("[LA] 메소드 실행 후 익셉션 발생");
		}
	}
	
	
Advice 구현 메소드 내에서 Advice 대상 메소드가 발생시킨 익셉션 객체에 접근하려면 throwing 속성을 이용해서 익셉션 객체에 전달 받을 파라미터의 이름을 지정해주면 된다.


	@AfterThrowing(
		pointcut = "net.madvirus.spring4.chap06.aop.PublicPointcut.publicMethod()",
		throwing = "ex")
	public void afterThrowing(Throwable ex) {
		System.out.println("[LA] 메소드 실행 후 익셉션 발생, 익셉션=" + ex.getMessage());
	}
	
	
만약 특정 타입의 익셉션에 대해서만 처리하고 싶다면, Throwable 이나 Exception이 아니라 처리하고 싶은 타입을 파라미터로 지정하면 된다.
예를 들어, 다음 코드의 경우는 발생된 익셉션이 ArticleNotFoundException인 경우에만 호출된다.


	@AfterThrowing(
		pointcut = "net.madvirus.spring4.chap06.aop.PublicPointcut.publicMethod()",
		throwing = "ex")
	public void afterThrowing(ArticleNotFoundException ex) {
		// 대상 객체의 메소드가 익셉션을 발생시킨 경우에 적용할 기능 구현
		...
	}
	
	
대상 객체 및 호출되는 메소드에 대한 정보나 전달되는 파라미터에 대한 정보가 필요한 경우 다음과 같이 org.aspectj.lang.JoinPoint를 파라미터로 추가한다.


	@AfterThrowing(
		pointcut = "net.madvirus.spring4.chap06.aop.PublicPointcut.publicMethod()",
		throwing = "ex")
	public void afterThrowing(JoinPoint joinPoint, Exception ex) {
		// 대상 객체의 메소드가 익셉션을 발생시킨 경우에 적용할 기능 구현
		...
	}
	
	
	(4) After Advice
	
After Advice를 구현하고 싶은 경우 @After 어노테이션을 사용한다.


	import org.aspectj.lang.annotation.After;
	import org.aspectj.lang.annotation.Aspect;
	
	@Aspect
	public class LoggingAspect {
		
		@After("net.madvirus.spring4.chap06.aop.PublicPointcut.publicMethod()")
		public void afterFinally() {
			System.out.println("[LA] 메소드 실행 완료");
		}
	}
	
	
대상 객체 및 호출되는 메소드에 대한 정보나 전달되는 파라미터에 대한 정보가 필요한 경우 다음과 같이 org.aspectj.lang.JoinPoint를 파라미터로 명시하면 된다.


	@After("net.madvirus.spring4.chap06.aop.PublicPointcut.publicMethod()")
	public void afterFinally(JoinPoint joinPoint) {
		...
	}
	
	
	(5) Around Advice
	
@Around 어노테이션을 이용하면 Around Advice를 구현할 수 있다.
Around Advice를 구현한 메소드는 org.aspectj.lang.ProceedingJoinPoint 타입을 첫 번째 파라미터로 지정해야 한다.
그렇지 않을 경우 익셉션이 발생한다.

다음은 @Around 어노테이션을 이용해서 Around Advice를 구현한 클래스의 예제 코드이다.


	package net.madvirus.spring4.chap06.aop;
	
	import java.util.HashMap;
	import java.util.Map;
	
	import org.aspectj.lang.ProceedingJoinPoint;
	import org.aspectj.lang.annotation.Around;
	import org.aspectj.lang.annotation.Aspect;
	
	import net.madvirus.spring4.chap06.board.Article;
	
	@Aspect
	public class ArticleCacheAspect {
	
		private Map<Integer, Article> cache = new HashMap<Integer, Article>();
	
		@Around("execution(public * *..ReadArticleService.*(..))")
		public Article cache(ProceedingJoinPoint joinPoint) throws Throwable {
			Integer id = (Integer) joinPoint.getArgs()[0];
			Article article = cache.get(id);
			if (article != null) {
				System.out.println("[ACA] 캐시에서 Article[" + id + "] 구함");
				return article;
			}
			Article ret = (Article) joinPoint.proceed();
			if (ret != null) {
				cache.put(id, ret);
				System.out.println("[ACA] 캐시에 Article[" + id + "] 추가함");
			}
			return ret;
		}
	}
	
	
위 코드의 라인 18을 보면 첫 번째 파라미터로 ProceedingJoinPoint를 전달받고 있다.
ProceedingJoinPoint의 proceed() 메소드를 호출하면 프록시 대상 객체의 실제 메소드를 호출하므로, ProceedingJoin.proceed() 메소드를 호출하기 전과 후에 필요한 작업을 수행할 수 있다.
(실제 코드는 앞서 XML 스키마 기반의 ArticleCacheAdvice.java 와 비슷하므로 추가적인 설명은 생략한다.)

@Aspect 어노테이션을 적용한 Aspect가 제대로 적용되는지 확인하기 위해 다음과 같이 XML 설정을 작성해보자.


	<?xml version="1.0" encoding="UTF-8"?>
	
	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:aop="http://www.springframework.org/schema/aop" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
	       http://www.springframework.org/schema/beans/spring-beans.xsd
	       http://www.springframework.org/schema/aop
	       http://www.springframework.org/schema/aop/spring-aop.xsd">
	       
	    <aop:aspectj-autoproxy />
	     
	    <bean id="cache" class="net.madvirus.spring4.chap06.aop.ArticleCacheAspect" />
	     
		<bean id="readArticleService"
			class="net.madvirus.spring4.chap06.board.ReadArticleServiceImpl">
			<property name="articleDao: ref="articleDao" />
		</bean>
		
		...
	</bean>
	
	
위 설정을 이용해서 스프링 컨테이너를 생성한 뒤에 "readArticleService" 빈 객체를 구해서 실해해보자.


	GenericXmlApplication ctx = 
		new GenericXmlApplicationContext("classpath:acQuickStart2.xml");
		
	ReadArticleService readArticleService = 
		ctx.getBean("readArticleService", ReadArticleService.class);
	readArticleService.read(1);
	readArticleService.read(1);
	
	
위 코드를 실행하면 다음과 같은 결과가 출력된다.


	-- 첫 번째 readArticleService.read(1) 코드 실행의 출력 결과
	ReadArticleServiceImpl.read(1) 호출됨
	[ACA] 캐시에 Article[1] 추가함
	
	-- 두 번째 readArticleService.read(1) 코드 실행 출력 결과
	[ACA] 캐시에서 Article[1] 구함
	
	
이 실행 결과를 통해 @Aspect 어노테이션을 이용해서 구현한 Aspect가 적용된 것을 알 수 있다.


	6.2	@Pointcut 어노테이션을 이용한 Pointcut 설정
	
앞서 XML 스키마를 사용할 때에는 다음과 같이 <aop:pointcut> 태그와 각 Advice 설정 태그의 pointcut-ref 속성을 이용해서 Pointcut을 설정하고
여러 Advice에서 동일한 Pointcut을 참조할 수 있었다.


	<aop:aspect id="loggingAspect" ref="loggingAdvice" order="1">
		
		<aop:pointcut id="publicMethod"
			expression="execution(public * net.madvirus.spring4.chap06..*(..))" />
			
		<aop:before method="before" pointcut-ref=:publicMethod" />
		<aop:after-returning method="afterReturning"
			pointcut-ref="publicMethod" returning="ref" />
		<aop:after-throwing method="afterThrowing"
			pointcut-ref="publicMethod" throwing="ex" />
		<aop:after method="afterFinally" pointcut-ref="publicMethod" />
		
	</aop:aspect>
	
	
XML 스키마를 사용하는 경우와 동일하게 @Aspect 어노테이션을 사용하는 경우에도 @Pointcut 어노테이션을 이용해서 Pointcut 설정을 재사용할 수 있다.
아래 코드는 @Pointcut 어노테이션의 사용 예를 보여주고 있다.

	
	@Aspect
	public class ProfilingAspect {
	
		@Pointcut("execution(public * net.madvirus.spring4.chap06.board..*(..))")
		private void profileTarget() {}
		
		@Around("profileTarget()")
		public Object trace(ProceedingJoinPoint joinPoint) throws Throwable {
			...
		}
	}
	
	
위 코드에서 @Pointcut 어노테이션은 Pointcut 표현식을 값으로 가지며 @Pointcut 어노테이션이 적용된 메소드는 리턴 타입이 void 이어야만 한다.
일반적으로 @Pointcut 어노테이션이 적용된 메소드는 위 코드에서와 같이 메소드 몸체에 코드를 갖지 않는다. (정확하게는 코드를 가져도 의미가 없다.)

@Pointcut 어노테이션을 이용해서 Pointcut을 정의하면, 위 코드처럼 Advice 관련 어노테이션에서 @Pointcut 어노테이션이 적용된 메소드(이하, @Pointcut)의 이름을
이용해서 Pointcut을 참조할 수 있다. 이때 메소드 이름은 다음과 같이 범위에 따라서 알맞게 입력해야 한다.

	- 같은 클래스에 위치한 @Pointcut 메소드는 '메소드이름'만 입력
	- 같은 패키지에 위치한 @Pointcut 메소드는 '클래스단순이름.메소드이름'을 입력
	- 다른 패키지에 위치한 @Pointcut 메소드는 '완전한클래스이름.메소드이름'을 입력
	
아래 코드는 클래스의 단순 이름과 완전한 클래스 이름을 사용하는 경우의 예이다.


	@Aspect
	public class LoggingAspect {
	
		// 클래스의 단순한 이름을 사용
		@Before("PublicPointcut.publicMethod()")
		public void before() {
			System.out.println("[LA] 메소드 실행 전 전처리 수행");
		}
		
		// 클래스의 완전한 이름을 사용
		@AfterReturning(
			pointcut = "net.madvirus.spring4.chap06.aop.PublicPointcut.publicMethod()",
			returning = "ret")
		public void afterReturning(Object ret) {
			System.out.println("[LA] 메소드 실행 후 후처리 수행, 리턴값=" + ret);
		}
		
	}
	
	
@Pointcut 메소드를 사용할 때 주의할 점은 메소드 접근 제어가 그대로 적용된다는 점이다.
예를 들어, 다음과 같이 private으로 설정된 @Pointcut 메소드가 있다고 해보자.


	public class CommonPointcut {
		
		@Pointcut("execution(public * *(..))")
		private void publicMethod() {}
	}
	
	
publicMethod() 메소드는 private이기 때문에 다음과 같이 다른 클래스에서 CommonPoint 클래스의 publicMethod() 메소드에 정의된 Pointcut을 사용할 경우 익셉션이 발생하게 된다.


	@Aspect
	public class LoggingAspect {
	
		// publicMethod()는 private이므로 접근할 수 없다는 익셉션 발생
		@Before("CommonPointcut.publicMethod()")
		public void before() {
			...
		}
	}
	
	
@Pointcut 메소드는 @Aspect 기반의 Aspect 구현뿐만 아니라 다음 코드처럼 XML 스키마의 pointcut 속성 값으로도 사용할 수 있다.


	<aop:after method="afterFinally"
		pointcut="net.madvirus.spring4.chap06.aop.PublicPointcut.publicMethod()" />
		
		
	6.3	자바 설정에서 @EnableAspectJAutoProxy를 이용한 @Aspect 적용하기
	
@Configuration을 이용한 자바 코드 스프링 설정 방식을 사용할 경우, @EnableAspectJAutoProxy 어노테이션을 사용하면 @Aspect가 적용된 빈 객체를 Aspect로 사용할 수 있게 된다.
다음은 @EnableAspectJAutoProxy 어노테이션을 사용한 자바 기반의 작성 예이다.


	package net.madvirus.spring4.chap06.config;
	
	import ...
	
	import org.springframework.context.annotation.Bean;
	import org.springframework.context.annotation.Configuration;
	import org.springframework.context.annotation.EnableAspectJAutoProxy;
	
	@Configuration
	@EnableAspectJAutoProxy
	public class QuickStartConfig {
	
		@Bean
		public ProfilingAspect performanceTraceAspect() {
			return new ProfilingAspect();	// @Aspect를 사용한 Aspect 클래스
		}
	
		@Bean
		public ArticleDao articleDao() {
			return new MemoryArticleDao();
		}
	
		@Bean
		public WriteArticleServiceImpl writeArticleService() {
			return new WriteArticleServiceImpl(articleDao());
		}
		
	}


위 자바 설정을 사용하는 코드를 다음과 같이 작성한 뒤에 실행해보자.


	public class MainJavaConfigQuickStart {
	
		public static void main(String[] args) {
			AnnotationConfigApplicationContext ctx =
					new AnnotationConfigApplicationContext(QuickStartConfig.class);
	
			WriteArticleService writeArticleService =
					ctx.getBean("writeArticleService", WriteArticleService.class);
			writeArticleService.write(new NewArticleRequest("writer", "title", "content"));
			
			...
		}
	}
	
	
위 코드를 실행하면 다음과 같이 "writeArticleService" 빈의 메소드를 호출할 때 ProfilingAspect가 적용되는 것을 확인할 수 있다.


	WriteArticleService.write(..) 시작
	WriteArticleServiceImpl.write() 호출됨
	ArticleDao.insert(..) 시작
	MemoryArticleDao.insert() 호출됨
	ArticleDao.insert(..) 종료
	ArticleDao.insert(..) 실행 시간 : 0ms
	WriteArticleService.write(..) 종료
	WriteArticleService.write(..) 실행 시간 : 0ms