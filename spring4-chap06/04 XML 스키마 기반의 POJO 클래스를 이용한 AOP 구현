XML을 사용할 경우 aop 네임스페이스를 이용해서 간단하게 AOP를 설정할 수 있다. 
먼저, aop 네임스페이스를 사용하려면 <beans> 루트 태그에 다음과 같이 aop 네임스페이스에 대한 스키마를 지정해야 한다.

	<?xml version="1.0" encoding="UTF-8"?>
	
	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:aop="http://www.springframework.org/schema/aop" 
		xsi:schemaLocation="http://www.springframework.org/schema/beans
	       http://www.springframework.org/schema/beans/spring-beans.xsd
	       http://www.springframework.org/schema/aop
	       http://www.springframework.org/schema/aop/spring-aop.xsd">
		...
	</beans>

	
aop 네임스페이스의 XML 스키마를 지정했다면, 다음과 같이 <aop:config> 태그를 사용하여 AOP 관련 정보를 설정할 수 있다.


	<bean id="profiler" class="net.madvirus.spring4.chap06.aop.Profiler" />
	
	<aop:config>
		<aop:aspect id="traceAspect" ref="profiler" order="2">
			<aop:pointcut id="publicMethod"
				expression="within(net.madvirus.spring4.chap06..*(..))" />
			<aop:around pointcut-ref="publicMethod" method="trace" />
		</aop:aspect>
	</aop:config>
	
	<bean id="memberService"
		class="net.madvirus.spring4.cap06.member.MemberServiceImpl" />
		
		
위 코드에서 aop 네임스페이스에 속하는 태그는 다음과 같은 정보를 설정한다.

	- <aop:config> : AOP 설정 정보임을 나타낸다.
	- <aop:aspect> : Aspect를 설정한다.
	- <aop:pointcut> : Pointcut을 설정한다.
	- <aop:around> : Around Advice를 설정한다. 이외에도 다양한 Advice를 설정할 수 있다.
	
<aop:aspect> 태그의 ref 속성은 Aspect의 공통 기능을 제공할 빈을 설정할 때 사용된다.
위 코드는 Aspect 기능을 제공할 빈으로 "profiler" 빈을 저장하고 있다.

위 코드를 보면 다음 내용을 어렵지 않게 유추할 수 있다.

	- 이름이 "traceAspect"인 Aspect는 MemberServiceImpl 클래스의 public 메소드에 대해 Around Aspect로 적용돔
	- "traceAspect"의 구현으로 사용되는 profiler 빈의 "trace" 메소드를 통해 공통 기능으 ㄹ제공함
	
XML 스키마 기반의 AOP 설정은 이렇게 설정 파일만 보더라도 어렵지 않게 어떤 코드에 어떤 Aspect가 어떤 타입의 Advice로 적용되는지를 파악할 수 있다.


	4.1 Aspect 설정
	
Aspect 설정에서 <aop:aspect> 태그는 한 개의 Aspect를 설정한다. <aop:aspect> 태그의 ref 속성에는 공통 기능을 구현하고 있는 빈을 전달한다.


	<aop:config>
		<aop:aspect id="traceAspect" ref="profiler" order="2">
			<aop:pointcut id="publicMethod"
				expression="within(net.madvirus.spring4.chap06..*(..))" />
			<aop:around pointcut-ref="publicMethod" method="trace" />
		</aop:aspect>
	</aop:config>
	
	
Aspect를 적용할 Pointcut은 <aop:pointcut> 태그를 이용하여 설정한다.
<aop:pointcut> 태그의 id 속성은 Pointcut을 구분하는 데 사용되는 식별 값으로 사용되고, expression 속성은 Pointcut을 정의하는 AspectJ의 표현식을 입력받는다.
ApsectJ의 표현식에 대한 내용은 뒤에서 살펴본다.

<aop:around>를 비롯하여 각 타입의 Advice를 정의하기 위해 다음과 같은 태그를 제공하고 있다.


	태그							설명
	
	<aop:before>				메소드 실행 전에 적용되는 Advice를 정의한다.
	
	<aop:after-returning>		메소드가 정상적으로 실행된 후에 적용되는 Advice를 정의한다.
	
	<aop:after-throwing>		메소드가 익셉션을 발생시킬 때 적용되는 Advice를 정의한다. try-catch 블록에서 catch 블록과 비슷하다.
	
	<aop:after>					메소드가 정상적으로 실행되는지 또는 익셉션을 발생시키는지 여부에 상관없이 적용되는 Advice를 정의한다.
								try-catch-finally에서 finally 블록과 비슷하다.
	
	<aop:around>				메소드 호출 이전, 이후, 익셉션 발생 등 모든 시점에 적용 가능한 Advice를 정의한다.
	
	
위의 각 태그는 pointcut 속성 또는 pointcut-ref 속성을 사용하여 Advice가 적용될 Pointcut을 지정한다.
pointcut-ref 속성은 <aop:pointcut> 태그를 이용하여 설정한 Pointcut을 참조할 때 사용되며, pointcut 속성은 직접 AspectJ 표현식을 이용하여 Pointcut을 지정할 때 사용된다.

아래 코드는 pointcut 속성과 pointcut-ref 속성의 사용 예를 보여주고 있다.


	<aop:config>
		<aop:aspect id="traceAspect1" ref="profiler">
			<aop:pointcut id="publicMetohd"
				expression="execution(public * net.madvirus.spring4.chap06.board..*(..))" />
			<aop:around pointcut-ref="publicMethod" method="trace" />
		</aop:aspect>
		
		<aop:aspect id="traceAspect2" ref="profiler2">
			<aop:pointcut id="publicMetohd"
				expression="execution(public * net.madvirus.spring4.chap06.member.*(..))"
				method="trace2" />
		</aop:aspect>
	</aop:config>
	
	
Advice의 각 태그는 Pointcut에 포함되는 대상 객체의 메소드가 호출될 때, <aop:aspect> 태그의 ref 속성으로 지정한 빈 객체에서 어떤 메소드를 실행할 지를 지정한다.
예를 들어, 위 코드는 net.madvirus.spring4.chap06.member 패키지 및 그 하위 패키지의 public 메소드가 호출될 때 profiler2 빈의 trace2 메소드가 호출되도록 설정하고 있다.


	4.2 Advice 타입별 클래스 작성
	
<aop:before>, <aop:around> 등의 태그는 <aop:aspect> 태그의 ref 속성에 전달된 빈 객체의 메소드를 실행함으로써 Advice를 대상 객체에 적용한다.
예를 들어, 아래 설정에서는 Around Advice가 제공해야 할 기능을 profiler 빈 객체의 trace() 메소드에 구현한다.


	<bean id="profiler" class="net.madvirus.spring4.chap06.aop.Profiler" />
	
	<aop:config>
		<aop:aspect id="traceAspect1" ref="profiler">
			<aop:pointcut id="publicMetohd"
				expression="execution(public * net.madvirus.spring4.chap06.board..*(..))" />
			<aop:around pointcut-ref="publicMethod" method="trace" />
		</aop:aspect>
	<aop:config>
	
	
각 타입의 Advice에 따라서 메소드의 구현 방법이 조금씩 차이가 나는데, Advice 타입 별로 메소드 구현 방법을 살펴보도록 하자.

	(1) Before Advice
	
Before Advice를 사용하려면 <aop:before> 태그를 이용한다. 아래 코드는 <aop:before> 태그의 설정 예이다.


	<aop:config>
		...
		<aop:aspect id="loggingAspect" ref="logger">
			<aop:before pointcut-ref="publicMethod" method="before" />
		</aop:aspect>
	</aop:config>
	
	
Advice로 사용될 빈 클래스는 다음과 같이 <aop:before> 태그의 method 속성에 명시한 메소드를 구현하면 된다.

	
	public void before() {
		// 대상 객체의 메소드 실행 이전에 적용할 기능 구현
		...
	}
	
	
대상 객체 및 호출되는 메소드에 대한 정보 또는 전달되는 파라미터에 대한 정보가 필요하다면, org.aspectj.lang.JoinPoint 타입의 파라미터를 메소드에 전달한다.


	public void before(JoinPoint joinPoint) {
		// 대상 객체의 메솓 ㅡ실행 이전에 적용할 기능 구현
		...
	}
	
	
Before Advice를 구현한 메소드는 일반적으로 리턴 타입이 void인데, 그 이유는 리턴 값을 갖도라도 실제 Advice의 적용 과정에서 사용되지 않기 때문이다.

Before Advice를 사용할 경우 코드 실행 흐름은 다음과 같다.


	- 1. 빈 객체를 사용하는 코드에서 스프링이 생성한 AOP 프록시의 메소드를 호출
	- 2. AOP 프록시는 <aop:before>에서 지정한 메소드를 호출
	- 3. AOP 프록시는 Aspect 기능 실행 후, 실제 빈 객체의 메소드를 호출
	
			1: operation()				3: operation()
				→							→
	Client──────────────────aop proxy───────────────────────target bean
								│ ↓ 2: before 메소드
								│
							before aspect
							
							
위 그림은 이 흐름을 그림으로 표현한 것인데, 가운에 위치한 "aop proxy" 객체는 스프링이 생성한 AOP 프록시 객체이고,
우측에 위치한 "target bean"이 XML/자바 설정에서 지정한 실제 빈 객체이다.

Before Advice 용도로 메소드를 구현할 때 주의할 점은 메소드에서 익셉션을 발생시킬 경우 대상 객체의 메소드가 호출되지 않는다는 점이다.

[Before Advice에서 익셉션을 발생시키면 대상 객체의 메소드가 호출되지 않기 때문에, 메소드를 실행하기 전에 접근 권한을 검사해서 접근 권한이 없을 경우
익셉션을 발생시키는 기능을 구현하는 데 Before Advice가 적합하다.]

	(2) After Returning Advice
	
After Returning Advice는 대상 객체의 메소드가 정상적으로 실행된 후에 공통 기능을 적용하고 싶을 때 사용되는 Advice로서, 
다음과 같이 <aop:after-returning> 태그를 이용하여 설정한다.


	<aop:config>
		...
		<aop:aspect id="loggingAspect" ref="logging">
			<aop:after-returning pointcut-ref="publicMethod"
				method="afterReturning" />
		</aop:aspect>
	</aop:config>
	
	
Advice로 사용될 빈 클래스는 아래 코드처럼 <aop:after-returning> 태그에 명시한 메소드를 구현한다.


	public void afterReturning() {
		// 대성 객체의 메소드가 정상적으로 실행된 이후에 적용할 기능 구현
		...
	}
	
	
After Returning Advice를 사용할 경우 코드 실행 흐름은 다음과 같다.
	
	
	- 1. 빈 객체를 사용하는 코드에서 스프링이 생성한 AOP 프록시의 메소드를 호출
	- 2. AOP 프록시는 실제 빈 객체의 메소드를 호출
	- 3. AOP 프록시는 <aop:after-returning>에서 지정한 메소드 호출
	
	
			1: operation()				2: operation()
				→							→
	Client──────────────────aop proxy───────────────────────target bean
								│ ↓ 3: after 메소드
								│
							after aspect	
	
	
Advice를 구현한 메소드에서 대상 객체가 리턴한 값을 사용하고 싶다면, returning 속성을 사용하여 리턴 값을 전달받을 파라미터의 이름을 명시해주면 된다.


	<aop:after-returning pointcut-ref="publicMethod"
		method="afterReturning" returning="ref" />
		
		
Advice를 구현한 메소드는 returning 속성에 명시한 이름을 갖는 파라미터를 이용해서 리턴 값을 전달 받게 된다.


	public void afterReturning(Object ret) {
		// 대상 객체의 메소드가 정상적으로 실행된 이후에 적용할 기능 구현
		...
	}
	
	
만약 리턴 된 객체가 특정 타입인 경우에 한해서 메소드를 실행하고 싶다면 다음과 같이 한정하고 싶은 타입의 파라미터를 사용하면 된다.


	public void afterReturning(Article ret) {
		...
	}
	
	
대상 객체 및 호출되는 메소드에 대한 정보나 전달되는 파라미터에 대한 정보가 필요한 경우 다음과 같이 org.aspectj.lang.JoinPoint를 파라미터로 추가한다.


	public void afterReturning(JoinPoint joinPoint, Object ret) {
		...
	}
	
	
	(3) After Throwing Advice
	
After Throwing Advice는 대상 객체의 메소드가 익셉션을 발생시킨 경우에 적용되는 Advice로서 다음과 같이 <aop:after-throwing> 태그를 이용하여 설정한다.


	<aop:config>
		<aop:aspect id="loggingAspect" ref="logging">
			<aop:after-throwing pointcut-ref="publicMethod"
				method="afterThrowing" />
		</aop:aspect>
	</aop:config>
	
	
Aspect 구현 클래스는 다음과 같이 <aop:after-throwing> 태그에 명시한 메소드를 구현한다.


	public void afterThrowing() {
		// 대상 객체의 메소드가 익셉션을 발생시킨 경우에 적용할 기능 구현
		...
	}
	
	
After Throwing Advice의 실행 흐름은 After Return Advice와 동일하다. 차이점이 있다면, After Return Advice는 AOP 대상 객체의 메소드가 정상적으로 실행될 때
사용되는 반면에 After Throwing Advice는 AOP 대상 객체의 메소드가 익셉션을 발생시킬 때 사용된다는 점이다.

대상 객체의 메소드가 발생시킨 익셉션 객체가 필요한 경우 throwing 속성에 익셉션 객체를 전달받을 파라미터의 이름을 명시하면 된다.


	<aop:after-throwing pointcut-ref="publicMethod"
		method="afterThrowing" throwing="ex" />
		
		
Advice 구현 메소드에서 발생된 익셉션을 사용하려면 <aop:after-throwing> 태그의 throwing 속성에 명시한 이름을 갖는 파라미터를 추가한다.


	public void afterThrowing(Throwable ex) {
		...
	}
	
	
만약 특정 타입의 익셉션에 대해서만 처리하고 싶다면, Throwable이나 Exception이 아니라 처리하고 싶은 익셉션 타입을 파라미터로 지정하면 된다.
예를 들어, 아래 코드는 발생된 익셉션이 ArticleNotFoundException인 경우에만 호출된다ㅓ.


	public void afterThrowing(ArticleNotFoundException ex) {
		...
	}
	
	
대상 객체 및 호출되는 메소드에 대한 정보나 전달되는 파라미터에 대한 정보가 필요한 경우 다음과 같이 org.aspectj.lang.JoinPoint를 파라미터로 추가한다.


	public void afterThrowing(JoinPoint joinPoint, Exception ex) {
		...
	}
	
	
	(4) After Advice
	
After Advice는 대상 객체의 메소드가 정상적으로 실행되었는지 아니면 익셉션을 발생시켰는지의 여부에 상관없이 메소드 실행이 종료된 이후에 적용되는 Advice로서
try-catch-finally 블록에서 finally 블록과 비슷한 기능을 수행한다. 다음과 같이 <aop:after> 태그를 이용하여 After Advice를 설정한다.


	<aop:config>
		<aop:aspect id="loggingAspect" ref="logger">
			<aop:after pointcut-ref="publicMethod" method="afterFinally" />
		</aop:aspect>
	</aop:config>
	
	
Aspect로 사용될 빈 클래스는 다음과 같이 <aop:after> 태그에 명시한 메소드를 구현해주면 된다.
이 메소드는 파라미터를 갖지 않는다.


	public void afterFinally() {
		...
	}
	
	
대상 객체 및 호출되는 메소드에 대한 정보나 전달되는 파라미터에 대한 정보가 필요한 경우 다음과 같이 org.aspectj.lang.JoinPoint를 파라미터로 명시하면 된다.


	public void afterFinally(JoinPoin joinPoint) {
		...
	}
	
	
	(5) Around Advice
	
Around Advice는 앞서 살펴 본 Before, After Returning, After Throwing, After Advice를 모두 구현할 수 있는 Advice로서
다음과 같이 <aop:around> 태그를 이용하여 Around Advice를 설정한다.


	<aop:config>
		<aop:aspect id="cacheAspect" ref="cache">
			<aop:around method="cache"
				pointcut="execution(public * *..ReadArticleService.*(..))" />
		</aop:aspect>
	</aop:config>
	
	
Around Advice를 구현한 메소드는 org.aspectj.lang.ProceedingJoinPoint 타입을 첫 번째 파라미터로 지정해야 한다.
그렇지 않을 경우 초기화 과정에서 익셉션이 발생한다.

다음은 Around Advice의 구현 예를 보여주고 있다.


	package net.madvirus.spring4.chap06.aop;
	
	import java.util.HashMap;
	import java.util.Map;
	
	import net.madvirus.spring4.chap06.board.Article;
	
	public class ArticleCacheAdvice {
		private Map<Integer, Article> cache = new HashMap<Integer, Article>();
	
		public Article cache(ProceedingJoinPoint joinPoint) throws Throwable {
			Integer id = (Integer) joinPoint.getArgs()[0];
			Article article = cache.get(id);
			if (article != null) {
				System.out.println("[ACA] 캐시에서 Article[" + id + "] 구함");
				return article;
			}
			Article ret = (Article) joinPoint.proceed();
			if (ret != null) {
				cache.put(id, ret);
				System.out.println("[ACA] 캐시에 Article[" + id + "] 추가함");
			}
			return ret;
		}
	}
	
	
위 코드의 cache 메소드를 보면 첫 번째 파라미터로 ProceedingJoinPoint를 전달받고 있다.
ProceedingJoinPoint의 proceed() 메소드를 호출하면 프록시 대상 객체의 실제 메소드를 호출하게 된다. 따라서 ProceedingJoinPoint.proceed() 메소드를 
호출하기 전과 후에 알맞은 공통 기능을 구현하면 된다.

위 코드는 대상 객체의 메소드를 호출하기 전후에 캐시 기능을 삽입하였다. proceed() 메소드를 호출하기 전에 Map에 ID에 해당하는 Article 객체가 존재하는 지 검사한다.
존재할 경우 Map에 보관된 Article 객체를 리턴한다. 존재하지 않을 경우 proceed() 메소드를 호출해서 실제 대상 객체의 메소드를 실행하고, 그 결과로 전달받은 객체를 Map에 저장한다.

ArticleCacheAdvice를 테스트 하기 위해 아래와 같은 스프링 설정을 했다고 하자.


	<aop:config>
		<aop:aspect id="cacheAspect" ref="cache">
			<aop:around method="cache"
				pointcut="execution(public * *..ReadArticleService.*(..))" />
		</aop:aspect>
	</aop:config>
	
	<bean id="readArticleService"
		class="net.madvirus.spring4.chap06.board.ReadArticleServiceImpl">
		<property name="articleDao" ref="articleDao" />
	</bean>
	

위 설정에서 <aop:around> 설정은 ReadArticleService 타입의 모든 public 메소드에 cache를 Around Advice로 적용하고 있다.
이 설정을 이용해서 스프링 컨테이너를 초기화한 뒤에 "readArticleService" 빈의 메소드를 호출하면, 다음과 같은 순서로 실행된다.

				1: read()
					→
	Client──────────────────────readArticleService 빈
								스프링이 생성한 AOP 프록시
										│
										│	↓ 2: cache 메소드
										│
									cache 빈
								Around Aspect
										│
										│	↓ 3: read()
										│
								ReadArticleServiceImpl 객체
								
								
스프링 컨테이너에서 "readArticleService" 빈을 구하면, 스프링은 실제 ReadArticleServiceImpl 객체가 아닌 스프링이 생성한 AOP 프록시 객체를 제공한다.
따라서, "readArticleService" 빈을 구해서 read() 메소드를 호출 -위 그림의 1번 과정- 하면, 스프링이 생성한 AOP 프록시 객체는 Around Advice Aspect 로 사용되는
"cache" 빈의 cache() 메소드를 호출 -2번 과정- 한다. ArticleCacheAdvice.java에서 "cache" 빈의 cache() 메소드를 보면,
joinPoint.proceed() 메소드를 실행하는데, 이 코드를 실행하면 결과적으로 위 그림의 3번 과정을 통해 원본 ReadArticleServiceImpl 객체의 read() 메소드를 실행한다.


	public Article cache(ProceedingJoinPoint joinPoint) throws Throwable {
		Integer id = (Integer) joinPoint.getArgs()[0];
		Article article = cache.get(id);
		if (article != null) {
			System.out.println("[ACA] 캐시에서 Article[" + id + "] 구함");
			return article;
		}
		Article ret = (Article) joinPoint.proceed();	// 대상 객체 실행
		if (ret != null) {
			cache.put(id, ret);
			System.out.println("[ACA] 캐시에 Article[" + id + "] 추가함");
		}
		return ret;
	}

	
ArticleCacheAdvice 클래스는 캐시 기능을 제공한다. 위 코드를 보면 cache 맵에 이미 id에 해당하는 Article 객체가 보과되어 있으면 바로 그 객체를 리턴하고, 
그렇지 않은 경우에만 joinPoint.proceed() 코드를 통해 원래 객체를 실행하게 된다.
실제 아래와 같이 "readArticleService" 빈을 구해서 read() 메소드를 두 번 실행하는 코드를 만들어보자.

	
	GenericXmlApplicationContext ctx = 
		new GenericXmlApplicationContext("classpath:acQuickStart.xml");
	ReadArticleService readArticleSertice = 
		ctx.getBean("readArticleService", ReadArticleService.class);
	readArticleService.read(1);
	readArticleService.read(1);
	
	
위 코드에서 readArticleService.read(1) 코드를 두 번 실행했는데 이렇게 하면 다음과 같디 동작하게 된다.


	- 첫 번째 read(1) 실행 : ArticleCacheAdvice의 cache 맵에 1에 해당하는 Article 객체가 없으므로, 원래 ReadArticleServiceImpl 객체의 read() 메소드를 실행한다.
		그리고, 실행 결과를 cache 맵에 보관한다.
	- 두 번째 read(1) 실행 : ArticleCacheAdvice의 cache 맵에 1에 해당하는 Article 객체가 존재하므로, 그 객체를 리턴한다.
		이때 원래 ReadArticleServiceImpl 객체의 read() 메소드는 실행되지 않는다.
		
ReadArticleServiceImpl의 read() 메소드가 호출되면 콘솔에 내용을 출력하도록 했는데, 실제 실행해보면 다음과 같은 결과가 출력된다.

	
	-- 첫 번째 read(1) 실행할 때 출력
	ReadArticleServiceImpl.read(1) 호출됨		(ReadArticleServiceImpl.read() 에서 출력)
	[ACA] 캐시에 Article[1] 추가함				(ArticleCacheAdvice.cache() 에서 출력)

	-- 두 번째 read(1) 실행할 때 출력
	[ACA] 캐시에서 Article[1] 구함				(ArticleCacheAdvice.cache() 에서 출력)
	
	
이 실행 결과를 보면, 두 번째 read(1)을 실행할 때에는 ArticleCacheAdvice만 실행되고 
실제 ReadArticleServiceImpl 객체의 read() 메소드는 실행되지 않았음을 확인할 수 있다.


	package net.madvirus.spring4.chap06.aop;
	
	import org.aspectj.lang.ProceedingJoinPoint;
	import org.aspectj.lang.annotation.Around;
	import org.aspectj.lang.annotation.Aspect;
	import org.aspectj.lang.annotation.Pointcut;
	
	@Aspect
	public class ProfilingAspect {
	
		@Pointcut("execution(public * net.madvirus.spring4.chap06.board..*(..))")
		private void profileTarget() {
		}
	
		@Around("profileTarget()")
		public Object trace(ProceedingJoinPoint joinPoint) throws Throwable {
			String signatureString = joinPoint.getSignature().toShortString();
			System.out.println(signatureString + " 시작");
			long start = System.currentTimeMillis();
			try {
				Object result = joinPoint.proceed();
				return result;
			} finally {
				long finish = System.currentTimeMillis();
				System.out.println(signatureString + " 종료");
				System.out.println(signatureString + " 실행 시간 : " + 
						(finish - start) + "ms");
			}
		}
	}
	
	
위 코드의 라인 08 에서 @Aspect 어노테이션을 사용했는데, @Aspect 어노테이션이 적용된 클래스는 Advice 구현 메소드나 Pointcut 정의를 포함할 수 있게 된다.
ProfilingAspect 클래스의 경우는 Advice 구현 메소드와 Pointcut 정의를 모두 포함하고 있다.

라인 11-13 에서는 @Pointcut 어노테이션을 이용해서 Pointcut을 정의하고 있다.


	@Pointcut("execution(public * net.madvirus.spring4.chap06.board..*(..))")
	private void profileTarget() {
	}
	
	
@Pointcut 어노테이션은 Pointcut을 정의하는 AspectJ 표현식을 값으로 가지며, @Pointcut 어노테이션이 적용된 메소드는 리턴 타입이 void 이어야 한다.

@Pointcut 어노테이션을 이용해서 Pointcut을 정의하면, Advice 관련 어노테이션에서 해당 메소드 이름을 이용해서 Pointcut을 사용할 수 있게 된다.
라인 15에서는 @Around 어노테이션을 이용해서 Around Advice를 구현하고 있는데, 이때 @Around 어노테이션의 값으로 @Pointcut 어노테이션을 적용한 메소드의 이름을 지정한 것을 확인할 수 있다.


	@Pointcut("execution(public * net.madvirus.spring4.chap06.board..*(..))")
	private void profileTarget() {
	}
	
	@Around("profileTarget()")
	public Object trace(ProceedingJoinPoint joinPoint) throws Throwable {
		...
	}
	
	
위 코드에서 trace() 메소드는 Around Advice를 구현하게 되며, profileTarget() 메소드에 정의된 Pointcut에 Advice를 적용하게 된다.

@Aspect 어노테이션을 이용해서 Aspect 클래스를 작성했다면, 다음으로 할 작업은 설정 정보에 Aspect 클래스를 빈으로 등록하는 것이다.
다음은 설정 파일의 작성 예이다.


	<?xml version="1.0" encoding="UTF-8"?>
	
	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:aop="http://www.springframework.org/schema/aop" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
	       http://www.springframework.org/schema/beans/spring-beans.xsd
	       http://www.springframework.org/schema/aop
	       http://www.springframework.org/schema/aop/spring-aop.xsd">
	
		<aop:aspectj-autoproxy />
	
	    <!-- Aspect 클래스를 빈으로 등록 -->
	    <bean id="performanceTraceAspect"
	        class="net.madvirus.spring4.chap06.aop.ProfilingAspect" />
	
		<bean id="writeArticleService"
			class="net.madvirus.spring4.chap06.board.WriteArticleServiceImpl">
			<constructor-arg>
				<ref bean="articleDao" />
			</constructor-arg>
		</bean>
	
		<bean id="articleDao" 
			class="net.madvirus.spring4.chap06.board.MemoryArticleDao" />
	
		<bean id="memberService" 
			class="net.madvirus.spring4.chap06.member.MemberServiceImpl" />
	
	</beans>
	
	
라인 10에서 <aop:aspectj-autoproxy> 태그를 사용했는데, 이 태그를 사용하게 되면 @Aspect 어노테이션이 적용된 빈 개게를 Aspect로 사용하게 된다.

ProfilingAspect의 경우 "execution(public * net.madvirus.spring4.chap06.board..*(..))" Pointcut에 적용되기 때문에,
writeArticleService 빈과 articleDao 빈에 Aspect를 적용한다. (즉, 이 두 빈에 대해 프록시 객체가 생성된다)

실제로 Aspect가 적용되는지 확인하기 위해 다음과 같은 테스트 코드를 작성해보자.


	package net.madvirus.spring4.chap06;
	
	import net.madvirus.spring4.chap06.board.NewArticleRequest;
	import net.madvirus.spring4.chap06.board.WriteArticleService;
	import net.madvirus.spring4.chap06.member.MemberRegRequest;
	import net.madvirus.spring4.chap06.member.MemberService;
	
	import org.springframework.context.support.GenericXmlApplicationContext;
	
	public class MainQuickStart2 {
	
		public static void main(String[] args) {
			GenericXmlApplicationContext ctx =
					new GenericXmlApplicationContext("classpath:acQuickStart2.xml");
	
			WriteArticleService writeArticleService =
					ctx.getBean("writeArticleService", WriteArticleService.class);
			writeArticleService.write(new NewArticleRequest("writer", "title", "content"));

			MemberService memberService = ctx.getBean(MemberService.class);
			MemberRegRequest memberRegReq =
					new MemberRegRequest("id", "name", "pw");
			memberService.regist(memberRegReq);

			ctx.close();
		}
	}
	
	
MainQuickStart2 클래스는 acQuickStart2.xml 파일을 이용해서 ApplicationContext를 생성한 뒤 writeArticleService 빈의 write() 메소드를 호출하고(라인 20),
memberService 빈의 regist() 메소드를 호출하고(라인 29) 있다. 앞서 작성한 ProfilingAspect 클래스의 trace() 메소드는
net.madvirus.spring4.chap06.board 패키지 및 그 하위 패키지에 있는 빈 객체의 public 메소드를 호출하면 적용되는 Around Advice 구현 메소드라고 했는데,
실제로 MainQuickStart2 클래스를 실행해보면 다음과 같은 결과가 출력된다.

	
	WriteArticleService.write(..) 시작
	WriteArticleServiceImpl.write() 호출됨
	ArticleDao.insert(..) 시작
	MemoryArticleDao.insert() 호출됨
	ArticleDao.insert(..) 종료
	ArticleDao.insert(..) 실행 시간 : 0ms
	WriteArticleService.write(..) 종료
	WriteArticleService.write(..) 실행 시간 : 0ms
	
	MemberServiceImpl.regist() 호출됨

	
위는 PrifilingAspect 클래스의 trace() 메소드에서 출력한 내용이다.
실행 결과를 보면 실제 빈 객체의 메소드가 호출되기 전/후로 trace() 메소드에서 실행한 내용이 출력되는 것을 확인할 수 있다.